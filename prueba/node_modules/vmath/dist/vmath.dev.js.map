{"version":3,"file":"vmath.dev.js","sources":["../lib/utils.js","../lib/bits.js","../lib/vec2.js","../lib/vec3.js","../lib/vec4.js","../lib/mat3.js","../lib/quat.js","../lib/mat2.js","../lib/mat23.js","../lib/mat4.js","../lib/color3.js","../lib/color4.js","../index.js"],"sourcesContent":["const _d2r = Math.PI / 180.0;\nconst _r2d = 180.0 / Math.PI;\n\n/**\n * @property {number} EPSILON\n */\nexport const EPSILON = 0.000001;\n\n/**\n * Tests whether or not the arguments have approximately the same value, within an absolute\n * or relative tolerance of glMatrix.EPSILON (an absolute tolerance is used for values less\n * than or equal to 1.0, and a relative tolerance is used for larger values)\n *\n * @param {Number} a The first number to test.\n * @param {Number} b The second number to test.\n * @returns {Boolean} True if the numbers are approximately equal, false otherwise.\n */\nexport function equals(a, b) {\n  return Math.abs(a - b) <= EPSILON * Math.max(1.0, Math.abs(a), Math.abs(b));\n}\n\n/**\n * Tests whether or not the arguments have approximately the same value by given maxDiff\n *\n * @param {Number} a The first number to test.\n * @param {Number} b The second number to test.\n * @param {Number} maxDiff Maximum difference.\n * @returns {Boolean} True if the numbers are approximately equal, false otherwise.\n */\nexport function approx(a, b, maxDiff) {\n  maxDiff = maxDiff || EPSILON;\n  return Math.abs(a - b) <= maxDiff;\n}\n\n/**\n * Clamps a value between a minimum float and maximum float value.\n *\n * @method clamp\n * @param {number} val\n * @param {number} min\n * @param {number} max\n * @return {number}\n */\nexport function clamp(val, min, max) {\n  return val < min ? min : val > max ? max : val;\n}\n\n/**\n * Clamps a value between 0 and 1.\n *\n * @method clamp01\n * @param {number} val\n * @return {number}\n */\nexport function clamp01(val) {\n  return val < 0 ? 0 : val > 1 ? 1 : val;\n}\n\n/**\n * @method lerp\n * @param {number} from\n * @param {number} to\n * @param {number} ratio - the interpolation coefficient\n * @return {number}\n */\nexport function lerp(from, to, ratio) {\n  return from + (to - from) * ratio;\n}\n\n/**\n* Convert Degree To Radian\n*\n* @param {Number} a Angle in Degrees\n*/\nexport function toRadian(a) {\n  return a * _d2r;\n}\n\n/**\n* Convert Radian To Degree\n*\n* @param {Number} a Angle in Radian\n*/\nexport function toDegree(a) {\n  return a * _r2d;\n}\n\n/**\n* @method random\n*/\nexport const random = Math.random;\n\n/**\n * Returns a floating-point random number between min (inclusive) and max (exclusive).\n *\n * @method randomRange\n * @param {number} min\n * @param {number} max\n * @return {number} the random number\n */\nexport function randomRange(min, max) {\n  return Math.random() * (max - min) + min;\n}\n\n/**\n * Returns a random integer between min (inclusive) and max (exclusive).\n *\n * @method randomRangeInt\n * @param {number} min\n * @param {number} max\n * @return {number} the random integer\n */\nexport function randomRangeInt(min, max) {\n  return Math.floor(randomRange(min, max));\n}\n\n/**\n * Returns the next power of two for the value\n *\n * @method nextPow2\n * @param {number} val\n * @return {number} the the next power of two\n */\nexport function nextPow2(val) {\n  --val;\n  val = (val >> 1) | val;\n  val = (val >> 2) | val;\n  val = (val >> 4) | val;\n  val = (val >> 8) | val;\n  val = (val >> 16) | val;\n  ++val;\n\n  return val;\n}","/**\n * Bit twiddling hacks for JavaScript.\n *\n * Author: Mikola Lysenko\n *\n * Ported from Stanford bit twiddling hack library:\n *    http://graphics.stanford.edu/~seander/bithacks.html\n */\n\n'use strict';\n\n// Number of bits in an integer\nexport const INT_BITS = 32;\nexport const INT_MAX =  0x7fffffff;\nexport const INT_MIN = -1<<(INT_BITS-1);\n\n/**\n * Returns -1, 0, +1 depending on sign of x\n *\n * @param {number} v\n * @returns {number}\n */\nexport function sign(v) {\n  return (v > 0) - (v < 0);\n}\n\n/**\n * Computes absolute value of integer\n *\n * @param {number} v\n * @returns {number}\n */\nexport function abs(v) {\n  let mask = v >> (INT_BITS-1);\n  return (v ^ mask) - mask;\n}\n\n/**\n * Computes minimum of integers x and y\n *\n * @param {number} x\n * @param {number} y\n * @returns {number}\n */\nexport function min(x, y) {\n  return y ^ ((x ^ y) & -(x < y));\n}\n\n/**\n * Computes maximum of integers x and y\n *\n * @param {number} x\n * @param {number} y\n * @returns {number}\n */\nexport function max(x, y) {\n  return x ^ ((x ^ y) & -(x < y));\n}\n\n/**\n * Checks if a number is a power of two\n *\n * @param {number} v\n * @returns {boolean}\n */\nexport function isPow2(v) {\n  return !(v & (v-1)) && (!!v);\n}\n\n/**\n * Computes log base 2 of v\n *\n * @param {number} v\n * @returns {number}\n */\nexport function log2(v) {\n  let r, shift;\n  r =     (v > 0xFFFF) << 4; v >>>= r;\n  shift = (v > 0xFF  ) << 3; v >>>= shift; r |= shift;\n  shift = (v > 0xF   ) << 2; v >>>= shift; r |= shift;\n  shift = (v > 0x3   ) << 1; v >>>= shift; r |= shift;\n  return r | (v >> 1);\n}\n\n/**\n * Computes log base 10 of v\n *\n * @param {number} v\n * @returns {number}\n */\nexport function log10(v) {\n  return  (v >= 1000000000) ? 9 : (v >= 100000000) ? 8 : (v >= 10000000) ? 7 :\n          (v >= 1000000) ? 6 : (v >= 100000) ? 5 : (v >= 10000) ? 4 :\n          (v >= 1000) ? 3 : (v >= 100) ? 2 : (v >= 10) ? 1 : 0;\n}\n\n/**\n * Counts number of bits\n *\n * @param {number} v\n * @returns {number}\n */\nexport function popCount(v) {\n  v = v - ((v >>> 1) & 0x55555555);\n  v = (v & 0x33333333) + ((v >>> 2) & 0x33333333);\n  return ((v + (v >>> 4) & 0xF0F0F0F) * 0x1010101) >>> 24;\n}\n\n/**\n * Counts number of trailing zeros\n *\n * @param {number} v\n * @returns {number}\n */\nexport function countTrailingZeros(v) {\n  let c = 32;\n  v &= -v;\n  if (v) c--;\n  if (v & 0x0000FFFF) c -= 16;\n  if (v & 0x00FF00FF) c -= 8;\n  if (v & 0x0F0F0F0F) c -= 4;\n  if (v & 0x33333333) c -= 2;\n  if (v & 0x55555555) c -= 1;\n  return c;\n}\n\n/**\n * Rounds to next power of 2\n *\n * @param {number} v\n * @returns {number}\n */\nexport function nextPow2(v) {\n  v += v === 0;\n  --v;\n  v |= v >>> 1;\n  v |= v >>> 2;\n  v |= v >>> 4;\n  v |= v >>> 8;\n  v |= v >>> 16;\n  return v + 1;\n}\n\n/**\n * Rounds down to previous power of 2\n *\n * @param {number} v\n * @returns {number}\n */\nexport function prevPow2(v) {\n  v |= v >>> 1;\n  v |= v >>> 2;\n  v |= v >>> 4;\n  v |= v >>> 8;\n  v |= v >>> 16;\n  return v - (v>>>1);\n}\n\n/**\n * Computes parity of word\n *\n * @param {number} v\n * @returns {number}\n */\nexport function parity(v) {\n  v ^= v >>> 16;\n  v ^= v >>> 8;\n  v ^= v >>> 4;\n  v &= 0xf;\n  return (0x6996 >>> v) & 1;\n}\n\nconst REVERSE_TABLE = new Array(256);\n\n(function(tab) {\n  for(let i=0; i<256; ++i) {\n    let v = i, r = i, s = 7;\n    for (v >>>= 1; v; v >>>= 1) {\n      r <<= 1;\n      r |= v & 1;\n      --s;\n    }\n    tab[i] = (r << s) & 0xff;\n  }\n})(REVERSE_TABLE);\n\n/**\n * Reverse bits in a 32 bit word\n *\n * @param {number} v\n * @returns {number}\n */\nexport function reverse(v) {\n  return (REVERSE_TABLE[v & 0xff] << 24) |\n         (REVERSE_TABLE[(v >>> 8) & 0xff] << 16) |\n         (REVERSE_TABLE[(v >>> 16) & 0xff] << 8) |\n         REVERSE_TABLE[(v >>> 24) & 0xff];\n}\n\n/**\n * Interleave bits of 2 coordinates with 16 bits. Useful for fast quadtree codes\n *\n * @param {number} x\n * @param {number} y\n * @returns {number}\n */\nexport function interleave2(x, y) {\n  x &= 0xFFFF;\n  x = (x | (x << 8)) & 0x00FF00FF;\n  x = (x | (x << 4)) & 0x0F0F0F0F;\n  x = (x | (x << 2)) & 0x33333333;\n  x = (x | (x << 1)) & 0x55555555;\n\n  y &= 0xFFFF;\n  y = (y | (y << 8)) & 0x00FF00FF;\n  y = (y | (y << 4)) & 0x0F0F0F0F;\n  y = (y | (y << 2)) & 0x33333333;\n  y = (y | (y << 1)) & 0x55555555;\n\n  return x | (y << 1);\n}\n\n/**\n * Extracts the nth interleaved component\n *\n * @param {number} v\n * @param {number} n\n * @returns {number}\n */\nexport function deinterleave2(v, n) {\n  v = (v >>> n) & 0x55555555;\n  v = (v | (v >>> 1))  & 0x33333333;\n  v = (v | (v >>> 2))  & 0x0F0F0F0F;\n  v = (v | (v >>> 4))  & 0x00FF00FF;\n  v = (v | (v >>> 16)) & 0x000FFFF;\n  return (v << 16) >> 16;\n}\n\n/**\n * Interleave bits of 3 coordinates, each with 10 bits.  Useful for fast octree codes\n *\n * @param {number} x\n * @param {number} y\n * @param {number} z\n * @returns {number}\n */\nexport function interleave3(x, y, z) {\n  x &= 0x3FF;\n  x  = (x | (x<<16)) & 4278190335;\n  x  = (x | (x<<8))  & 251719695;\n  x  = (x | (x<<4))  & 3272356035;\n  x  = (x | (x<<2))  & 1227133513;\n\n  y &= 0x3FF;\n  y  = (y | (y<<16)) & 4278190335;\n  y  = (y | (y<<8))  & 251719695;\n  y  = (y | (y<<4))  & 3272356035;\n  y  = (y | (y<<2))  & 1227133513;\n  x |= (y << 1);\n\n  z &= 0x3FF;\n  z  = (z | (z<<16)) & 4278190335;\n  z  = (z | (z<<8))  & 251719695;\n  z  = (z | (z<<4))  & 3272356035;\n  z  = (z | (z<<2))  & 1227133513;\n\n  return x | (z << 2);\n}\n\n/**\n * Extracts nth interleaved component of a 3-tuple\n *\n * @param {number} v\n * @param {number} n\n * @returns {number}\n */\nexport function deinterleave3(v, n) {\n  v = (v >>> n)       & 1227133513;\n  v = (v | (v>>>2))   & 3272356035;\n  v = (v | (v>>>4))   & 251719695;\n  v = (v | (v>>>8))   & 4278190335;\n  v = (v | (v>>>16))  & 0x3FF;\n  return (v<<22)>>22;\n}\n\n/**\n * Computes next combination in colexicographic order (this is mistakenly called nextPermutation on the bit twiddling hacks page)\n *\n * @param {number} v\n * @returns {number}\n */\nexport function nextCombination(v) {\n  let t = v | (v - 1);\n  return (t + 1) | (((~t & -~t) - 1) >>> (countTrailingZeros(v) + 1));\n}","import { EPSILON, random } from './utils';\n\nlet _tmp = new Array(2);\n\nclass _vec2 {\n  constructor(x, y) {\n    this.x = x;\n    this.y = y;\n  }\n\n  toJSON() {\n    _tmp[0] = this.x;\n    _tmp[1] = this.y;\n\n    return _tmp;\n  }\n}\n\n/**\n * @class 2 Dimensional Vector\n * @name vec2\n */\nlet vec2 = {};\n\n/**\n * Creates a new, empty vec2\n *\n * @returns {vec2} a new 2D vector\n */\nvec2.create = function () {\n  return new _vec2(0, 0);\n};\n\n/**\n * Creates a new vec2 initialized with the given values\n *\n * @param {Number} x X component\n * @param {Number} y Y component\n * @returns {vec2} a new 2D vector\n */\nvec2.new = function (x, y) {\n  return new _vec2(x, y);\n};\n\n/**\n * Creates a new vec2 initialized with values from an existing vector\n *\n * @param {vec2} a vector to clone\n * @returns {vec2} a new 2D vector\n */\nvec2.clone = function (a) {\n  return new _vec2(a.x, a.y);\n};\n\n/**\n * Copy the values from one vec2 to another\n *\n * @param {vec2} out the receiving vector\n * @param {vec2} a the source vector\n * @returns {vec2} out\n */\nvec2.copy = function (out, a) {\n  out.x = a.x;\n  out.y = a.y;\n  return out;\n};\n\n/**\n * Set the components of a vec2 to the given values\n *\n * @param {vec2} out the receiving vector\n * @param {Number} x X component\n * @param {Number} y Y component\n * @returns {vec2} out\n */\nvec2.set = function (out, x, y) {\n  out.x = x;\n  out.y = y;\n  return out;\n};\n\n/**\n * Adds two vec2's\n *\n * @param {vec2} out the receiving vector\n * @param {vec2} a the first operand\n * @param {vec2} b the second operand\n * @returns {vec2} out\n */\nvec2.add = function (out, a, b) {\n  out.x = a.x + b.x;\n  out.y = a.y + b.y;\n  return out;\n};\n\n/**\n * Subtracts vector b from vector a\n *\n * @param {vec2} out the receiving vector\n * @param {vec2} a the first operand\n * @param {vec2} b the second operand\n * @returns {vec2} out\n */\nvec2.subtract = function (out, a, b) {\n  out.x = a.x - b.x;\n  out.y = a.y - b.y;\n  return out;\n};\n\n/**\n * Alias for {@link vec2.subtract}\n * @function\n */\nvec2.sub = vec2.subtract;\n\n/**\n * Multiplies two vec2's\n *\n * @param {vec2} out the receiving vector\n * @param {vec2} a the first operand\n * @param {vec2} b the second operand\n * @returns {vec2} out\n */\nvec2.multiply = function (out, a, b) {\n  out.x = a.x * b.x;\n  out.y = a.y * b.y;\n  return out;\n};\n\n/**\n * Alias for {@link vec2.multiply}\n * @function\n */\nvec2.mul = vec2.multiply;\n\n/**\n * Divides two vec2's\n *\n * @param {vec2} out the receiving vector\n * @param {vec2} a the first operand\n * @param {vec2} b the second operand\n * @returns {vec2} out\n */\nvec2.divide = function (out, a, b) {\n  out.x = a.x / b.x;\n  out.y = a.y / b.y;\n  return out;\n};\n\n/**\n * Alias for {@link vec2.divide}\n * @function\n */\nvec2.div = vec2.divide;\n\n/**\n * Math.ceil the components of a vec2\n *\n * @param {vec2} out the receiving vector\n * @param {vec2} a vector to ceil\n * @returns {vec2} out\n */\nvec2.ceil = function (out, a) {\n  out.x = Math.ceil(a.x);\n  out.y = Math.ceil(a.y);\n  return out;\n};\n\n/**\n * Math.floor the components of a vec2\n *\n * @param {vec2} out the receiving vector\n * @param {vec2} a vector to floor\n * @returns {vec2} out\n */\nvec2.floor = function (out, a) {\n  out.x = Math.floor(a.x);\n  out.y = Math.floor(a.y);\n  return out;\n};\n\n/**\n * Returns the minimum of two vec2's\n *\n * @param {vec2} out the receiving vector\n * @param {vec2} a the first operand\n * @param {vec2} b the second operand\n * @returns {vec2} out\n */\nvec2.min = function (out, a, b) {\n  out.x = Math.min(a.x, b.x);\n  out.y = Math.min(a.y, b.y);\n  return out;\n};\n\n/**\n * Returns the maximum of two vec2's\n *\n * @param {vec2} out the receiving vector\n * @param {vec2} a the first operand\n * @param {vec2} b the second operand\n * @returns {vec2} out\n */\nvec2.max = function (out, a, b) {\n  out.x = Math.max(a.x, b.x);\n  out.y = Math.max(a.y, b.y);\n  return out;\n};\n\n/**\n * Math.round the components of a vec2\n *\n * @param {vec2} out the receiving vector\n * @param {vec2} a vector to round\n * @returns {vec2} out\n */\nvec2.round = function (out, a) {\n  out.x = Math.round(a.x);\n  out.y = Math.round(a.y);\n  return out;\n};\n\n/**\n * Scales a vec2 by a scalar number\n *\n * @param {vec2} out the receiving vector\n * @param {vec2} a the vector to scale\n * @param {Number} b amount to scale the vector by\n * @returns {vec2} out\n */\nvec2.scale = function (out, a, b) {\n  out.x = a.x * b;\n  out.y = a.y * b;\n  return out;\n};\n\n/**\n * Adds two vec2's after scaling the second operand by a scalar value\n *\n * @param {vec2} out the receiving vector\n * @param {vec2} a the first operand\n * @param {vec2} b the second operand\n * @param {Number} scale the amount to scale b by before adding\n * @returns {vec2} out\n */\nvec2.scaleAndAdd = function (out, a, b, scale) {\n  out.x = a.x + (b.x * scale);\n  out.y = a.y + (b.y * scale);\n  return out;\n};\n\n/**\n * Calculates the euclidian distance between two vec2's\n *\n * @param {vec2} a the first operand\n * @param {vec2} b the second operand\n * @returns {Number} distance between a and b\n */\nvec2.distance = function (a, b) {\n  let x = b.x - a.x,\n      y = b.y - a.y;\n  return Math.sqrt(x * x + y * y);\n};\n\n/**\n * Alias for {@link vec2.distance}\n * @function\n */\nvec2.dist = vec2.distance;\n\n/**\n * Calculates the squared euclidian distance between two vec2's\n *\n * @param {vec2} a the first operand\n * @param {vec2} b the second operand\n * @returns {Number} squared distance between a and b\n */\nvec2.squaredDistance = function (a, b) {\n  let x = b.x - a.x,\n      y = b.y - a.y;\n  return x * x + y * y;\n};\n\n/**\n * Alias for {@link vec2.squaredDistance}\n * @function\n */\nvec2.sqrDist = vec2.squaredDistance;\n\n/**\n * Calculates the length of a vec2\n *\n * @param {vec2} a vector to calculate length of\n * @returns {Number} length of a\n */\nvec2.length = function (a) {\n  let x = a.x,\n      y = a.y;\n  return Math.sqrt(x * x + y * y);\n};\n\n/**\n * Alias for {@link vec2.length}\n * @function\n */\nvec2.len = vec2.length;\n\n/**\n * Calculates the squared length of a vec2\n *\n * @param {vec2} a vector to calculate squared length of\n * @returns {Number} squared length of a\n */\nvec2.squaredLength = function (a) {\n  let x = a.x,\n      y = a.y;\n  return x * x + y * y;\n};\n\n/**\n * Alias for {@link vec2.squaredLength}\n * @function\n */\nvec2.sqrLen = vec2.squaredLength;\n\n/**\n * Negates the components of a vec2\n *\n * @param {vec2} out the receiving vector\n * @param {vec2} a vector to negate\n * @returns {vec2} out\n */\nvec2.negate = function (out, a) {\n  out.x = -a.x;\n  out.y = -a.y;\n  return out;\n};\n\n/**\n * Returns the inverse of the components of a vec2\n *\n * @param {vec2} out the receiving vector\n * @param {vec2} a vector to invert\n * @returns {vec2} out\n */\nvec2.inverse = function (out, a) {\n  out.x = 1.0 / a.x;\n  out.y = 1.0 / a.y;\n  return out;\n};\n\n/**\n * Returns the inverse of the components of a vec2 safely\n *\n * @param {vec2} out the receiving vector\n * @param {vec2} a vector to invert\n * @returns {vec2} out\n */\nvec2.inverseSafe = function (out, a) {\n  let x = a.x,\n      y = a.y;\n\n  if (Math.abs(x) < EPSILON) {\n    out.x = 0;\n  } else {\n    out.x = 1.0 / x;\n  }\n\n  if (Math.abs(y) < EPSILON) {\n    out.y = 0;\n  } else {\n    out.y = 1.0 / a.y;\n  }\n\n  return out;\n};\n\n/**\n * Normalize a vec2\n *\n * @param {vec2} out the receiving vector\n * @param {vec2} a vector to normalize\n * @returns {vec2} out\n */\nvec2.normalize = function (out, a) {\n  let x = a.x,\n      y = a.y;\n  let len = x * x + y * y;\n  if (len > 0) {\n    //TODO: evaluate use of glm_invsqrt here?\n    len = 1 / Math.sqrt(len);\n    out.x = a.x * len;\n    out.y = a.y * len;\n  }\n  return out;\n};\n\n/**\n * Calculates the dot product of two vec2's\n *\n * @param {vec2} a the first operand\n * @param {vec2} b the second operand\n * @returns {Number} dot product of a and b\n */\nvec2.dot = function (a, b) {\n  return a.x * b.x + a.y * b.y;\n};\n\n/**\n * Computes the cross product of two vec2's\n * Note that the cross product must by definition produce a 3D vector\n *\n * @param {vec3} out the receiving vector\n * @param {vec2} a the first operand\n * @param {vec2} b the second operand\n * @returns {vec3} out\n */\nvec2.cross = function (out, a, b) {\n  let z = a.x * b.y - a.y * b.x;\n  out.x = out.y = 0;\n  out.z = z;\n  return out;\n};\n\n/**\n * Performs a linear interpolation between two vec2's\n *\n * @param {vec2} out the receiving vector\n * @param {vec2} a the first operand\n * @param {vec2} b the second operand\n * @param {Number} t interpolation amount between the two inputs\n * @returns {vec2} out\n */\nvec2.lerp = function (out, a, b, t) {\n  let ax = a.x,\n      ay = a.y;\n  out.x = ax + t * (b.x - ax);\n  out.y = ay + t * (b.y - ay);\n  return out;\n};\n\n/**\n * Generates a random vector with the given scale\n *\n * @param {vec2} out the receiving vector\n * @param {Number} [scale] Length of the resulting vector. If ommitted, a unit vector will be returned\n * @returns {vec2} out\n */\nvec2.random = function (out, scale) {\n  scale = scale || 1.0;\n  let r = random() * 2.0 * Math.PI;\n  out.x = Math.cos(r) * scale;\n  out.y = Math.sin(r) * scale;\n  return out;\n};\n\n/**\n * Transforms the vec2 with a mat2\n *\n * @param {vec2} out the receiving vector\n * @param {vec2} a the vector to transform\n * @param {mat2} m matrix to transform with\n * @returns {vec2} out\n */\nvec2.transformMat2 = function (out, a, m) {\n  let x = a.x,\n      y = a.y;\n  out.x = m.m00 * x + m.m02 * y;\n  out.y = m.m01 * x + m.m03 * y;\n  return out;\n};\n\n/**\n * Transforms the vec2 with a mat23\n *\n * @param {vec2} out the receiving vector\n * @param {vec2} a the vector to transform\n * @param {mat23} m matrix to transform with\n * @returns {vec2} out\n */\nvec2.transformMat23 = function (out, a, m) {\n  let x = a.x,\n      y = a.y;\n  out.x = m.m00 * x + m.m02 * y + m.m04;\n  out.y = m.m01 * x + m.m03 * y + m.m05;\n  return out;\n};\n\n/**\n * Transforms the vec2 with a mat3\n * 3rd vector component is implicitly '1'\n *\n * @param {vec2} out the receiving vector\n * @param {vec2} a the vector to transform\n * @param {mat3} m matrix to transform with\n * @returns {vec2} out\n */\nvec2.transformMat3 = function (out, a, m) {\n  let x = a.x,\n      y = a.y;\n  out.x = m.m00 * x + m.m03 * y + m.m06;\n  out.y = m.m01 * x + m.m04 * y + m.m07;\n  return out;\n};\n\n/**\n * Transforms the vec2 with a mat4\n * 3rd vector component is implicitly '0'\n * 4th vector component is implicitly '1'\n *\n * @param {vec2} out the receiving vector\n * @param {vec2} a the vector to transform\n * @param {mat4} m matrix to transform with\n * @returns {vec2} out\n */\nvec2.transformMat4 = function (out, a, m) {\n  let x = a.x,\n      y = a.y;\n  out.x = m.m00 * x + m.m04 * y + m.m12;\n  out.y = m.m01 * x + m.m05 * y + m.m13;\n  return out;\n};\n\n/**\n * Perform some operation over an array of vec2s.\n *\n * @param {Array} a the array of vectors to iterate over\n * @param {Number} stride Number of elements between the start of each vec2. If 0 assumes tightly packed\n * @param {Number} offset Number of elements to skip at the beginning of the array\n * @param {Number} count Number of vec2s to iterate over. If 0 iterates over entire array\n * @param {Function} fn Function to call for each vector in the array\n * @param {Object} [arg] additional argument to pass to fn\n * @returns {Array} a\n * @function\n */\nvec2.forEach = (function () {\n  let vec = vec2.create();\n\n  return function (a, stride, offset, count, fn, arg) {\n    let i, l;\n    if (!stride) {\n      stride = 2;\n    }\n\n    if (!offset) {\n      offset = 0;\n    }\n\n    if (count) {\n      l = Math.min((count * stride) + offset, a.length);\n    } else {\n      l = a.length;\n    }\n\n    for (i = offset; i < l; i += stride) {\n      vec.x = a[i]; vec.y = a[i + 1];\n      fn(vec, vec, arg);\n      a[i] = vec.x; a[i + 1] = vec.y;\n    }\n\n    return a;\n  };\n})();\n\n/**\n * Returns a string representation of a vector\n *\n * @param {vec2} a vector to represent as a string\n * @returns {String} string representation of the vector\n */\nvec2.str = function (a) {\n  return `vec2(${a.x}, ${a.y})`;\n};\n\n/**\n * Returns typed array\n *\n * @param {array} out\n * @param {vec2} v\n * @returns {array}\n */\nvec2.array = function (out, v) {\n  out[0] = v.x;\n  out[1] = v.y;\n\n  return out;\n};\n\n/**\n * Returns whether or not the vectors exactly have the same elements in the same position (when compared with ===)\n *\n * @param {vec2} a The first vector.\n * @param {vec2} b The second vector.\n * @returns {Boolean} True if the vectors are equal, false otherwise.\n */\nvec2.exactEquals = function (a, b) {\n  return a.x === b.x && a.y === b.y;\n};\n\n/**\n * Returns whether or not the vectors have approximately the same elements in the same position.\n *\n * @param {vec2} a The first vector.\n * @param {vec2} b The second vector.\n * @returns {Boolean} True if the vectors are equal, false otherwise.\n */\nvec2.equals = function (a, b) {\n  let a0 = a.x, a1 = a.y;\n  let b0 = b.x, b1 = b.y;\n  return (Math.abs(a0 - b0) <= EPSILON * Math.max(1.0, Math.abs(a0), Math.abs(b0)) &&\n    Math.abs(a1 - b1) <= EPSILON * Math.max(1.0, Math.abs(a1), Math.abs(b1)));\n};\n\nexport default vec2;","import { EPSILON, random } from './utils';\n\nlet _tmp = new Array(3);\n\nclass _vec3 {\n  constructor(x, y, z) {\n    this.x = x;\n    this.y = y;\n    this.z = z;\n  }\n\n  toJSON() {\n    _tmp[0] = this.x;\n    _tmp[1] = this.y;\n    _tmp[2] = this.z;\n\n    return _tmp;\n  }\n}\n\n/**\n * @class 3 Dimensional Vector\n * @name vec3\n */\nlet vec3 = {};\n\n/**\n * Creates a new, empty vec3\n *\n * @returns {vec3} a new 3D vector\n */\nvec3.create = function () {\n  return new _vec3(0, 0, 0);\n};\n\n/**\n * Creates a new vec3 initialized with the given values\n *\n * @param {Number} x X component\n * @param {Number} y Y component\n * @param {Number} z Z component\n * @returns {vec3} a new 3D vector\n */\nvec3.new = function (x, y, z) {\n  return new _vec3(x, y, z);\n};\n\n/**\n * Creates a new vec3 initialized with values from an existing vector\n *\n * @param {vec3} a vector to clone\n * @returns {vec3} a new 3D vector\n */\nvec3.clone = function (a) {\n  return new _vec3(a.x, a.y, a.z);\n};\n\n/**\n * Copy the values from one vec3 to another\n *\n * @param {vec3} out the receiving vector\n * @param {vec3} a the source vector\n * @returns {vec3} out\n */\nvec3.copy = function (out, a) {\n  out.x = a.x;\n  out.y = a.y;\n  out.z = a.z;\n  return out;\n};\n\n/**\n * Set the components of a vec3 to the given values\n *\n * @param {vec3} out the receiving vector\n * @param {Number} x X component\n * @param {Number} y Y component\n * @param {Number} z Z component\n * @returns {vec3} out\n */\nvec3.set = function (out, x, y, z) {\n  out.x = x;\n  out.y = y;\n  out.z = z;\n  return out;\n};\n\n/**\n * Adds two vec3's\n *\n * @param {vec3} out the receiving vector\n * @param {vec3} a the first operand\n * @param {vec3} b the second operand\n * @returns {vec3} out\n */\nvec3.add = function (out, a, b) {\n  out.x = a.x + b.x;\n  out.y = a.y + b.y;\n  out.z = a.z + b.z;\n  return out;\n};\n\n/**\n * Subtracts vector b from vector a\n *\n * @param {vec3} out the receiving vector\n * @param {vec3} a the first operand\n * @param {vec3} b the second operand\n * @returns {vec3} out\n */\nvec3.subtract = function (out, a, b) {\n  out.x = a.x - b.x;\n  out.y = a.y - b.y;\n  out.z = a.z - b.z;\n  return out;\n};\n\n/**\n * Alias for {@link vec3.subtract}\n * @function\n */\nvec3.sub = vec3.subtract;\n\n/**\n * Multiplies two vec3's\n *\n * @param {vec3} out the receiving vector\n * @param {vec3} a the first operand\n * @param {vec3} b the second operand\n * @returns {vec3} out\n */\nvec3.multiply = function (out, a, b) {\n  out.x = a.x * b.x;\n  out.y = a.y * b.y;\n  out.z = a.z * b.z;\n  return out;\n};\n\n/**\n * Alias for {@link vec3.multiply}\n * @function\n */\nvec3.mul = vec3.multiply;\n\n/**\n * Divides two vec3's\n *\n * @param {vec3} out the receiving vector\n * @param {vec3} a the first operand\n * @param {vec3} b the second operand\n * @returns {vec3} out\n */\nvec3.divide = function (out, a, b) {\n  out.x = a.x / b.x;\n  out.y = a.y / b.y;\n  out.z = a.z / b.z;\n  return out;\n};\n\n/**\n * Alias for {@link vec3.divide}\n * @function\n */\nvec3.div = vec3.divide;\n\n/**\n * Math.ceil the components of a vec3\n *\n * @param {vec3} out the receiving vector\n * @param {vec3} a vector to ceil\n * @returns {vec3} out\n */\nvec3.ceil = function (out, a) {\n  out.x = Math.ceil(a.x);\n  out.y = Math.ceil(a.y);\n  out.z = Math.ceil(a.z);\n  return out;\n};\n\n/**\n * Math.floor the components of a vec3\n *\n * @param {vec3} out the receiving vector\n * @param {vec3} a vector to floor\n * @returns {vec3} out\n */\nvec3.floor = function (out, a) {\n  out.x = Math.floor(a.x);\n  out.y = Math.floor(a.y);\n  out.z = Math.floor(a.z);\n  return out;\n};\n\n/**\n * Returns the minimum of two vec3's\n *\n * @param {vec3} out the receiving vector\n * @param {vec3} a the first operand\n * @param {vec3} b the second operand\n * @returns {vec3} out\n */\nvec3.min = function (out, a, b) {\n  out.x = Math.min(a.x, b.x);\n  out.y = Math.min(a.y, b.y);\n  out.z = Math.min(a.z, b.z);\n  return out;\n};\n\n/**\n * Returns the maximum of two vec3's\n *\n * @param {vec3} out the receiving vector\n * @param {vec3} a the first operand\n * @param {vec3} b the second operand\n * @returns {vec3} out\n */\nvec3.max = function (out, a, b) {\n  out.x = Math.max(a.x, b.x);\n  out.y = Math.max(a.y, b.y);\n  out.z = Math.max(a.z, b.z);\n  return out;\n};\n\n/**\n * Math.round the components of a vec3\n *\n * @param {vec3} out the receiving vector\n * @param {vec3} a vector to round\n * @returns {vec3} out\n */\nvec3.round = function (out, a) {\n  out.x = Math.round(a.x);\n  out.y = Math.round(a.y);\n  out.z = Math.round(a.z);\n  return out;\n};\n\n/**\n * Scales a vec3 by a scalar number\n *\n * @param {vec3} out the receiving vector\n * @param {vec3} a the vector to scale\n * @param {Number} b amount to scale the vector by\n * @returns {vec3} out\n */\nvec3.scale = function (out, a, b) {\n  out.x = a.x * b;\n  out.y = a.y * b;\n  out.z = a.z * b;\n  return out;\n};\n\n/**\n * Adds two vec3's after scaling the second operand by a scalar value\n *\n * @param {vec3} out the receiving vector\n * @param {vec3} a the first operand\n * @param {vec3} b the second operand\n * @param {Number} scale the amount to scale b by before adding\n * @returns {vec3} out\n */\nvec3.scaleAndAdd = function (out, a, b, scale) {\n  out.x = a.x + (b.x * scale);\n  out.y = a.y + (b.y * scale);\n  out.z = a.z + (b.z * scale);\n  return out;\n};\n\n/**\n * Calculates the euclidian distance between two vec3's\n *\n * @param {vec3} a the first operand\n * @param {vec3} b the second operand\n * @returns {Number} distance between a and b\n */\nvec3.distance = function (a, b) {\n  let x = b.x - a.x,\n    y = b.y - a.y,\n    z = b.z - a.z;\n  return Math.sqrt(x * x + y * y + z * z);\n};\n\n/**\n * Alias for {@link vec3.distance}\n * @function\n */\nvec3.dist = vec3.distance;\n\n/**\n * Calculates the squared euclidian distance between two vec3's\n *\n * @param {vec3} a the first operand\n * @param {vec3} b the second operand\n * @returns {Number} squared distance between a and b\n */\nvec3.squaredDistance = function (a, b) {\n  let x = b.x - a.x,\n      y = b.y - a.y,\n      z = b.z - a.z;\n  return x * x + y * y + z * z;\n};\n\n/**\n * Alias for {@link vec3.squaredDistance}\n * @function\n */\nvec3.sqrDist = vec3.squaredDistance;\n\n/**\n * Calculates the length of a vec3\n *\n * @param {vec3} a vector to calculate length of\n * @returns {Number} length of a\n */\nvec3.length = function (a) {\n  let x = a.x,\n      y = a.y,\n      z = a.z;\n  return Math.sqrt(x * x + y * y + z * z);\n};\n\n/**\n * Alias for {@link vec3.length}\n * @function\n */\nvec3.len = vec3.length;\n\n/**\n * Calculates the squared length of a vec3\n *\n * @param {vec3} a vector to calculate squared length of\n * @returns {Number} squared length of a\n */\nvec3.squaredLength = function (a) {\n  let x = a.x,\n      y = a.y,\n      z = a.z;\n  return x * x + y * y + z * z;\n};\n\n/**\n * Alias for {@link vec3.squaredLength}\n * @function\n */\nvec3.sqrLen = vec3.squaredLength;\n\n/**\n * Negates the components of a vec3\n *\n * @param {vec3} out the receiving vector\n * @param {vec3} a vector to negate\n * @returns {vec3} out\n */\nvec3.negate = function (out, a) {\n  out.x = -a.x;\n  out.y = -a.y;\n  out.z = -a.z;\n  return out;\n};\n\n/**\n * Returns the inverse of the components of a vec3\n *\n * @param {vec3} out the receiving vector\n * @param {vec3} a vector to invert\n * @returns {vec3} out\n */\nvec3.inverse = function (out, a) {\n  out.x = 1.0 / a.x;\n  out.y = 1.0 / a.y;\n  out.z = 1.0 / a.z;\n  return out;\n};\n\n/**\n * Returns the inverse of the components of a vec3 safely\n *\n * @param {vec3} out the receiving vector\n * @param {vec3} a vector to invert\n * @returns {vec3} out\n */\nvec3.inverseSafe = function (out, a) {\n  let x = a.x,\n      y = a.y,\n      z = a.z;\n\n  if (Math.abs(x) < EPSILON) {\n    out.x = 0;\n  } else {\n    out.x = 1.0 / x;\n  }\n\n  if (Math.abs(y) < EPSILON) {\n    out.y = 0;\n  } else {\n    out.y = 1.0 / y;\n  }\n\n  if (Math.abs(z) < EPSILON) {\n    out.z = 0;\n  } else {\n    out.z = 1.0 / z;\n  }\n\n  return out;\n};\n\n/**\n * Normalize a vec3\n *\n * @param {vec3} out the receiving vector\n * @param {vec3} a vector to normalize\n * @returns {vec3} out\n */\nvec3.normalize = function (out, a) {\n  let x = a.x,\n      y = a.y,\n      z = a.z;\n\n  let len = x * x + y * y + z * z;\n  if (len > 0) {\n    //TODO: evaluate use of glm_invsqrt here?\n    len = 1 / Math.sqrt(len);\n    out.x = x * len;\n    out.y = y * len;\n    out.z = z * len;\n  }\n  return out;\n};\n\n/**\n * Calculates the dot product of two vec3's\n *\n * @param {vec3} a the first operand\n * @param {vec3} b the second operand\n * @returns {Number} dot product of a and b\n */\nvec3.dot = function (a, b) {\n  return a.x * b.x + a.y * b.y + a.z * b.z;\n};\n\n/**\n * Computes the cross product of two vec3's\n *\n * @param {vec3} out the receiving vector\n * @param {vec3} a the first operand\n * @param {vec3} b the second operand\n * @returns {vec3} out\n */\nvec3.cross = function (out, a, b) {\n  let ax = a.x, ay = a.y, az = a.z,\n      bx = b.x, by = b.y, bz = b.z;\n\n  out.x = ay * bz - az * by;\n  out.y = az * bx - ax * bz;\n  out.z = ax * by - ay * bx;\n  return out;\n};\n\n/**\n * Performs a linear interpolation between two vec3's\n *\n * @param {vec3} out the receiving vector\n * @param {vec3} a the first operand\n * @param {vec3} b the second operand\n * @param {Number} t interpolation amount between the two inputs\n * @returns {vec3} out\n */\nvec3.lerp = function (out, a, b, t) {\n  let ax = a.x,\n      ay = a.y,\n      az = a.z;\n  out.x = ax + t * (b.x - ax);\n  out.y = ay + t * (b.y - ay);\n  out.z = az + t * (b.z - az);\n  return out;\n};\n\n/**\n * Performs a hermite interpolation with two control points\n *\n * @param {vec3} out the receiving vector\n * @param {vec3} a the first operand\n * @param {vec3} b the second operand\n * @param {vec3} c the third operand\n * @param {vec3} d the fourth operand\n * @param {Number} t interpolation amount between the two inputs\n * @returns {vec3} out\n */\nvec3.hermite = function (out, a, b, c, d, t) {\n  let factorTimes2 = t * t,\n      factor1 = factorTimes2 * (2 * t - 3) + 1,\n      factor2 = factorTimes2 * (t - 2) + t,\n      factor3 = factorTimes2 * (t - 1),\n      factor4 = factorTimes2 * (3 - 2 * t);\n\n  out.x = a.x * factor1 + b.x * factor2 + c.x * factor3 + d.x * factor4;\n  out.y = a.y * factor1 + b.y * factor2 + c.y * factor3 + d.y * factor4;\n  out.z = a.z * factor1 + b.z * factor2 + c.z * factor3 + d.z * factor4;\n\n  return out;\n};\n\n/**\n * Performs a bezier interpolation with two control points\n *\n * @param {vec3} out the receiving vector\n * @param {vec3} a the first operand\n * @param {vec3} b the second operand\n * @param {vec3} c the third operand\n * @param {vec3} d the fourth operand\n * @param {Number} t interpolation amount between the two inputs\n * @returns {vec3} out\n */\nvec3.bezier = function (out, a, b, c, d, t) {\n  let inverseFactor = 1 - t,\n      inverseFactorTimesTwo = inverseFactor * inverseFactor,\n      factorTimes2 = t * t,\n      factor1 = inverseFactorTimesTwo * inverseFactor,\n      factor2 = 3 * t * inverseFactorTimesTwo,\n      factor3 = 3 * factorTimes2 * inverseFactor,\n      factor4 = factorTimes2 * t;\n\n  out.x = a.x * factor1 + b.x * factor2 + c.x * factor3 + d.x * factor4;\n  out.y = a.y * factor1 + b.y * factor2 + c.y * factor3 + d.y * factor4;\n  out.z = a.z * factor1 + b.z * factor2 + c.z * factor3 + d.z * factor4;\n\n  return out;\n};\n\n/**\n * Generates a random vector with the given scale\n *\n * @param {vec3} out the receiving vector\n * @param {Number} [scale] Length of the resulting vector. If ommitted, a unit vector will be returned\n * @returns {vec3} out\n */\nvec3.random = function (out, scale) {\n  scale = scale || 1.0;\n\n  let r = random() * 2.0 * Math.PI;\n  let z = (random() * 2.0) - 1.0;\n  let zScale = Math.sqrt(1.0 - z * z) * scale;\n\n  out.x = Math.cos(r) * zScale;\n  out.y = Math.sin(r) * zScale;\n  out.z = z * scale;\n  return out;\n};\n\n/**\n * Transforms the vec3 with a mat4.\n * 4th vector component is implicitly '1'\n *\n * @param {vec3} out the receiving vector\n * @param {vec3} a the vector to transform\n * @param {mat4} m matrix to transform with\n * @returns {vec3} out\n */\nvec3.transformMat4 = function (out, a, m) {\n  let x = a.x, y = a.y, z = a.z,\n      w = m.m03 * x + m.m07 * y + m.m11 * z + m.m15;\n  w = w || 1.0;\n  out.x = (m.m00 * x + m.m04 * y + m.m08 * z + m.m12) / w;\n  out.y = (m.m01 * x + m.m05 * y + m.m09 * z + m.m13) / w;\n  out.z = (m.m02 * x + m.m06 * y + m.m10 * z + m.m14) / w;\n  return out;\n};\n\n/**\n * Transforms the vec3 with a mat3.\n *\n * @param {vec3} out the receiving vector\n * @param {vec3} a the vector to transform\n * @param {mat4} m the 3x3 matrix to transform with\n * @returns {vec3} out\n */\nvec3.transformMat3 = function (out, a, m) {\n  let x = a.x, y = a.y, z = a.z;\n  out.x = x * m.m00 + y * m.m03 + z * m.m06;\n  out.y = x * m.m01 + y * m.m04 + z * m.m07;\n  out.z = x * m.m02 + y * m.m05 + z * m.m08;\n  return out;\n};\n\n/**\n * Transforms the vec3 with a quat\n *\n * @param {vec3} out the receiving vector\n * @param {vec3} a the vector to transform\n * @param {quat} q quaternion to transform with\n * @returns {vec3} out\n */\nvec3.transformQuat = function (out, a, q) {\n  // benchmarks: http://jsperf.com/quaternion-transform-vec3-implementations\n\n  let x = a.x, y = a.y, z = a.z;\n  let qx = q.x, qy = q.y, qz = q.z, qw = q.w;\n\n  // calculate quat * vec\n  let ix = qw * x + qy * z - qz * y;\n  let iy = qw * y + qz * x - qx * z;\n  let iz = qw * z + qx * y - qy * x;\n  let iw = -qx * x - qy * y - qz * z;\n\n  // calculate result * inverse quat\n  out.x = ix * qw + iw * -qx + iy * -qz - iz * -qy;\n  out.y = iy * qw + iw * -qy + iz * -qx - ix * -qz;\n  out.z = iz * qw + iw * -qz + ix * -qy - iy * -qx;\n  return out;\n};\n\n/**\n * Rotate a 3D vector around the x-axis\n * @param {vec3} out The receiving vec3\n * @param {vec3} a The vec3 point to rotate\n * @param {vec3} b The origin of the rotation\n * @param {Number} c The angle of rotation\n * @returns {vec3} out\n */\nvec3.rotateX = function (out, a, b, c) {\n  let p = [], r = [];\n  // Translate point to the origin\n  p.x = a.x - b.x;\n  p.y = a.y - b.y;\n  p.z = a.z - b.z;\n\n  //perform rotation\n  r.x = p.x;\n  r.y = p.y * Math.cos(c) - p.z * Math.sin(c);\n  r.z = p.y * Math.sin(c) + p.z * Math.cos(c);\n\n  //translate to correct position\n  out.x = r.x + b.x;\n  out.y = r.y + b.y;\n  out.z = r.z + b.z;\n\n  return out;\n};\n\n/**\n * Rotate a 3D vector around the y-axis\n * @param {vec3} out The receiving vec3\n * @param {vec3} a The vec3 point to rotate\n * @param {vec3} b The origin of the rotation\n * @param {Number} c The angle of rotation\n * @returns {vec3} out\n */\nvec3.rotateY = function (out, a, b, c) {\n  let p = [], r = [];\n  //Translate point to the origin\n  p.x = a.x - b.x;\n  p.y = a.y - b.y;\n  p.z = a.z - b.z;\n\n  //perform rotation\n  r.x = p.z * Math.sin(c) + p.x * Math.cos(c);\n  r.y = p.y;\n  r.z = p.z * Math.cos(c) - p.x * Math.sin(c);\n\n  //translate to correct position\n  out.x = r.x + b.x;\n  out.y = r.y + b.y;\n  out.z = r.z + b.z;\n\n  return out;\n};\n\n/**\n * Rotate a 3D vector around the z-axis\n * @param {vec3} out The receiving vec3\n * @param {vec3} a The vec3 point to rotate\n * @param {vec3} b The origin of the rotation\n * @param {Number} c The angle of rotation\n * @returns {vec3} out\n */\nvec3.rotateZ = function (out, a, b, c) {\n  let p = [], r = [];\n  //Translate point to the origin\n  p.x = a.x - b.x;\n  p.y = a.y - b.y;\n  p.z = a.z - b.z;\n\n  //perform rotation\n  r.x = p.x * Math.cos(c) - p.y * Math.sin(c);\n  r.y = p.x * Math.sin(c) + p.y * Math.cos(c);\n  r.z = p.z;\n\n  //translate to correct position\n  out.x = r.x + b.x;\n  out.y = r.y + b.y;\n  out.z = r.z + b.z;\n\n  return out;\n};\n\n/**\n * Perform some operation over an array of vec3s.\n *\n * @param {Array} a the array of vectors to iterate over\n * @param {Number} stride Number of elements between the start of each vec3. If 0 assumes tightly packed\n * @param {Number} offset Number of elements to skip at the beginning of the array\n * @param {Number} count Number of vec3s to iterate over. If 0 iterates over entire array\n * @param {Function} fn Function to call for each vector in the array\n * @param {Object} [arg] additional argument to pass to fn\n * @returns {Array} a\n * @function\n */\nvec3.forEach = (function () {\n  let vec = vec3.create();\n\n  return function (a, stride, offset, count, fn, arg) {\n    let i, l;\n    if (!stride) {\n      stride = 3;\n    }\n\n    if (!offset) {\n      offset = 0;\n    }\n\n    if (count) {\n      l = Math.min((count * stride) + offset, a.length);\n    } else {\n      l = a.length;\n    }\n\n    for (i = offset; i < l; i += stride) {\n      vec.x = a[i]; vec.y = a[i + 1]; vec.z = a[i + 2];\n      fn(vec, vec, arg);\n      a[i] = vec.x; a[i + 1] = vec.y; a[i + 2] = vec.z;\n    }\n\n    return a;\n  };\n})();\n\n/**\n * Get the angle between two 3D vectors\n * @param {vec3} a The first operand\n * @param {vec3} b The second operand\n * @returns {Number} The angle in radians\n */\nvec3.angle = (function () {\n  let tempA = vec3.create();\n  let tempB = vec3.create();\n\n  return function (a, b) {\n    vec3.copy(tempA, a);\n    vec3.copy(tempB, b);\n\n    vec3.normalize(tempA, tempA);\n    vec3.normalize(tempB, tempB);\n\n    let cosine = vec3.dot(tempA, tempB);\n\n    if (cosine > 1.0) {\n      return 0;\n    }\n\n    if (cosine < -1.0) {\n      return Math.PI;\n    }\n\n    return Math.acos(cosine);\n  };\n})();\n\n/**\n * Returns a string representation of a vector\n *\n * @param {vec3} a vector to represent as a string\n * @returns {String} string representation of the vector\n */\nvec3.str = function (a) {\n  return `vec3(${a.x}, ${a.y}, ${a.z})`;\n};\n\n/**\n * Returns typed array\n *\n * @param {array} out\n * @param {vec3} v\n * @returns {array}\n */\nvec3.array = function (out, v) {\n  out[0] = v.x;\n  out[1] = v.y;\n  out[2] = v.z;\n\n  return out;\n};\n\n/**\n * Returns whether or not the vectors have exactly the same elements in the same position (when compared with ===)\n *\n * @param {vec3} a The first vector.\n * @param {vec3} b The second vector.\n * @returns {Boolean} True if the vectors are equal, false otherwise.\n */\nvec3.exactEquals = function (a, b) {\n  return a.x === b.x && a.y === b.y && a.z === b.z;\n};\n\n/**\n * Returns whether or not the vectors have approximately the same elements in the same position.\n *\n * @param {vec3} a The first vector.\n * @param {vec3} b The second vector.\n * @returns {Boolean} True if the vectors are equal, false otherwise.\n */\nvec3.equals = function (a, b) {\n  let a0 = a.x, a1 = a.y, a2 = a.z;\n  let b0 = b.x, b1 = b.y, b2 = b.z;\n  return (Math.abs(a0 - b0) <= EPSILON * Math.max(1.0, Math.abs(a0), Math.abs(b0)) &&\n    Math.abs(a1 - b1) <= EPSILON * Math.max(1.0, Math.abs(a1), Math.abs(b1)) &&\n    Math.abs(a2 - b2) <= EPSILON * Math.max(1.0, Math.abs(a2), Math.abs(b2)));\n};\n\nexport default vec3;","import { EPSILON, random } from './utils';\n\nlet _tmp = new Array(4);\n\nclass _vec4 {\n  constructor(x, y, z, w) {\n    this.x = x;\n    this.y = y;\n    this.z = z;\n    this.w = w;\n  }\n\n  toJSON() {\n    _tmp[0] = this.x;\n    _tmp[1] = this.y;\n    _tmp[2] = this.z;\n    _tmp[3] = this.w;\n\n    return _tmp;\n  }\n}\n\n/**\n * @class 4 Dimensional Vector\n * @name vec4\n */\nlet vec4 = {};\n\n/**\n * Creates a new, empty vec4\n *\n * @returns {vec4} a new 4D vector\n */\nvec4.create = function () {\n  return new _vec4(0, 0, 0, 0);\n};\n\n/**\n * Creates a new vec4 initialized with the given values\n *\n * @param {Number} x X component\n * @param {Number} y Y component\n * @param {Number} z Z component\n * @param {Number} w W component\n * @returns {vec4} a new 4D vector\n */\nvec4.new = function (x, y, z, w) {\n  return new _vec4(x, y, z, w);\n};\n\n/**\n * Creates a new vec4 initialized with values from an existing vector\n *\n * @param {vec4} a vector to clone\n * @returns {vec4} a new 4D vector\n */\nvec4.clone = function (a) {\n  return new _vec4(a.x, a.y, a.z, a.w);\n};\n\n/**\n * Copy the values from one vec4 to another\n *\n * @param {vec4} out the receiving vector\n * @param {vec4} a the source vector\n * @returns {vec4} out\n */\nvec4.copy = function (out, a) {\n  out.x = a.x;\n  out.y = a.y;\n  out.z = a.z;\n  out.w = a.w;\n  return out;\n};\n\n/**\n * Set the components of a vec4 to the given values\n *\n * @param {vec4} out the receiving vector\n * @param {Number} x X component\n * @param {Number} y Y component\n * @param {Number} z Z component\n * @param {Number} w W component\n * @returns {vec4} out\n */\nvec4.set = function (out, x, y, z, w) {\n  out.x = x;\n  out.y = y;\n  out.z = z;\n  out.w = w;\n  return out;\n};\n\n/**\n * Adds two vec4's\n *\n * @param {vec4} out the receiving vector\n * @param {vec4} a the first operand\n * @param {vec4} b the second operand\n * @returns {vec4} out\n */\nvec4.add = function (out, a, b) {\n  out.x = a.x + b.x;\n  out.y = a.y + b.y;\n  out.z = a.z + b.z;\n  out.w = a.w + b.w;\n  return out;\n};\n\n/**\n * Subtracts vector b from vector a\n *\n * @param {vec4} out the receiving vector\n * @param {vec4} a the first operand\n * @param {vec4} b the second operand\n * @returns {vec4} out\n */\nvec4.subtract = function (out, a, b) {\n  out.x = a.x - b.x;\n  out.y = a.y - b.y;\n  out.z = a.z - b.z;\n  out.w = a.w - b.w;\n  return out;\n};\n\n/**\n * Alias for {@link vec4.subtract}\n * @function\n */\nvec4.sub = vec4.subtract;\n\n/**\n * Multiplies two vec4's\n *\n * @param {vec4} out the receiving vector\n * @param {vec4} a the first operand\n * @param {vec4} b the second operand\n * @returns {vec4} out\n */\nvec4.multiply = function (out, a, b) {\n  out.x = a.x * b.x;\n  out.y = a.y * b.y;\n  out.z = a.z * b.z;\n  out.w = a.w * b.w;\n  return out;\n};\n\n/**\n * Alias for {@link vec4.multiply}\n * @function\n */\nvec4.mul = vec4.multiply;\n\n/**\n * Divides two vec4's\n *\n * @param {vec4} out the receiving vector\n * @param {vec4} a the first operand\n * @param {vec4} b the second operand\n * @returns {vec4} out\n */\nvec4.divide = function (out, a, b) {\n  out.x = a.x / b.x;\n  out.y = a.y / b.y;\n  out.z = a.z / b.z;\n  out.w = a.w / b.w;\n  return out;\n};\n\n/**\n * Alias for {@link vec4.divide}\n * @function\n */\nvec4.div = vec4.divide;\n\n/**\n * Math.ceil the components of a vec4\n *\n * @param {vec4} out the receiving vector\n * @param {vec4} a vector to ceil\n * @returns {vec4} out\n */\nvec4.ceil = function (out, a) {\n  out.x = Math.ceil(a.x);\n  out.y = Math.ceil(a.y);\n  out.z = Math.ceil(a.z);\n  out.w = Math.ceil(a.w);\n  return out;\n};\n\n/**\n * Math.floor the components of a vec4\n *\n * @param {vec4} out the receiving vector\n * @param {vec4} a vector to floor\n * @returns {vec4} out\n */\nvec4.floor = function (out, a) {\n  out.x = Math.floor(a.x);\n  out.y = Math.floor(a.y);\n  out.z = Math.floor(a.z);\n  out.w = Math.floor(a.w);\n  return out;\n};\n\n/**\n * Returns the minimum of two vec4's\n *\n * @param {vec4} out the receiving vector\n * @param {vec4} a the first operand\n * @param {vec4} b the second operand\n * @returns {vec4} out\n */\nvec4.min = function (out, a, b) {\n  out.x = Math.min(a.x, b.x);\n  out.y = Math.min(a.y, b.y);\n  out.z = Math.min(a.z, b.z);\n  out.w = Math.min(a.w, b.w);\n  return out;\n};\n\n/**\n * Returns the maximum of two vec4's\n *\n * @param {vec4} out the receiving vector\n * @param {vec4} a the first operand\n * @param {vec4} b the second operand\n * @returns {vec4} out\n */\nvec4.max = function (out, a, b) {\n  out.x = Math.max(a.x, b.x);\n  out.y = Math.max(a.y, b.y);\n  out.z = Math.max(a.z, b.z);\n  out.w = Math.max(a.w, b.w);\n  return out;\n};\n\n/**\n * Math.round the components of a vec4\n *\n * @param {vec4} out the receiving vector\n * @param {vec4} a vector to round\n * @returns {vec4} out\n */\nvec4.round = function (out, a) {\n  out.x = Math.round(a.x);\n  out.y = Math.round(a.y);\n  out.z = Math.round(a.z);\n  out.w = Math.round(a.w);\n  return out;\n};\n\n/**\n * Scales a vec4 by a scalar number\n *\n * @param {vec4} out the receiving vector\n * @param {vec4} a the vector to scale\n * @param {Number} b amount to scale the vector by\n * @returns {vec4} out\n */\nvec4.scale = function (out, a, b) {\n  out.x = a.x * b;\n  out.y = a.y * b;\n  out.z = a.z * b;\n  out.w = a.w * b;\n  return out;\n};\n\n/**\n * Adds two vec4's after scaling the second operand by a scalar value\n *\n * @param {vec4} out the receiving vector\n * @param {vec4} a the first operand\n * @param {vec4} b the second operand\n * @param {Number} scale the amount to scale b by before adding\n * @returns {vec4} out\n */\nvec4.scaleAndAdd = function (out, a, b, scale) {\n  out.x = a.x + (b.x * scale);\n  out.y = a.y + (b.y * scale);\n  out.z = a.z + (b.z * scale);\n  out.w = a.w + (b.w * scale);\n  return out;\n};\n\n/**\n * Calculates the euclidian distance between two vec4's\n *\n * @param {vec4} a the first operand\n * @param {vec4} b the second operand\n * @returns {Number} distance between a and b\n */\nvec4.distance = function (a, b) {\n  let x = b.x - a.x,\n    y = b.y - a.y,\n    z = b.z - a.z,\n    w = b.w - a.w;\n  return Math.sqrt(x * x + y * y + z * z + w * w);\n};\n\n/**\n * Alias for {@link vec4.distance}\n * @function\n */\nvec4.dist = vec4.distance;\n\n/**\n * Calculates the squared euclidian distance between two vec4's\n *\n * @param {vec4} a the first operand\n * @param {vec4} b the second operand\n * @returns {Number} squared distance between a and b\n */\nvec4.squaredDistance = function (a, b) {\n  let x = b.x - a.x,\n      y = b.y - a.y,\n      z = b.z - a.z,\n      w = b.w - a.w;\n  return x * x + y * y + z * z + w * w;\n};\n\n/**\n * Alias for {@link vec4.squaredDistance}\n * @function\n */\nvec4.sqrDist = vec4.squaredDistance;\n\n/**\n * Calculates the length of a vec4\n *\n * @param {vec4} a vector to calculate length of\n * @returns {Number} length of a\n */\nvec4.length = function (a) {\n  let x = a.x,\n      y = a.y,\n      z = a.z,\n      w = a.w;\n  return Math.sqrt(x * x + y * y + z * z + w * w);\n};\n\n/**\n * Alias for {@link vec4.length}\n * @function\n */\nvec4.len = vec4.length;\n\n/**\n * Calculates the squared length of a vec4\n *\n * @param {vec4} a vector to calculate squared length of\n * @returns {Number} squared length of a\n */\nvec4.squaredLength = function (a) {\n  let x = a.x,\n      y = a.y,\n      z = a.z,\n      w = a.w;\n  return x * x + y * y + z * z + w * w;\n};\n\n/**\n * Alias for {@link vec4.squaredLength}\n * @function\n */\nvec4.sqrLen = vec4.squaredLength;\n\n/**\n * Negates the components of a vec4\n *\n * @param {vec4} out the receiving vector\n * @param {vec4} a vector to negate\n * @returns {vec4} out\n */\nvec4.negate = function (out, a) {\n  out.x = -a.x;\n  out.y = -a.y;\n  out.z = -a.z;\n  out.w = -a.w;\n  return out;\n};\n\n/**\n * Returns the inverse of the components of a vec4\n *\n * @param {vec4} out the receiving vector\n * @param {vec4} a vector to invert\n * @returns {vec4} out\n */\nvec4.inverse = function (out, a) {\n  out.x = 1.0 / a.x;\n  out.y = 1.0 / a.y;\n  out.z = 1.0 / a.z;\n  out.w = 1.0 / a.w;\n  return out;\n};\n\n/**\n * Returns the inverse of the components of a vec4 safely\n *\n * @param {vec4} out the receiving vector\n * @param {vec4} a vector to invert\n * @returns {vec4} out\n */\nvec4.inverseSafe = function (out, a) {\n  let x = a.x,\n      y = a.y,\n      z = a.z,\n      w = a.w;\n\n  if (Math.abs(x) < EPSILON) {\n    out.x = 0;\n  } else {\n    out.x = 1.0 / x;\n  }\n\n  if (Math.abs(y) < EPSILON) {\n    out.y = 0;\n  } else {\n    out.y = 1.0 / y;\n  }\n\n  if (Math.abs(z) < EPSILON) {\n    out.z = 0;\n  } else {\n    out.z = 1.0 / z;\n  }\n\n  if (Math.abs(w) < EPSILON) {\n    out.w = 0;\n  } else {\n    out.w = 1.0 / w;\n  }\n\n  return out;\n};\n\n/**\n * Normalize a vec4\n *\n * @param {vec4} out the receiving vector\n * @param {vec4} a vector to normalize\n * @returns {vec4} out\n */\nvec4.normalize = function (out, a) {\n  let x = a.x,\n      y = a.y,\n      z = a.z,\n      w = a.w;\n  let len = x * x + y * y + z * z + w * w;\n  if (len > 0) {\n    len = 1 / Math.sqrt(len);\n    out.x = x * len;\n    out.y = y * len;\n    out.z = z * len;\n    out.w = w * len;\n  }\n  return out;\n};\n\n/**\n * Calculates the dot product of two vec4's\n *\n * @param {vec4} a the first operand\n * @param {vec4} b the second operand\n * @returns {Number} dot product of a and b\n */\nvec4.dot = function (a, b) {\n  return a.x * b.x + a.y * b.y + a.z * b.z + a.w * b.w;\n};\n\n/**\n * Performs a linear interpolation between two vec4's\n *\n * @param {vec4} out the receiving vector\n * @param {vec4} a the first operand\n * @param {vec4} b the second operand\n * @param {Number} t interpolation amount between the two inputs\n * @returns {vec4} out\n */\nvec4.lerp = function (out, a, b, t) {\n  let ax = a.x,\n      ay = a.y,\n      az = a.z,\n      aw = a.w;\n  out.x = ax + t * (b.x - ax);\n  out.y = ay + t * (b.y - ay);\n  out.z = az + t * (b.z - az);\n  out.w = aw + t * (b.w - aw);\n  return out;\n};\n\n/**\n * Generates a random vector with the given scale\n *\n * @param {vec4} out the receiving vector\n * @param {Number} [scale] Length of the resulting vector. If ommitted, a unit vector will be returned\n * @returns {vec4} out\n */\nvec4.random = function (out, scale) {\n  scale = scale || 1.0;\n\n  //TODO: This is a pretty awful way of doing this. Find something better.\n  out.x = random();\n  out.y = random();\n  out.z = random();\n  out.w = random();\n  vec4.normalize(out, out);\n  vec4.scale(out, out, scale);\n  return out;\n};\n\n/**\n * Transforms the vec4 with a mat4.\n *\n * @param {vec4} out the receiving vector\n * @param {vec4} a the vector to transform\n * @param {mat4} m matrix to transform with\n * @returns {vec4} out\n */\nvec4.transformMat4 = function (out, a, m) {\n  let x = a.x, y = a.y, z = a.z, w = a.w;\n  out.x = m.m00 * x + m.m04 * y + m.m08 * z + m.m12 * w;\n  out.y = m.m01 * x + m.m05 * y + m.m09 * z + m.m13 * w;\n  out.z = m.m02 * x + m.m06 * y + m.m10 * z + m.m14 * w;\n  out.w = m.m03 * x + m.m07 * y + m.m11 * z + m.m15 * w;\n  return out;\n};\n\n/**\n * Transforms the vec4 with a quat\n *\n * @param {vec4} out the receiving vector\n * @param {vec4} a the vector to transform\n * @param {quat} q quaternion to transform with\n * @returns {vec4} out\n */\nvec4.transformQuat = function (out, a, q) {\n  let x = a.x, y = a.y, z = a.z;\n  let qx = q.x, qy = q.y, qz = q.z, qw = q.w;\n\n  // calculate quat * vec\n  let ix = qw * x + qy * z - qz * y;\n  let iy = qw * y + qz * x - qx * z;\n  let iz = qw * z + qx * y - qy * x;\n  let iw = -qx * x - qy * y - qz * z;\n\n  // calculate result * inverse quat\n  out.x = ix * qw + iw * -qx + iy * -qz - iz * -qy;\n  out.y = iy * qw + iw * -qy + iz * -qx - ix * -qz;\n  out.z = iz * qw + iw * -qz + ix * -qy - iy * -qx;\n  out.w = a.w;\n  return out;\n};\n\n/**\n * Perform some operation over an array of vec4s.\n *\n * @param {Array} a the array of vectors to iterate over\n * @param {Number} stride Number of elements between the start of each vec4. If 0 assumes tightly packed\n * @param {Number} offset Number of elements to skip at the beginning of the array\n * @param {Number} count Number of vec4s to iterate over. If 0 iterates over entire array\n * @param {Function} fn Function to call for each vector in the array\n * @param {Object} [arg] additional argument to pass to fn\n * @returns {Array} a\n * @function\n */\nvec4.forEach = (function () {\n  let vec = vec4.create();\n\n  return function (a, stride, offset, count, fn, arg) {\n    let i, l;\n    if (!stride) {\n      stride = 4;\n    }\n\n    if (!offset) {\n      offset = 0;\n    }\n\n    if (count) {\n      l = Math.min((count * stride) + offset, a.length);\n    } else {\n      l = a.length;\n    }\n\n    for (i = offset; i < l; i += stride) {\n      vec.x = a[i]; vec.y = a[i + 1]; vec.z = a[i + 2]; vec.w = a[i + 3];\n      fn(vec, vec, arg);\n      a[i] = vec.x; a[i + 1] = vec.y; a[i + 2] = vec.z; a[i + 3] = vec.w;\n    }\n\n    return a;\n  };\n})();\n\n/**\n * Returns a string representation of a vector\n *\n * @param {vec4} a vector to represent as a string\n * @returns {String} string representation of the vector\n */\nvec4.str = function (a) {\n  return `vec4(${a.x}, ${a.y}, ${a.z}, ${a.w})`;\n};\n\n/**\n * Returns typed array\n *\n * @param {array} out\n * @param {vec4} v\n * @returns {array}\n */\nvec4.array = function (out, v) {\n  out[0] = v.x;\n  out[1] = v.y;\n  out[2] = v.z;\n  out[3] = v.w;\n\n  return out;\n};\n\n/**\n * Returns whether or not the vectors have exactly the same elements in the same position (when compared with ===)\n *\n * @param {vec4} a The first vector.\n * @param {vec4} b The second vector.\n * @returns {Boolean} True if the vectors are equal, false otherwise.\n */\nvec4.exactEquals = function (a, b) {\n  return a.x === b.x && a.y === b.y && a.z === b.z && a.w === b.w;\n};\n\n/**\n * Returns whether or not the vectors have approximately the same elements in the same position.\n *\n * @param {vec4} a The first vector.\n * @param {vec4} b The second vector.\n * @returns {Boolean} True if the vectors are equal, false otherwise.\n */\nvec4.equals = function (a, b) {\n  let a0 = a.x, a1 = a.y, a2 = a.z, a3 = a.w;\n  let b0 = b.x, b1 = b.y, b2 = b.z, b3 = b.w;\n  return (Math.abs(a0 - b0) <= EPSILON * Math.max(1.0, Math.abs(a0), Math.abs(b0)) &&\n    Math.abs(a1 - b1) <= EPSILON * Math.max(1.0, Math.abs(a1), Math.abs(b1)) &&\n    Math.abs(a2 - b2) <= EPSILON * Math.max(1.0, Math.abs(a2), Math.abs(b2)) &&\n    Math.abs(a3 - b3) <= EPSILON * Math.max(1.0, Math.abs(a3), Math.abs(b3)));\n};\n\nexport default vec4;","import { EPSILON } from './utils';\nimport vec3 from './vec3';\n\nlet _tmp = new Array(9);\n\nclass _mat3 {\n  constructor(m00, m01, m02, m03, m04, m05, m06, m07, m08) {\n    this.m00 = m00;\n    this.m01 = m01;\n    this.m02 = m02;\n    this.m03 = m03;\n    this.m04 = m04;\n    this.m05 = m05;\n    this.m06 = m06;\n    this.m07 = m07;\n    this.m08 = m08;\n  }\n\n  toJSON() {\n    _tmp[0] = this.m00;\n    _tmp[1] = this.m01;\n    _tmp[2] = this.m02;\n    _tmp[3] = this.m03;\n    _tmp[4] = this.m04;\n    _tmp[5] = this.m05;\n    _tmp[6] = this.m06;\n    _tmp[7] = this.m07;\n    _tmp[8] = this.m08;\n\n    return _tmp;\n  }\n}\n\n/**\n * @class 3x3 Matrix\n * @name mat3\n *\n * NOTE: we use column-major matrix for all matrix calculation.\n *\n * This may lead to some confusion when referencing OpenGL documentation,\n * however, which represents out all matricies in column-major format.\n * This means that while in code a matrix may be typed out as:\n *\n * [1, 0, 0, 0,\n *  0, 1, 0, 0,\n *  0, 0, 1, 0,\n *  x, y, z, 0]\n *\n * The same matrix in the [OpenGL documentation](https://www.khronos.org/registry/OpenGL-Refpages/gl2.1/xhtml/glTranslate.xml)\n * is written as:\n *\n *  1 0 0 x\n *  0 1 0 y\n *  0 0 1 z\n *  0 0 0 0\n *\n * Please rest assured, however, that they are the same thing!\n * This is not unique to glMatrix, either, as OpenGL developers have long been confused by the\n * apparent lack of consistency between the memory layout and the documentation.\n */\nlet mat3 = {};\n\n/**\n * Creates a new identity mat3\n *\n * @returns {mat3} a new 3x3 matrix\n */\nmat3.create = function () {\n  return new _mat3(\n    1, 0, 0,\n    0, 1, 0,\n    0, 0, 1\n  );\n};\n\n/**\n * Create a new mat3 with the given values\n *\n * @param {Number} m00 Component in column 0, row 0 position (index 0)\n * @param {Number} m01 Component in column 0, row 1 position (index 1)\n * @param {Number} m02 Component in column 0, row 2 position (index 2)\n * @param {Number} m10 Component in column 1, row 0 position (index 3)\n * @param {Number} m11 Component in column 1, row 1 position (index 4)\n * @param {Number} m12 Component in column 1, row 2 position (index 5)\n * @param {Number} m20 Component in column 2, row 0 position (index 6)\n * @param {Number} m21 Component in column 2, row 1 position (index 7)\n * @param {Number} m22 Component in column 2, row 2 position (index 8)\n * @returns {mat3} A new mat3\n */\nmat3.new = function (m00, m01, m02, m10, m11, m12, m20, m21, m22) {\n  return new _mat3(\n    m00, m01, m02,\n    m10, m11, m12,\n    m20, m21, m22\n  );\n};\n\n/**\n * Creates a new mat3 initialized with values from an existing matrix\n *\n * @param {mat3} a matrix to clone\n * @returns {mat3} a new 3x3 matrix\n */\nmat3.clone = function (a) {\n  return new _mat3(\n    a.m00, a.m01, a.m02,\n    a.m03, a.m04, a.m05,\n    a.m06, a.m07, a.m08\n  );\n};\n\n/**\n * Copy the values from one mat3 to another\n *\n * @param {mat3} out the receiving matrix\n * @param {mat3} a the source matrix\n * @returns {mat3} out\n */\nmat3.copy = function (out, a) {\n  out.m00 = a.m00;\n  out.m01 = a.m01;\n  out.m02 = a.m02;\n  out.m03 = a.m03;\n  out.m04 = a.m04;\n  out.m05 = a.m05;\n  out.m06 = a.m06;\n  out.m07 = a.m07;\n  out.m08 = a.m08;\n  return out;\n};\n\n/**\n * Set the components of a mat3 to the given values\n *\n * @param {mat3} out the receiving matrix\n * @param {Number} m00 Component in column 0, row 0 position (index 0)\n * @param {Number} m01 Component in column 0, row 1 position (index 1)\n * @param {Number} m02 Component in column 0, row 2 position (index 2)\n * @param {Number} m10 Component in column 1, row 0 position (index 3)\n * @param {Number} m11 Component in column 1, row 1 position (index 4)\n * @param {Number} m12 Component in column 1, row 2 position (index 5)\n * @param {Number} m20 Component in column 2, row 0 position (index 6)\n * @param {Number} m21 Component in column 2, row 1 position (index 7)\n * @param {Number} m22 Component in column 2, row 2 position (index 8)\n * @returns {mat3} out\n */\nmat3.set = function (out, m00, m01, m02, m10, m11, m12, m20, m21, m22) {\n  out.m00 = m00;\n  out.m01 = m01;\n  out.m02 = m02;\n  out.m03 = m10;\n  out.m04 = m11;\n  out.m05 = m12;\n  out.m06 = m20;\n  out.m07 = m21;\n  out.m08 = m22;\n  return out;\n};\n\n/**\n * Set a mat3 to the identity matrix\n *\n * @param {mat3} out the receiving matrix\n * @returns {mat3} out\n */\nmat3.identity = function (out) {\n  out.m00 = 1;\n  out.m01 = 0;\n  out.m02 = 0;\n  out.m03 = 0;\n  out.m04 = 1;\n  out.m05 = 0;\n  out.m06 = 0;\n  out.m07 = 0;\n  out.m08 = 1;\n  return out;\n};\n\n/**\n * Transpose the values of a mat3\n *\n * @param {mat3} out the receiving matrix\n * @param {mat3} a the source matrix\n * @returns {mat3} out\n */\nmat3.transpose = function (out, a) {\n  // If we are transposing ourselves we can skip a few steps but have to cache some values\n  if (out === a) {\n    let a01 = a.m01, a02 = a.m02, a12 = a.m05;\n    out.m01 = a.m03;\n    out.m02 = a.m06;\n    out.m03 = a01;\n    out.m05 = a.m07;\n    out.m06 = a02;\n    out.m07 = a12;\n  } else {\n    out.m00 = a.m00;\n    out.m01 = a.m03;\n    out.m02 = a.m06;\n    out.m03 = a.m01;\n    out.m04 = a.m04;\n    out.m05 = a.m07;\n    out.m06 = a.m02;\n    out.m07 = a.m05;\n    out.m08 = a.m08;\n  }\n\n  return out;\n};\n\n/**\n * Inverts a mat3\n *\n * @param {mat3} out the receiving matrix\n * @param {mat3} a the source matrix\n * @returns {mat3} out\n */\nmat3.invert = function (out, a) {\n  let a00 = a.m00, a01 = a.m01, a02 = a.m02,\n      a10 = a.m03, a11 = a.m04, a12 = a.m05,\n      a20 = a.m06, a21 = a.m07, a22 = a.m08;\n\n  let b01 = a22 * a11 - a12 * a21;\n  let b11 = -a22 * a10 + a12 * a20;\n  let b21 = a21 * a10 - a11 * a20;\n\n  // Calculate the determinant\n  let det = a00 * b01 + a01 * b11 + a02 * b21;\n\n  if (!det) {\n    return null;\n  }\n  det = 1.0 / det;\n\n  out.m00 = b01 * det;\n  out.m01 = (-a22 * a01 + a02 * a21) * det;\n  out.m02 = (a12 * a01 - a02 * a11) * det;\n  out.m03 = b11 * det;\n  out.m04 = (a22 * a00 - a02 * a20) * det;\n  out.m05 = (-a12 * a00 + a02 * a10) * det;\n  out.m06 = b21 * det;\n  out.m07 = (-a21 * a00 + a01 * a20) * det;\n  out.m08 = (a11 * a00 - a01 * a10) * det;\n  return out;\n};\n\n/**\n * Calculates the adjugate of a mat3\n *\n * @param {mat3} out the receiving matrix\n * @param {mat3} a the source matrix\n * @returns {mat3} out\n */\nmat3.adjoint = function (out, a) {\n  let a00 = a.m00, a01 = a.m01, a02 = a.m02,\n      a10 = a.m03, a11 = a.m04, a12 = a.m05,\n      a20 = a.m06, a21 = a.m07, a22 = a.m08;\n\n  out.m00 = (a11 * a22 - a12 * a21);\n  out.m01 = (a02 * a21 - a01 * a22);\n  out.m02 = (a01 * a12 - a02 * a11);\n  out.m03 = (a12 * a20 - a10 * a22);\n  out.m04 = (a00 * a22 - a02 * a20);\n  out.m05 = (a02 * a10 - a00 * a12);\n  out.m06 = (a10 * a21 - a11 * a20);\n  out.m07 = (a01 * a20 - a00 * a21);\n  out.m08 = (a00 * a11 - a01 * a10);\n  return out;\n};\n\n/**\n * Calculates the determinant of a mat3\n *\n * @param {mat3} a the source matrix\n * @returns {Number} determinant of a\n */\nmat3.determinant = function (a) {\n  let a00 = a.m00, a01 = a.m01, a02 = a.m02,\n      a10 = a.m03, a11 = a.m04, a12 = a.m05,\n      a20 = a.m06, a21 = a.m07, a22 = a.m08;\n\n  return a00 * (a22 * a11 - a12 * a21) + a01 * (-a22 * a10 + a12 * a20) + a02 * (a21 * a10 - a11 * a20);\n};\n\n/**\n * Multiplies two mat3's\n *\n * @param {mat3} out the receiving matrix\n * @param {mat3} a the first operand\n * @param {mat3} b the second operand\n * @returns {mat3} out\n */\nmat3.multiply = function (out, a, b) {\n  let a00 = a.m00, a01 = a.m01, a02 = a.m02,\n      a10 = a.m03, a11 = a.m04, a12 = a.m05,\n      a20 = a.m06, a21 = a.m07, a22 = a.m08;\n\n  let b00 = b.m00, b01 = b.m01, b02 = b.m02;\n  let b10 = b.m03, b11 = b.m04, b12 = b.m05;\n  let b20 = b.m06, b21 = b.m07, b22 = b.m08;\n\n  out.m00 = b00 * a00 + b01 * a10 + b02 * a20;\n  out.m01 = b00 * a01 + b01 * a11 + b02 * a21;\n  out.m02 = b00 * a02 + b01 * a12 + b02 * a22;\n\n  out.m03 = b10 * a00 + b11 * a10 + b12 * a20;\n  out.m04 = b10 * a01 + b11 * a11 + b12 * a21;\n  out.m05 = b10 * a02 + b11 * a12 + b12 * a22;\n\n  out.m06 = b20 * a00 + b21 * a10 + b22 * a20;\n  out.m07 = b20 * a01 + b21 * a11 + b22 * a21;\n  out.m08 = b20 * a02 + b21 * a12 + b22 * a22;\n  return out;\n};\n\n/**\n * Alias for {@link mat3.multiply}\n * @function\n */\nmat3.mul = mat3.multiply;\n\n/**\n * Translate a mat3 by the given vector\n *\n * @param {mat3} out the receiving matrix\n * @param {mat3} a the matrix to translate\n * @param {vec2} v vector to translate by\n * @returns {mat3} out\n */\nmat3.translate = function (out, a, v) {\n  let a00 = a.m00, a01 = a.m01, a02 = a.m02,\n      a10 = a.m03, a11 = a.m04, a12 = a.m05,\n      a20 = a.m06, a21 = a.m07, a22 = a.m08;\n  let x = v.x, y = v.y;\n\n  out.m00 = a00;\n  out.m01 = a01;\n  out.m02 = a02;\n\n  out.m03 = a10;\n  out.m04 = a11;\n  out.m05 = a12;\n\n  out.m06 = x * a00 + y * a10 + a20;\n  out.m07 = x * a01 + y * a11 + a21;\n  out.m08 = x * a02 + y * a12 + a22;\n  return out;\n};\n\n/**\n * Rotates a mat3 by the given angle\n *\n * @param {mat3} out the receiving matrix\n * @param {mat3} a the matrix to rotate\n * @param {Number} rad the angle to rotate the matrix by\n * @returns {mat3} out\n */\nmat3.rotate = function (out, a, rad) {\n  let a00 = a.m00, a01 = a.m01, a02 = a.m02,\n      a10 = a.m03, a11 = a.m04, a12 = a.m05,\n      a20 = a.m06, a21 = a.m07, a22 = a.m08;\n\n  let s = Math.sin(rad);\n  let c = Math.cos(rad);\n\n  out.m00 = c * a00 + s * a10;\n  out.m01 = c * a01 + s * a11;\n  out.m02 = c * a02 + s * a12;\n\n  out.m03 = c * a10 - s * a00;\n  out.m04 = c * a11 - s * a01;\n  out.m05 = c * a12 - s * a02;\n\n  out.m06 = a20;\n  out.m07 = a21;\n  out.m08 = a22;\n  return out;\n};\n\n/**\n * Scales the mat3 by the dimensions in the given vec2\n *\n * @param {mat3} out the receiving matrix\n * @param {mat3} a the matrix to rotate\n * @param {vec2} v the vec2 to scale the matrix by\n * @returns {mat3} out\n **/\nmat3.scale = function (out, a, v) {\n  let x = v.x, y = v.y;\n\n  out.m00 = x * a.m00;\n  out.m01 = x * a.m01;\n  out.m02 = x * a.m02;\n\n  out.m03 = y * a.m03;\n  out.m04 = y * a.m04;\n  out.m05 = y * a.m05;\n\n  out.m06 = a.m06;\n  out.m07 = a.m07;\n  out.m08 = a.m08;\n  return out;\n};\n\n/**\n * Copies the upper-left 3x3 values into the given mat3.\n *\n * @param {mat3} out the receiving 3x3 matrix\n * @param {mat4} a   the source 4x4 matrix\n * @returns {mat3} out\n */\nmat3.fromMat4 = function (out, a) {\n  out.m00 = a.m00;\n  out.m01 = a.m01;\n  out.m02 = a.m02;\n  out.m03 = a.m04;\n  out.m04 = a.m05;\n  out.m05 = a.m06;\n  out.m06 = a.m08;\n  out.m07 = a.m09;\n  out.m08 = a.m10;\n  return out;\n};\n\n/**\n * Creates a matrix from a vector translation\n * This is equivalent to (but much faster than):\n *\n *     mat3.identity(dest);\n *     mat3.translate(dest, dest, vec);\n *\n * @param {mat3} out mat3 receiving operation result\n * @param {vec2} v Translation vector\n * @returns {mat3} out\n */\nmat3.fromTranslation = function (out, v) {\n  out.m00 = 1;\n  out.m01 = 0;\n  out.m02 = 0;\n  out.m03 = 0;\n  out.m04 = 1;\n  out.m05 = 0;\n  out.m06 = v.x;\n  out.m07 = v.y;\n  out.m08 = 1;\n  return out;\n};\n\n/**\n * Creates a matrix from a given angle\n * This is equivalent to (but much faster than):\n *\n *     mat3.identity(dest);\n *     mat3.rotate(dest, dest, rad);\n *\n * @param {mat3} out mat3 receiving operation result\n * @param {Number} rad the angle to rotate the matrix by\n * @returns {mat3} out\n */\nmat3.fromRotation = function (out, rad) {\n  let s = Math.sin(rad), c = Math.cos(rad);\n\n  out.m00 = c;\n  out.m01 = s;\n  out.m02 = 0;\n\n  out.m03 = -s;\n  out.m04 = c;\n  out.m05 = 0;\n\n  out.m06 = 0;\n  out.m07 = 0;\n  out.m08 = 1;\n  return out;\n};\n\n/**\n * Creates a matrix from a vector scaling\n * This is equivalent to (but much faster than):\n *\n *     mat3.identity(dest);\n *     mat3.scale(dest, dest, vec);\n *\n * @param {mat3} out mat3 receiving operation result\n * @param {vec2} v Scaling vector\n * @returns {mat3} out\n */\nmat3.fromScaling = function (out, v) {\n  out.m00 = v.x;\n  out.m01 = 0;\n  out.m02 = 0;\n\n  out.m03 = 0;\n  out.m04 = v.y;\n  out.m05 = 0;\n\n  out.m06 = 0;\n  out.m07 = 0;\n  out.m08 = 1;\n  return out;\n};\n\n/**\n * Copies the values from a mat2d into a mat3\n *\n * @param {mat3} out the receiving matrix\n * @param {mat2d} a the matrix to copy\n * @returns {mat3} out\n **/\nmat3.fromMat2d = function (out, a) {\n  out.m00 = a.m00;\n  out.m01 = a.m01;\n  out.m02 = 0;\n\n  out.m03 = a.m02;\n  out.m04 = a.m03;\n  out.m05 = 0;\n\n  out.m06 = a.m04;\n  out.m07 = a.m05;\n  out.m08 = 1;\n  return out;\n};\n\n/**\n* Calculates a 3x3 matrix from the given quaternion\n*\n* @param {mat3} out mat3 receiving operation result\n* @param {quat} q Quaternion to create matrix from\n*\n* @returns {mat3} out\n*/\nmat3.fromQuat = function (out, q) {\n  let x = q.x, y = q.y, z = q.z, w = q.w;\n  let x2 = x + x;\n  let y2 = y + y;\n  let z2 = z + z;\n\n  let xx = x * x2;\n  let yx = y * x2;\n  let yy = y * y2;\n  let zx = z * x2;\n  let zy = z * y2;\n  let zz = z * z2;\n  let wx = w * x2;\n  let wy = w * y2;\n  let wz = w * z2;\n\n  out.m00 = 1 - yy - zz;\n  out.m03 = yx - wz;\n  out.m06 = zx + wy;\n\n  out.m01 = yx + wz;\n  out.m04 = 1 - xx - zz;\n  out.m07 = zy - wx;\n\n  out.m02 = zx - wy;\n  out.m05 = zy + wx;\n  out.m08 = 1 - xx - yy;\n\n  return out;\n};\n\n/**\n* Calculates a 3x3 matrix from view direction and up direction\n*\n* @param {mat3} out mat3 receiving operation result\n* @param {vec3} view view direction (must be normalized)\n* @param {vec3} [up] up direction, default is (0,1,0) (must be normalized)\n*\n* @returns {mat3} out\n*/\nmat3.fromViewUp = (function () {\n  let default_up = vec3.new(0, 1, 0);\n  let x = vec3.create();\n  let y = vec3.create();\n\n  return function (out, view, up) {\n    if (vec3.sqrLen(view) < EPSILON * EPSILON) {\n      mat3.identity(out);\n      return out;\n    }\n\n    up = up || default_up;\n    vec3.cross(x, up, view);\n\n    if (vec3.sqrLen(x) < EPSILON * EPSILON) {\n      mat3.identity(out);\n      return out;\n    }\n\n    vec3.cross(y, view, x);\n    mat3.set(out,\n      x.x, x.y, x.z,\n      y.x, y.y, y.z,\n      view.x, view.y, view.z\n    );\n\n    return out;\n  };\n})();\n\n/**\n* Calculates a 3x3 normal matrix (transpose inverse) from the 4x4 matrix\n*\n* @param {mat3} out mat3 receiving operation result\n* @param {mat4} a Mat4 to derive the normal matrix from\n*\n* @returns {mat3} out\n*/\nmat3.normalFromMat4 = function (out, a) {\n  let a00 = a.m00, a01 = a.m01, a02 = a.m02, a03 = a.m03,\n      a10 = a.m04, a11 = a.m05, a12 = a.m06, a13 = a.m07,\n      a20 = a.m08, a21 = a.m09, a22 = a.m10, a23 = a.m11,\n      a30 = a.m12, a31 = a.m13, a32 = a.m14, a33 = a.m15;\n\n  let b00 = a00 * a11 - a01 * a10;\n  let b01 = a00 * a12 - a02 * a10;\n  let b02 = a00 * a13 - a03 * a10;\n  let b03 = a01 * a12 - a02 * a11;\n  let b04 = a01 * a13 - a03 * a11;\n  let b05 = a02 * a13 - a03 * a12;\n  let b06 = a20 * a31 - a21 * a30;\n  let b07 = a20 * a32 - a22 * a30;\n  let b08 = a20 * a33 - a23 * a30;\n  let b09 = a21 * a32 - a22 * a31;\n  let b10 = a21 * a33 - a23 * a31;\n  let b11 = a22 * a33 - a23 * a32;\n\n  // Calculate the determinant\n  let det = b00 * b11 - b01 * b10 + b02 * b09 + b03 * b08 - b04 * b07 + b05 * b06;\n\n  if (!det) {\n    return null;\n  }\n  det = 1.0 / det;\n\n  out.m00 = (a11 * b11 - a12 * b10 + a13 * b09) * det;\n  out.m01 = (a12 * b08 - a10 * b11 - a13 * b07) * det;\n  out.m02 = (a10 * b10 - a11 * b08 + a13 * b06) * det;\n\n  out.m03 = (a02 * b10 - a01 * b11 - a03 * b09) * det;\n  out.m04 = (a00 * b11 - a02 * b08 + a03 * b07) * det;\n  out.m05 = (a01 * b08 - a00 * b10 - a03 * b06) * det;\n\n  out.m06 = (a31 * b05 - a32 * b04 + a33 * b03) * det;\n  out.m07 = (a32 * b02 - a30 * b05 - a33 * b01) * det;\n  out.m08 = (a30 * b04 - a31 * b02 + a33 * b00) * det;\n\n  return out;\n};\n\n/**\n * Returns a string representation of a mat3\n *\n * @param {mat3} a matrix to represent as a string\n * @returns {String} string representation of the matrix\n */\nmat3.str = function (a) {\n  return `mat3(${a.m00}, ${a.m01}, ${a.m02}, ${a.m03}, ${a.m04}, ${a.m05}, ${a.m06}, ${a.m07}, ${a.m08})`;\n};\n\n/**\n * Returns typed array\n *\n * @param {array} out\n * @param {mat3} m\n * @returns {array}\n */\nmat3.array = function (out, m) {\n  out[0] = m.m00;\n  out[1] = m.m01;\n  out[2] = m.m02;\n  out[3] = m.m03;\n  out[4] = m.m04;\n  out[5] = m.m05;\n  out[6] = m.m06;\n  out[7] = m.m07;\n  out[8] = m.m08;\n\n  return out;\n};\n\n/**\n * Returns Frobenius norm of a mat3\n *\n * @param {mat3} a the matrix to calculate Frobenius norm of\n * @returns {Number} Frobenius norm\n */\nmat3.frob = function (a) {\n  return (Math.sqrt(Math.pow(a.m00, 2) + Math.pow(a.m01, 2) + Math.pow(a.m02, 2) + Math.pow(a.m03, 2) + Math.pow(a.m04, 2) + Math.pow(a.m05, 2) + Math.pow(a.m06, 2) + Math.pow(a.m07, 2) + Math.pow(a.m08, 2)));\n};\n\n/**\n * Adds two mat3's\n *\n * @param {mat3} out the receiving matrix\n * @param {mat3} a the first operand\n * @param {mat3} b the second operand\n * @returns {mat3} out\n */\nmat3.add = function (out, a, b) {\n  out.m00 = a.m00 + b.m00;\n  out.m01 = a.m01 + b.m01;\n  out.m02 = a.m02 + b.m02;\n  out.m03 = a.m03 + b.m03;\n  out.m04 = a.m04 + b.m04;\n  out.m05 = a.m05 + b.m05;\n  out.m06 = a.m06 + b.m06;\n  out.m07 = a.m07 + b.m07;\n  out.m08 = a.m08 + b.m08;\n  return out;\n};\n\n/**\n * Subtracts matrix b from matrix a\n *\n * @param {mat3} out the receiving matrix\n * @param {mat3} a the first operand\n * @param {mat3} b the second operand\n * @returns {mat3} out\n */\nmat3.subtract = function (out, a, b) {\n  out.m00 = a.m00 - b.m00;\n  out.m01 = a.m01 - b.m01;\n  out.m02 = a.m02 - b.m02;\n  out.m03 = a.m03 - b.m03;\n  out.m04 = a.m04 - b.m04;\n  out.m05 = a.m05 - b.m05;\n  out.m06 = a.m06 - b.m06;\n  out.m07 = a.m07 - b.m07;\n  out.m08 = a.m08 - b.m08;\n  return out;\n};\n\n/**\n * Alias for {@link mat3.subtract}\n * @function\n */\nmat3.sub = mat3.subtract;\n\n/**\n * Multiply each element of the matrix by a scalar.\n *\n * @param {mat3} out the receiving matrix\n * @param {mat3} a the matrix to scale\n * @param {Number} b amount to scale the matrix's elements by\n * @returns {mat3} out\n */\nmat3.multiplyScalar = function (out, a, b) {\n  out.m00 = a.m00 * b;\n  out.m01 = a.m01 * b;\n  out.m02 = a.m02 * b;\n  out.m03 = a.m03 * b;\n  out.m04 = a.m04 * b;\n  out.m05 = a.m05 * b;\n  out.m06 = a.m06 * b;\n  out.m07 = a.m07 * b;\n  out.m08 = a.m08 * b;\n  return out;\n};\n\n/**\n * Adds two mat3's after multiplying each element of the second operand by a scalar value.\n *\n * @param {mat3} out the receiving vector\n * @param {mat3} a the first operand\n * @param {mat3} b the second operand\n * @param {Number} scale the amount to scale b's elements by before adding\n * @returns {mat3} out\n */\nmat3.multiplyScalarAndAdd = function (out, a, b, scale) {\n  out.m00 = a.m00 + (b.m00 * scale);\n  out.m01 = a.m01 + (b.m01 * scale);\n  out.m02 = a.m02 + (b.m02 * scale);\n  out.m03 = a.m03 + (b.m03 * scale);\n  out.m04 = a.m04 + (b.m04 * scale);\n  out.m05 = a.m05 + (b.m05 * scale);\n  out.m06 = a.m06 + (b.m06 * scale);\n  out.m07 = a.m07 + (b.m07 * scale);\n  out.m08 = a.m08 + (b.m08 * scale);\n  return out;\n};\n\n/**\n * Returns whether or not the matrices have exactly the same elements in the same position (when compared with ===)\n *\n * @param {mat3} a The first matrix.\n * @param {mat3} b The second matrix.\n * @returns {Boolean} True if the matrices are equal, false otherwise.\n */\nmat3.exactEquals = function (a, b) {\n  return a.m00 === b.m00 && a.m01 === b.m01 && a.m02 === b.m02 &&\n    a.m03 === b.m03 && a.m04 === b.m04 && a.m05 === b.m05 &&\n    a.m06 === b.m06 && a.m07 === b.m07 && a.m08 === b.m08;\n};\n\n/**\n * Returns whether or not the matrices have approximately the same elements in the same position.\n *\n * @param {mat3} a The first matrix.\n * @param {mat3} b The second matrix.\n * @returns {Boolean} True if the matrices are equal, false otherwise.\n */\nmat3.equals = function (a, b) {\n  let a0 = a.m00, a1 = a.m01, a2 = a.m02, a3 = a.m03, a4 = a.m04, a5 = a.m05, a6 = a.m06, a7 = a.m07, a8 = a.m08;\n  let b0 = b.m00, b1 = b.m01, b2 = b.m02, b3 = b.m03, b4 = b.m04, b5 = b.m05, b6 = b.m06, b7 = b.m07, b8 = b.m08;\n  return (\n    Math.abs(a0 - b0) <= EPSILON * Math.max(1.0, Math.abs(a0), Math.abs(b0)) &&\n    Math.abs(a1 - b1) <= EPSILON * Math.max(1.0, Math.abs(a1), Math.abs(b1)) &&\n    Math.abs(a2 - b2) <= EPSILON * Math.max(1.0, Math.abs(a2), Math.abs(b2)) &&\n    Math.abs(a3 - b3) <= EPSILON * Math.max(1.0, Math.abs(a3), Math.abs(b3)) &&\n    Math.abs(a4 - b4) <= EPSILON * Math.max(1.0, Math.abs(a4), Math.abs(b4)) &&\n    Math.abs(a5 - b5) <= EPSILON * Math.max(1.0, Math.abs(a5), Math.abs(b5)) &&\n    Math.abs(a6 - b6) <= EPSILON * Math.max(1.0, Math.abs(a6), Math.abs(b6)) &&\n    Math.abs(a7 - b7) <= EPSILON * Math.max(1.0, Math.abs(a7), Math.abs(b7)) &&\n    Math.abs(a8 - b8) <= EPSILON * Math.max(1.0, Math.abs(a8), Math.abs(b8))\n  );\n};\n\nexport default mat3;","import vec3 from './vec3';\nimport vec4 from './vec4';\nimport mat3 from './mat3';\n\nlet _tmp = new Array(4);\n\nclass _quat {\n  constructor(x, y, z, w) {\n    this.x = x;\n    this.y = y;\n    this.z = z;\n    this.w = w;\n  }\n\n  toJSON() {\n    _tmp[0] = this.x;\n    _tmp[1] = this.y;\n    _tmp[2] = this.z;\n    _tmp[3] = this.w;\n\n    return _tmp;\n  }\n}\n\n/**\n * @class Quaternion\n * @name quat\n */\nlet quat = {};\n\n/**\n * Creates a new identity quat\n *\n * @returns {quat} a new quaternion\n */\nquat.create = function () {\n  return new _quat(0, 0, 0, 1);\n};\n\n/**\n * Creates a new quat initialized with the given values\n *\n * @param {Number} x X component\n * @param {Number} y Y component\n * @param {Number} z Z component\n * @param {Number} w W component\n * @returns {quat} a new quaternion\n * @function\n */\nquat.new = function (x, y, z, w) {\n  return new _quat(x, y, z, w);\n};\n\n/**\n * Creates a new quat initialized with values from an existing quaternion\n *\n * @param {quat} a quaternion to clone\n * @returns {quat} a new quaternion\n * @function\n */\nquat.clone = function (a) {\n  return new _quat(a.x, a.y, a.z, a.w);\n};\n\n/**\n * Copy the values from one quat to another\n *\n * @param {quat} out the receiving quaternion\n * @param {quat} a the source quaternion\n * @returns {quat} out\n * @function\n */\nquat.copy = vec4.copy;\n\n/**\n * Set the components of a quat to the given values\n *\n * @param {quat} out the receiving quaternion\n * @param {Number} x X component\n * @param {Number} y Y component\n * @param {Number} z Z component\n * @param {Number} w W component\n * @returns {quat} out\n * @function\n */\nquat.set = vec4.set;\n\n/**\n * Set a quat to the identity quaternion\n *\n * @param {quat} out the receiving quaternion\n * @returns {quat} out\n */\nquat.identity = function (out) {\n  out.x = 0;\n  out.y = 0;\n  out.z = 0;\n  out.w = 1;\n  return out;\n};\n\n/**\n * Sets a quaternion to represent the shortest rotation from one\n * vector to another.\n *\n * Both vectors are assumed to be unit length.\n *\n * @param {quat} out the receiving quaternion.\n * @param {vec3} a the initial vector\n * @param {vec3} b the destination vector\n * @returns {quat} out\n */\nquat.rotationTo = (function () {\n  let tmpvec3 = vec3.create();\n  let xUnitVec3 = vec3.new(1, 0, 0);\n  let yUnitVec3 = vec3.new(0, 1, 0);\n\n  return function (out, a, b) {\n    let dot = vec3.dot(a, b);\n    if (dot < -0.999999) {\n      vec3.cross(tmpvec3, xUnitVec3, a);\n      if (vec3.length(tmpvec3) < 0.000001) {\n        vec3.cross(tmpvec3, yUnitVec3, a);\n      }\n      vec3.normalize(tmpvec3, tmpvec3);\n      quat.fromAxisAngle(out, tmpvec3, Math.PI);\n      return out;\n    } else if (dot > 0.999999) {\n      out.x = 0;\n      out.y = 0;\n      out.z = 0;\n      out.w = 1;\n      return out;\n    } else {\n      vec3.cross(tmpvec3, a, b);\n      out.x = tmpvec3.x;\n      out.y = tmpvec3.y;\n      out.z = tmpvec3.z;\n      out.w = 1 + dot;\n      return quat.normalize(out, out);\n    }\n  };\n})();\n\n/**\n * Gets the rotation axis and angle for a given\n *  quaternion. If a quaternion is created with\n *  fromAxisAngle, this method will return the same\n *  values as providied in the original parameter list\n *  OR functionally equivalent values.\n * Example: The quaternion formed by axis [0, 0, 1] and\n *  angle -90 is the same as the quaternion formed by\n *  [0, 0, 1] and 270. This method favors the latter.\n * @param  {vec3} out_axis  Vector receiving the axis of rotation\n * @param  {quat} q     Quaternion to be decomposed\n * @return {Number}     Angle, in radians, of the rotation\n */\nquat.getAxisAngle = function (out_axis, q) {\n  let rad = Math.acos(q.w) * 2.0;\n  let s = Math.sin(rad / 2.0);\n  if (s != 0.0) {\n    out_axis.x = q.x / s;\n    out_axis.y = q.y / s;\n    out_axis.z = q.z / s;\n  } else {\n    // If s is zero, return any axis (no rotation - axis does not matter)\n    out_axis.x = 1;\n    out_axis.y = 0;\n    out_axis.z = 0;\n  }\n  return rad;\n};\n\n/**\n * Multiplies two quat's\n *\n * @param {quat} out the receiving quaternion\n * @param {quat} a the first operand\n * @param {quat} b the second operand\n * @returns {quat} out\n */\nquat.multiply = function (out, a, b) {\n  let ax = a.x, ay = a.y, az = a.z, aw = a.w,\n      bx = b.x, by = b.y, bz = b.z, bw = b.w;\n\n  out.x = ax * bw + aw * bx + ay * bz - az * by;\n  out.y = ay * bw + aw * by + az * bx - ax * bz;\n  out.z = az * bw + aw * bz + ax * by - ay * bx;\n  out.w = aw * bw - ax * bx - ay * by - az * bz;\n  return out;\n};\n\n/**\n * Alias for {@link quat.multiply}\n * @function\n */\nquat.mul = quat.multiply;\n\n/**\n * Scales a quat by a scalar number\n *\n * @param {quat} out the receiving vector\n * @param {quat} a the vector to scale\n * @param {Number} b amount to scale the vector by\n * @returns {quat} out\n * @function\n */\nquat.scale = vec4.scale;\n\n/**\n * Rotates a quaternion by the given angle about the X axis\n *\n * @param {quat} out quat receiving operation result\n * @param {quat} a quat to rotate\n * @param {number} rad angle (in radians) to rotate\n * @returns {quat} out\n */\nquat.rotateX = function (out, a, rad) {\n  rad *= 0.5;\n\n  let ax = a.x, ay = a.y, az = a.z, aw = a.w,\n      bx = Math.sin(rad), bw = Math.cos(rad);\n\n  out.x = ax * bw + aw * bx;\n  out.y = ay * bw + az * bx;\n  out.z = az * bw - ay * bx;\n  out.w = aw * bw - ax * bx;\n  return out;\n};\n\n/**\n * Rotates a quaternion by the given angle about the Y axis\n *\n * @param {quat} out quat receiving operation result\n * @param {quat} a quat to rotate\n * @param {number} rad angle (in radians) to rotate\n * @returns {quat} out\n */\nquat.rotateY = function (out, a, rad) {\n  rad *= 0.5;\n\n  let ax = a.x, ay = a.y, az = a.z, aw = a.w,\n      by = Math.sin(rad), bw = Math.cos(rad);\n\n  out.x = ax * bw - az * by;\n  out.y = ay * bw + aw * by;\n  out.z = az * bw + ax * by;\n  out.w = aw * bw - ay * by;\n  return out;\n};\n\n/**\n * Rotates a quaternion by the given angle about the Z axis\n *\n * @param {quat} out quat receiving operation result\n * @param {quat} a quat to rotate\n * @param {number} rad angle (in radians) to rotate\n * @returns {quat} out\n */\nquat.rotateZ = function (out, a, rad) {\n  rad *= 0.5;\n\n  let ax = a.x, ay = a.y, az = a.z, aw = a.w,\n      bz = Math.sin(rad), bw = Math.cos(rad);\n\n  out.x = ax * bw + ay * bz;\n  out.y = ay * bw - ax * bz;\n  out.z = az * bw + aw * bz;\n  out.w = aw * bw - az * bz;\n  return out;\n};\n\n/**\n * Rotates a quaternion by the given angle about the axis in world space\n *\n * @param {quat} out quat receiving operation result\n * @param {quat} rot quat to rotate\n * @param {vec3} axis the axis around which to rotate in world space\n * @param {number} rad angle (in radians) to rotate\n * @returns {quat} out\n */\nquat.rotateAround = (function () {\n  let v3_tmp = vec3.create();\n  let q_tmp = quat.create();\n\n  return function (out, rot, axis, rad) {\n    // get inv-axis (local to rot)\n    quat.invert(q_tmp, rot);\n    vec3.transformQuat(v3_tmp, axis, q_tmp);\n    // rotate by inv-axis\n    quat.fromAxisAngle(q_tmp, v3_tmp, rad);\n    quat.mul(out, rot, q_tmp);\n\n    return out;\n  };\n})();\n\n/**\n * Rotates a quaternion by the given angle about the axis in local space\n *\n * @param {quat} out quat receiving operation result\n * @param {quat} rot quat to rotate\n * @param {vec3} axis the axis around which to rotate in local space\n * @param {number} rad angle (in radians) to rotate\n * @returns {quat} out\n */\nquat.rotateAroundLocal = (function () {\n  let q_tmp = quat.create();\n\n  return function (out, rot, axis, rad) {\n    quat.fromAxisAngle(q_tmp, axis, rad);\n    quat.mul(out, rot, q_tmp);\n\n    return out;\n  };\n})();\n\n/**\n * Calculates the W component of a quat from the X, Y, and Z components.\n * Assumes that quaternion is 1 unit in length.\n * Any existing W component will be ignored.\n *\n * @param {quat} out the receiving quaternion\n * @param {quat} a quat to calculate W component of\n * @returns {quat} out\n */\nquat.calculateW = function (out, a) {\n  let x = a.x, y = a.y, z = a.z;\n\n  out.x = x;\n  out.y = y;\n  out.z = z;\n  out.w = Math.sqrt(Math.abs(1.0 - x * x - y * y - z * z));\n  return out;\n};\n\n/**\n * Calculates the dot product of two quat's\n *\n * @param {quat} a the first operand\n * @param {quat} b the second operand\n * @returns {Number} dot product of a and b\n * @function\n */\nquat.dot = vec4.dot;\n\n/**\n * Performs a linear interpolation between two quat's\n *\n * @param {quat} out the receiving quaternion\n * @param {quat} a the first operand\n * @param {quat} b the second operand\n * @param {Number} t interpolation amount between the two inputs\n * @returns {quat} out\n * @function\n */\nquat.lerp = vec4.lerp;\n\n/**\n * Performs a spherical linear interpolation between two quat\n *\n * @param {quat} out the receiving quaternion\n * @param {quat} a the first operand\n * @param {quat} b the second operand\n * @param {Number} t interpolation amount between the two inputs\n * @returns {quat} out\n */\nquat.slerp = function (out, a, b, t) {\n  // benchmarks:\n  //    http://jsperf.com/quaternion-slerp-implementations\n\n  let ax = a.x, ay = a.y, az = a.z, aw = a.w,\n      bx = b.x, by = b.y, bz = b.z, bw = b.w;\n\n  let omega, cosom, sinom, scale0, scale1;\n\n  // calc cosine\n  cosom = ax * bx + ay * by + az * bz + aw * bw;\n  // adjust signs (if necessary)\n  if (cosom < 0.0) {\n    cosom = -cosom;\n    bx = - bx;\n    by = - by;\n    bz = - bz;\n    bw = - bw;\n  }\n  // calculate coefficients\n  if ((1.0 - cosom) > 0.000001) {\n    // standard case (slerp)\n    omega = Math.acos(cosom);\n    sinom = Math.sin(omega);\n    scale0 = Math.sin((1.0 - t) * omega) / sinom;\n    scale1 = Math.sin(t * omega) / sinom;\n  } else {\n    // \"from\" and \"to\" quaternions are very close\n    //  ... so we can do a linear interpolation\n    scale0 = 1.0 - t;\n    scale1 = t;\n  }\n  // calculate final values\n  out.x = scale0 * ax + scale1 * bx;\n  out.y = scale0 * ay + scale1 * by;\n  out.z = scale0 * az + scale1 * bz;\n  out.w = scale0 * aw + scale1 * bw;\n\n  return out;\n};\n\n/**\n * Performs a spherical linear interpolation with two control points\n *\n * @param {quat} out the receiving quaternion\n * @param {quat} a the first operand\n * @param {quat} b the second operand\n * @param {quat} c the third operand\n * @param {quat} d the fourth operand\n * @param {Number} t interpolation amount\n * @returns {quat} out\n */\nquat.sqlerp = (function () {\n  let temp1 = quat.create();\n  let temp2 = quat.create();\n\n  return function (out, a, b, c, d, t) {\n    quat.slerp(temp1, a, d, t);\n    quat.slerp(temp2, b, c, t);\n    quat.slerp(out, temp1, temp2, 2 * t * (1 - t));\n\n    return out;\n  };\n}());\n\n/**\n * Calculates the inverse of a quat\n *\n * @param {quat} out the receiving quaternion\n * @param {quat} a quat to calculate inverse of\n * @returns {quat} out\n */\nquat.invert = function (out, a) {\n  let a0 = a.x, a1 = a.y, a2 = a.z, a3 = a.w;\n  let dot = a0 * a0 + a1 * a1 + a2 * a2 + a3 * a3;\n  let invDot = dot ? 1.0 / dot : 0;\n\n  // TODO: Would be faster to return [0,0,0,0] immediately if dot == 0\n\n  out.x = -a0 * invDot;\n  out.y = -a1 * invDot;\n  out.z = -a2 * invDot;\n  out.w = a3 * invDot;\n  return out;\n};\n\n/**\n * Calculates the conjugate of a quat\n * If the quaternion is normalized, this function is faster than quat.inverse and produces the same result.\n *\n * @param {quat} out the receiving quaternion\n * @param {quat} a quat to calculate conjugate of\n * @returns {quat} out\n */\nquat.conjugate = function (out, a) {\n  out.x = -a.x;\n  out.y = -a.y;\n  out.z = -a.z;\n  out.w = a.w;\n  return out;\n};\n\n/**\n * Calculates the length of a quat\n *\n * @param {quat} a vector to calculate length of\n * @returns {Number} length of a\n * @function\n */\nquat.length = vec4.length;\n\n/**\n * Alias for {@link quat.length}\n * @function\n */\nquat.len = quat.length;\n\n/**\n * Calculates the squared length of a quat\n *\n * @param {quat} a vector to calculate squared length of\n * @returns {Number} squared length of a\n * @function\n */\nquat.squaredLength = vec4.squaredLength;\n\n/**\n * Alias for {@link quat.squaredLength}\n * @function\n */\nquat.sqrLen = quat.squaredLength;\n\n/**\n * Normalize a quat\n *\n * @param {quat} out the receiving quaternion\n * @param {quat} a quaternion to normalize\n * @returns {quat} out\n * @function\n */\nquat.normalize = vec4.normalize;\n\n/**\n * Sets the specified quaternion with values corresponding to the given\n * axes. Each axis is a vec3 and is expected to be unit length and\n * perpendicular to all other specified axes.\n *\n * @param {vec3} xAxis the vector representing the local \"right\" direction\n * @param {vec3} yAxis the vector representing the local \"up\" direction\n * @param {vec3} zAxis the vector representing the viewing direction\n * @returns {quat} out\n */\nquat.fromAxes = (function () {\n  let matr = mat3.create();\n\n  return function (out, xAxis, yAxis, zAxis) {\n    mat3.set(\n      matr,\n      xAxis.x, xAxis.y, xAxis.z,\n      yAxis.x, yAxis.y, yAxis.z,\n      zAxis.x, zAxis.y, zAxis.z\n    );\n    return quat.normalize(out, quat.fromMat3(out, matr));\n  };\n})();\n\n/**\n* Calculates a quaternion from view direction and up direction\n*\n* @param {quat} out mat3 receiving operation result\n* @param {vec3} view view direction (must be normalized)\n* @param {vec3} [up] up direction, default is (0,1,0) (must be normalized)\n*\n* @returns {quat} out\n*/\nquat.fromViewUp = (function () {\n  let matr = mat3.create();\n\n  return function (out, view, up) {\n    mat3.fromViewUp(matr, view, up);\n    if (!matr) {\n      return null;\n    }\n\n    return quat.normalize(out, quat.fromMat3(out, matr));\n  };\n})();\n\n/**\n * Sets a quat from the given angle and rotation axis,\n * then returns it.\n *\n * @param {quat} out the receiving quaternion\n * @param {vec3} axis the axis around which to rotate\n * @param {Number} rad the angle in radians\n * @returns {quat} out\n **/\nquat.fromAxisAngle = function (out, axis, rad) {\n  rad = rad * 0.5;\n  let s = Math.sin(rad);\n  out.x = s * axis.x;\n  out.y = s * axis.y;\n  out.z = s * axis.z;\n  out.w = Math.cos(rad);\n  return out;\n};\n\n/**\n * Creates a quaternion from the given 3x3 rotation matrix.\n *\n * NOTE: The resultant quaternion is not normalized, so you should be sure\n * to renormalize the quaternion yourself where necessary.\n *\n * @param {quat} out the receiving quaternion\n * @param {mat3} m rotation matrix\n * @returns {quat} out\n * @function\n */\nquat.fromMat3 = function (out, m) {\n  // http://www.euclideanspace.com/maths/geometry/rotations/conversions/matrixToQuaternion/index.htm\n\n  let m00 = m.m00, m01 = m.m03, m02 = m.m06,\n      m10 = m.m01, m11 = m.m04, m12 = m.m07,\n      m20 = m.m02, m21 = m.m05, m22 = m.m08;\n\n  let trace = m00 + m11 + m22;\n\n  if (trace > 0) {\n    let s = 0.5 / Math.sqrt(trace + 1.0);\n\n    out.w = 0.25 / s;\n    out.x = (m21 - m12) * s;\n    out.y = (m02 - m20) * s;\n    out.z = (m10 - m01) * s;\n\n  } else if ((m00 > m11) && (m00 > m22)) {\n    let s = 2.0 * Math.sqrt(1.0 + m00 - m11 - m22);\n\n    out.w = (m21 - m12) / s;\n    out.x = 0.25 * s;\n    out.y = (m01 + m10) / s;\n    out.z = (m02 + m20) / s;\n\n  } else if (m11 > m22) {\n    let s = 2.0 * Math.sqrt(1.0 + m11 - m00 - m22);\n\n    out.w = (m02 - m20) / s;\n    out.x = (m01 + m10) / s;\n    out.y = 0.25 * s;\n    out.z = (m12 + m21) / s;\n\n  } else {\n    let s = 2.0 * Math.sqrt(1.0 + m22 - m00 - m11);\n\n    out.w = (m10 - m01) / s;\n    out.x = (m02 + m20) / s;\n    out.y = (m12 + m21) / s;\n    out.z = 0.25 * s;\n  }\n\n  return out;\n};\n\n/**\n * Creates a quaternion from the given euler angle x, y, z.\n *\n * @param {quat} out the receiving quaternion\n * @param {x} Angle to rotate around X axis in degrees.\n * @param {y} Angle to rotate around Y axis in degrees.\n * @param {z} Angle to rotate around Z axis in degrees.\n * @returns {quat} out\n * @function\n */\nquat.fromEuler = function (out, x, y, z) {\n  let halfToRad = 0.5 * Math.PI / 180.0;\n  x *= halfToRad;\n  y *= halfToRad;\n  z *= halfToRad;\n\n  let sx = Math.sin(x);\n  let cx = Math.cos(x);\n  let sy = Math.sin(y);\n  let cy = Math.cos(y);\n  let sz = Math.sin(z);\n  let cz = Math.cos(z);\n\n  out.x = sx * cy * cz - cx * sy * sz;\n  out.y = cx * sy * cz + sx * cy * sz;\n  out.z = cx * cy * sz - sx * sy * cz;\n  out.w = cx * cy * cz + sx * sy * sz;\n\n  return out;\n};\n\n/**\n * Returns a string representation of a quatenion\n *\n * @param {quat} a vector to represent as a string\n * @returns {String} string representation of the vector\n */\nquat.str = function (a) {\n  return `quat(${a.x}, ${a.y}, ${a.z}, ${a.w})`;\n};\n\n/**\n * Returns typed array\n *\n * @param {array} out\n * @param {quat} q\n * @returns {array}\n */\nquat.array = function (out, q) {\n  out[0] = q.x;\n  out[1] = q.y;\n  out[2] = q.z;\n  out[3] = q.w;\n\n  return out;\n};\n\n/**\n * Returns whether or not the quaternions have exactly the same elements in the same position (when compared with ===)\n *\n * @param {quat} a The first quaternion.\n * @param {quat} b The second quaternion.\n * @returns {Boolean} True if the vectors are equal, false otherwise.\n */\nquat.exactEquals = vec4.exactEquals;\n\n/**\n * Returns whether or not the quaternions have approximately the same elements in the same position.\n *\n * @param {quat} a The first vector.\n * @param {quat} b The second vector.\n * @returns {Boolean} True if the vectors are equal, false otherwise.\n */\nquat.equals = vec4.equals;\n\nexport default quat;","import { EPSILON } from './utils';\n\nlet _tmp = new Array(4);\n\nclass _mat2 {\n  constructor(m00, m01, m02, m03) {\n    this.m00 = m00;\n    this.m01 = m01;\n    this.m02 = m02;\n    this.m03 = m03;\n  }\n\n  toJSON() {\n    _tmp[0] = this.m00;\n    _tmp[1] = this.m01;\n    _tmp[2] = this.m02;\n    _tmp[3] = this.m03;\n\n    return _tmp;\n  }\n}\n\n/**\n * @class 2x2 Matrix\n * @name mat2\n */\nlet mat2 = {};\n\n/**\n * Creates a new identity mat2\n *\n * @returns {mat2} a new 2x2 matrix\n */\nmat2.create = function() {\n  return new _mat2(1, 0, 0, 1);\n};\n\n/**\n * Create a new mat2 with the given values\n *\n * @param {Number} m00 Component in column 0, row 0 position (index 0)\n * @param {Number} m01 Component in column 0, row 1 position (index 1)\n * @param {Number} m10 Component in column 1, row 0 position (index 2)\n * @param {Number} m11 Component in column 1, row 1 position (index 3)\n * @returns {mat2} out A new 2x2 matrix\n */\nmat2.new = function (m00, m01, m10, m11) {\n  return new _mat2(m00, m01, m10, m11);\n};\n\n/**\n * Creates a new mat2 initialized with values from an existing matrix\n *\n * @param {mat2} a matrix to clone\n * @returns {mat2} a new 2x2 matrix\n */\nmat2.clone = function (a) {\n  return new _mat2(a.m00, a.m01, a.m02, a.m03);\n};\n\n/**\n * Copy the values from one mat2 to another\n *\n * @param {mat2} out the receiving matrix\n * @param {mat2} a the source matrix\n * @returns {mat2} out\n */\nmat2.copy = function (out, a) {\n  out.m00 = a.m00;\n  out.m01 = a.m01;\n  out.m02 = a.m02;\n  out.m03 = a.m03;\n  return out;\n};\n\n/**\n * Set a mat2 to the identity matrix\n *\n * @param {mat2} out the receiving matrix\n * @returns {mat2} out\n */\nmat2.identity = function (out) {\n  out.m00 = 1;\n  out.m01 = 0;\n  out.m02 = 0;\n  out.m03 = 1;\n  return out;\n};\n\n/**\n * Set the components of a mat2 to the given values\n *\n * @param {mat2} out the receiving matrix\n * @param {Number} m00 Component in column 0, row 0 position (index 0)\n * @param {Number} m01 Component in column 0, row 1 position (index 1)\n * @param {Number} m10 Component in column 1, row 0 position (index 2)\n * @param {Number} m11 Component in column 1, row 1 position (index 3)\n * @returns {mat2} out\n */\nmat2.set = function (out, m00, m01, m10, m11) {\n  out.m00 = m00;\n  out.m01 = m01;\n  out.m02 = m10;\n  out.m03 = m11;\n  return out;\n};\n\n\n/**\n * Transpose the values of a mat2\n *\n * @param {mat2} out the receiving matrix\n * @param {mat2} a the source matrix\n * @returns {mat2} out\n */\nmat2.transpose = function (out, a) {\n  // If we are transposing ourselves we can skip a few steps but have to cache some values\n  if (out === a) {\n    let a1 = a.m01;\n    out.m01 = a.m02;\n    out.m02 = a1;\n  } else {\n    out.m00 = a.m00;\n    out.m01 = a.m02;\n    out.m02 = a.m01;\n    out.m03 = a.m03;\n  }\n\n  return out;\n};\n\n/**\n * Inverts a mat2\n *\n * @param {mat2} out the receiving matrix\n * @param {mat2} a the source matrix\n * @returns {mat2} out\n */\nmat2.invert = function (out, a) {\n  let a0 = a.m00, a1 = a.m01, a2 = a.m02, a3 = a.m03;\n\n  // Calculate the determinant\n  let det = a0 * a3 - a2 * a1;\n\n  if (!det) {\n    return null;\n  }\n  det = 1.0 / det;\n\n  out.m00 = a3 * det;\n  out.m01 = -a1 * det;\n  out.m02 = -a2 * det;\n  out.m03 = a0 * det;\n\n  return out;\n};\n\n/**\n * Calculates the adjugate of a mat2\n *\n * @param {mat2} out the receiving matrix\n * @param {mat2} a the source matrix\n * @returns {mat2} out\n */\nmat2.adjoint = function (out, a) {\n  // Caching this value is nessecary if out == a\n  let a0 = a.m00;\n  out.m00 = a.m03;\n  out.m01 = -a.m01;\n  out.m02 = -a.m02;\n  out.m03 = a0;\n\n  return out;\n};\n\n/**\n * Calculates the determinant of a mat2\n *\n * @param {mat2} a the source matrix\n * @returns {Number} determinant of a\n */\nmat2.determinant = function (a) {\n  return a.m00 * a.m03 - a.m02 * a.m01;\n};\n\n/**\n * Multiplies two mat2's\n *\n * @param {mat2} out the receiving matrix\n * @param {mat2} a the first operand\n * @param {mat2} b the second operand\n * @returns {mat2} out\n */\nmat2.multiply = function (out, a, b) {\n  let a0 = a.m00, a1 = a.m01, a2 = a.m02, a3 = a.m03;\n  let b0 = b.m00, b1 = b.m01, b2 = b.m02, b3 = b.m03;\n  out.m00 = a0 * b0 + a2 * b1;\n  out.m01 = a1 * b0 + a3 * b1;\n  out.m02 = a0 * b2 + a2 * b3;\n  out.m03 = a1 * b2 + a3 * b3;\n  return out;\n};\n\n/**\n * Alias for {@link mat2.multiply}\n * @function\n */\nmat2.mul = mat2.multiply;\n\n/**\n * Rotates a mat2 by the given angle\n *\n * @param {mat2} out the receiving matrix\n * @param {mat2} a the matrix to rotate\n * @param {Number} rad the angle to rotate the matrix by\n * @returns {mat2} out\n */\nmat2.rotate = function (out, a, rad) {\n  let a0 = a.m00, a1 = a.m01, a2 = a.m02, a3 = a.m03,\n      s = Math.sin(rad),\n      c = Math.cos(rad);\n  out.m00 = a0 * c + a2 * s;\n  out.m01 = a1 * c + a3 * s;\n  out.m02 = a0 * -s + a2 * c;\n  out.m03 = a1 * -s + a3 * c;\n  return out;\n};\n\n/**\n * Scales the mat2 by the dimensions in the given vec2\n *\n * @param {mat2} out the receiving matrix\n * @param {mat2} a the matrix to rotate\n * @param {vec2} v the vec2 to scale the matrix by\n * @returns {mat2} out\n **/\nmat2.scale = function (out, a, v) {\n  let a0 = a.m00, a1 = a.m01, a2 = a.m02, a3 = a.m03,\n      v0 = v.x, v1 = v.y;\n  out.m00 = a0 * v0;\n  out.m01 = a1 * v0;\n  out.m02 = a2 * v1;\n  out.m03 = a3 * v1;\n  return out;\n};\n\n/**\n * Creates a matrix from a given angle\n * This is equivalent to (but much faster than):\n *\n *     mat2.identity(dest);\n *     mat2.rotate(dest, dest, rad);\n *\n * @param {mat2} out mat2 receiving operation result\n * @param {Number} rad the angle to rotate the matrix by\n * @returns {mat2} out\n */\nmat2.fromRotation = function (out, rad) {\n  let s = Math.sin(rad),\n      c = Math.cos(rad);\n  out.m00 = c;\n  out.m01 = s;\n  out.m02 = -s;\n  out.m03 = c;\n  return out;\n};\n\n/**\n * Creates a matrix from a vector scaling\n * This is equivalent to (but much faster than):\n *\n *     mat2.identity(dest);\n *     mat2.scale(dest, dest, vec);\n *\n * @param {mat2} out mat2 receiving operation result\n * @param {vec2} v Scaling vector\n * @returns {mat2} out\n */\nmat2.fromScaling = function (out, v) {\n  out.m00 = v.x;\n  out.m01 = 0;\n  out.m02 = 0;\n  out.m03 = v.y;\n  return out;\n};\n\n/**\n * Returns a string representation of a mat2\n *\n * @param {mat2} a matrix to represent as a string\n * @returns {String} string representation of the matrix\n */\nmat2.str = function (a) {\n  return `mat2(${a.m00}, ${a.m01}, ${a.m02}, ${a.m03})`;\n};\n\n/**\n * Returns typed array\n *\n * @param {array} out\n * @param {mat2} m\n * @returns {array}\n */\nmat2.array = function (out, m) {\n  out[0] = m.m00;\n  out[1] = m.m01;\n  out[2] = m.m02;\n  out[3] = m.m03;\n\n  return out;\n};\n\n/**\n * Returns Frobenius norm of a mat2\n *\n * @param {mat2} a the matrix to calculate Frobenius norm of\n * @returns {Number} Frobenius norm\n */\nmat2.frob = function (a) {\n  return (Math.sqrt(Math.pow(a.m00, 2) + Math.pow(a.m01, 2) + Math.pow(a.m02, 2) + Math.pow(a.m03, 2)));\n};\n\n/**\n * Returns L, D and U matrices (Lower triangular, Diagonal and Upper triangular) by factorizing the input matrix\n * @param {mat2} L the lower triangular matrix\n * @param {mat2} D the diagonal matrix\n * @param {mat2} U the upper triangular matrix\n * @param {mat2} a the input matrix to factorize\n */\n\nmat2.LDU = function (L, D, U, a) {\n  L.m02 = a.m02 / a.m00;\n  U.m00 = a.m00;\n  U.m01 = a.m01;\n  U.m03 = a.m03 - L.m02 * U.m01;\n};\n\n/**\n * Adds two mat2's\n *\n * @param {mat2} out the receiving matrix\n * @param {mat2} a the first operand\n * @param {mat2} b the second operand\n * @returns {mat2} out\n */\nmat2.add = function (out, a, b) {\n  out.m00 = a.m00 + b.m00;\n  out.m01 = a.m01 + b.m01;\n  out.m02 = a.m02 + b.m02;\n  out.m03 = a.m03 + b.m03;\n  return out;\n};\n\n/**\n * Subtracts matrix b from matrix a\n *\n * @param {mat2} out the receiving matrix\n * @param {mat2} a the first operand\n * @param {mat2} b the second operand\n * @returns {mat2} out\n */\nmat2.subtract = function (out, a, b) {\n  out.m00 = a.m00 - b.m00;\n  out.m01 = a.m01 - b.m01;\n  out.m02 = a.m02 - b.m02;\n  out.m03 = a.m03 - b.m03;\n  return out;\n};\n\n/**\n * Alias for {@link mat2.subtract}\n * @function\n */\nmat2.sub = mat2.subtract;\n\n/**\n * Returns whether or not the matrices have exactly the same elements in the same position (when compared with ===)\n *\n * @param {mat2} a The first matrix.\n * @param {mat2} b The second matrix.\n * @returns {Boolean} True if the matrices are equal, false otherwise.\n */\nmat2.exactEquals = function (a, b) {\n  return a.m00 === b.m00 && a.m01 === b.m01 && a.m02 === b.m02 && a.m03 === b.m03;\n};\n\n/**\n * Returns whether or not the matrices have approximately the same elements in the same position.\n *\n * @param {mat2} a The first matrix.\n * @param {mat2} b The second matrix.\n * @returns {Boolean} True if the matrices are equal, false otherwise.\n */\nmat2.equals = function (a, b) {\n  let a0 = a.m00, a1 = a.m01, a2 = a.m02, a3 = a.m03;\n  let b0 = b.m00, b1 = b.m01, b2 = b.m02, b3 = b.m03;\n  return (\n    Math.abs(a0 - b0) <= EPSILON * Math.max(1.0, Math.abs(a0), Math.abs(b0)) &&\n    Math.abs(a1 - b1) <= EPSILON * Math.max(1.0, Math.abs(a1), Math.abs(b1)) &&\n    Math.abs(a2 - b2) <= EPSILON * Math.max(1.0, Math.abs(a2), Math.abs(b2)) &&\n    Math.abs(a3 - b3) <= EPSILON * Math.max(1.0, Math.abs(a3), Math.abs(b3))\n  );\n};\n\n/**\n * Multiply each element of the matrix by a scalar.\n *\n * @param {mat2} out the receiving matrix\n * @param {mat2} a the matrix to scale\n * @param {Number} b amount to scale the matrix's elements by\n * @returns {mat2} out\n */\nmat2.multiplyScalar = function (out, a, b) {\n  out.m00 = a.m00 * b;\n  out.m01 = a.m01 * b;\n  out.m02 = a.m02 * b;\n  out.m03 = a.m03 * b;\n  return out;\n};\n\n/**\n * Adds two mat2's after multiplying each element of the second operand by a scalar value.\n *\n * @param {mat2} out the receiving vector\n * @param {mat2} a the first operand\n * @param {mat2} b the second operand\n * @param {Number} scale the amount to scale b's elements by before adding\n * @returns {mat2} out\n */\nmat2.multiplyScalarAndAdd = function (out, a, b, scale) {\n  out.m00 = a.m00 + (b.m00 * scale);\n  out.m01 = a.m01 + (b.m01 * scale);\n  out.m02 = a.m02 + (b.m02 * scale);\n  out.m03 = a.m03 + (b.m03 * scale);\n  return out;\n};\n\nexport default mat2;","import { EPSILON } from './utils';\n\nlet _tmp = new Array(6);\n\nclass _mat23 {\n  constructor(m00, m01, m02, m03, m04, m05) {\n    this.m00 = m00;\n    this.m01 = m01;\n    this.m02 = m02;\n    this.m03 = m03;\n    this.m04 = m04;\n    this.m05 = m05;\n  }\n\n  toJSON() {\n    _tmp[0] = this.m00;\n    _tmp[1] = this.m01;\n    _tmp[2] = this.m02;\n    _tmp[3] = this.m03;\n    _tmp[4] = this.m04;\n    _tmp[5] = this.m05;\n\n    return _tmp;\n  }\n}\n\n/**\n * @class 2x3 Matrix\n * @name mat23\n *\n * @description\n * A mat23 contains six elements defined as:\n * <pre>\n * [a, c, tx,\n *  b, d, ty]\n * </pre>\n * This is a short form for the 3x3 matrix:\n * <pre>\n * [a, c, tx,\n *  b, d, ty,\n *  0, 0, 1]\n * </pre>\n * The last row is ignored so the array is shorter and operations are faster.\n */\nlet mat23 = {};\n\n/**\n * Creates a new identity mat23\n *\n * @returns {mat23} a new 2x3 matrix\n */\nmat23.create = function () {\n  return new _mat23(\n    1, 0,\n    0, 1,\n    0, 0\n  );\n};\n\n/**\n * Create a new mat23 with the given values\n *\n * @param {Number} a Component A (index 0)\n * @param {Number} b Component B (index 1)\n * @param {Number} c Component C (index 2)\n * @param {Number} d Component D (index 3)\n * @param {Number} tx Component TX (index 4)\n * @param {Number} ty Component TY (index 5)\n * @returns {mat23} A new mat23\n */\nmat23.new = function (a, b, c, d, tx, ty) {\n  return new _mat23(\n    a, b,\n    c, d,\n    tx, ty\n  );\n};\n\n/**\n * Creates a new mat23 initialized with values from an existing matrix\n *\n * @param {mat23} a matrix to clone\n * @returns {mat23} a new 2x3 matrix\n */\nmat23.clone = function (a) {\n  return new _mat23(\n    a.m00, a.m01,\n    a.m02, a.m03,\n    a.m04, a.m05\n  );\n};\n\n/**\n * Copy the values from one mat23 to another\n *\n * @param {mat23} out the receiving matrix\n * @param {mat23} a the source matrix\n * @returns {mat23} out\n */\nmat23.copy = function (out, a) {\n  out.m00 = a.m00;\n  out.m01 = a.m01;\n  out.m02 = a.m02;\n  out.m03 = a.m03;\n  out.m04 = a.m04;\n  out.m05 = a.m05;\n  return out;\n};\n\n/**\n * Set a mat23 to the identity matrix\n *\n * @param {mat23} out the receiving matrix\n * @returns {mat23} out\n */\nmat23.identity = function (out) {\n  out.m00 = 1;\n  out.m01 = 0;\n  out.m02 = 0;\n  out.m03 = 1;\n  out.m04 = 0;\n  out.m05 = 0;\n  return out;\n};\n\n/**\n * Set the components of a mat23 to the given values\n *\n * @param {mat23} out the receiving matrix\n * @param {Number} a Component A (index 0)\n * @param {Number} b Component B (index 1)\n * @param {Number} c Component C (index 2)\n * @param {Number} d Component D (index 3)\n * @param {Number} tx Component TX (index 4)\n * @param {Number} ty Component TY (index 5)\n * @returns {mat23} out\n */\nmat23.set = function (out, a, b, c, d, tx, ty) {\n  out.m00 = a;\n  out.m01 = b;\n  out.m02 = c;\n  out.m03 = d;\n  out.m04 = tx;\n  out.m05 = ty;\n  return out;\n};\n\n/**\n * Inverts a mat23\n *\n * @param {mat23} out the receiving matrix\n * @param {mat23} a the source matrix\n * @returns {mat23} out\n */\nmat23.invert = function (out, a) {\n  let aa = a.m00, ab = a.m01, ac = a.m02, ad = a.m03,\n    atx = a.m04, aty = a.m05;\n\n  let det = aa * ad - ab * ac;\n  if (!det) {\n    return null;\n  }\n  det = 1.0 / det;\n\n  out.m00 = ad * det;\n  out.m01 = -ab * det;\n  out.m02 = -ac * det;\n  out.m03 = aa * det;\n  out.m04 = (ac * aty - ad * atx) * det;\n  out.m05 = (ab * atx - aa * aty) * det;\n  return out;\n};\n\n/**\n * Calculates the determinant of a mat23\n *\n * @param {mat23} a the source matrix\n * @returns {Number} determinant of a\n */\nmat23.determinant = function (a) {\n  return a.m00 * a.m03 - a.m01 * a.m02;\n};\n\n/**\n * Multiplies two mat23's\n *\n * @param {mat23} out the receiving matrix\n * @param {mat23} a the first operand\n * @param {mat23} b the second operand\n * @returns {mat23} out\n */\nmat23.multiply = function (out, a, b) {\n  let a0 = a.m00, a1 = a.m01, a2 = a.m02, a3 = a.m03, a4 = a.m04, a5 = a.m05,\n    b0 = b.m00, b1 = b.m01, b2 = b.m02, b3 = b.m03, b4 = b.m04, b5 = b.m05;\n  out.m00 = a0 * b0 + a2 * b1;\n  out.m01 = a1 * b0 + a3 * b1;\n  out.m02 = a0 * b2 + a2 * b3;\n  out.m03 = a1 * b2 + a3 * b3;\n  out.m04 = a0 * b4 + a2 * b5 + a4;\n  out.m05 = a1 * b4 + a3 * b5 + a5;\n  return out;\n};\n\n/**\n * Alias for {@link mat23.multiply}\n * @function\n */\nmat23.mul = mat23.multiply;\n\n/**\n * Rotates a mat23 by the given angle\n *\n * @param {mat23} out the receiving matrix\n * @param {mat23} a the matrix to rotate\n * @param {Number} rad the angle to rotate the matrix by\n * @returns {mat23} out\n */\nmat23.rotate = function (out, a, rad) {\n  let a0 = a.m00, a1 = a.m01, a2 = a.m02, a3 = a.m03, a4 = a.m04, a5 = a.m05,\n    s = Math.sin(rad),\n    c = Math.cos(rad);\n  out.m00 = a0 * c + a2 * s;\n  out.m01 = a1 * c + a3 * s;\n  out.m02 = a0 * -s + a2 * c;\n  out.m03 = a1 * -s + a3 * c;\n  out.m04 = a4;\n  out.m05 = a5;\n  return out;\n};\n\n/**\n * Scales the mat23 by the dimensions in the given vec2\n *\n * @param {mat23} out the receiving matrix\n * @param {mat23} a the matrix to translate\n * @param {vec2} v the vec2 to scale the matrix by\n * @returns {mat23} out\n **/\nmat23.scale = function (out, a, v) {\n  let a0 = a.m00, a1 = a.m01, a2 = a.m02, a3 = a.m03, a4 = a.m04, a5 = a.m05,\n    v0 = v.x, v1 = v.y;\n  out.m00 = a0 * v0;\n  out.m01 = a1 * v0;\n  out.m02 = a2 * v1;\n  out.m03 = a3 * v1;\n  out.m04 = a4;\n  out.m05 = a5;\n  return out;\n};\n\n/**\n * Translates the mat23 by the dimensions in the given vec2\n *\n * @param {mat23} out the receiving matrix\n * @param {mat23} a the matrix to translate\n * @param {vec2} v the vec2 to translate the matrix by\n * @returns {mat23} out\n **/\nmat23.translate = function (out, a, v) {\n  let a0 = a.m00, a1 = a.m01, a2 = a.m02, a3 = a.m03, a4 = a.m04, a5 = a.m05,\n    v0 = v.x, v1 = v.y;\n  out.m00 = a0;\n  out.m01 = a1;\n  out.m02 = a2;\n  out.m03 = a3;\n  out.m04 = a0 * v0 + a2 * v1 + a4;\n  out.m05 = a1 * v0 + a3 * v1 + a5;\n  return out;\n};\n\n/**\n * Creates a matrix from a given angle\n * This is equivalent to (but much faster than):\n *\n *     mat23.identity(dest);\n *     mat23.rotate(dest, dest, rad);\n *\n * @param {mat23} out mat23 receiving operation result\n * @param {Number} rad the angle to rotate the matrix by\n * @returns {mat23} out\n */\nmat23.fromRotation = function (out, rad) {\n  let s = Math.sin(rad), c = Math.cos(rad);\n  out.m00 = c;\n  out.m01 = s;\n  out.m02 = -s;\n  out.m03 = c;\n  out.m04 = 0;\n  out.m05 = 0;\n  return out;\n};\n\n/**\n * Creates a matrix from a vector scaling\n * This is equivalent to (but much faster than):\n *\n *     mat23.identity(dest);\n *     mat23.scale(dest, dest, vec);\n *\n * @param {mat23} out mat23 receiving operation result\n * @param {vec2} v Scaling vector\n * @returns {mat23} out\n */\nmat23.fromScaling = function (out, v) {\n  out.m00 = v.m00;\n  out.m01 = 0;\n  out.m02 = 0;\n  out.m03 = v.m01;\n  out.m04 = 0;\n  out.m05 = 0;\n  return out;\n};\n\n/**\n * Creates a matrix from a vector translation\n * This is equivalent to (but much faster than):\n *\n *     mat23.identity(dest);\n *     mat23.translate(dest, dest, vec);\n *\n * @param {mat23} out mat23 receiving operation result\n * @param {vec2} v Translation vector\n * @returns {mat23} out\n */\nmat23.fromTranslation = function (out, v) {\n  out.m00 = 1;\n  out.m01 = 0;\n  out.m02 = 0;\n  out.m03 = 1;\n  out.m04 = v.x;\n  out.m05 = v.y;\n  return out;\n};\n\n/**\n * Creates a matrix from a rotation, vector translation and vector scale\n * This is equivalent to (but faster than):\n *\n *     mat23.identity(dest);\n *     mat23.translate(dest, vec);\n *     let tmp = mat23.create();\n *     mat23.fromRotation(tmp, rot);\n *     mat23.multiply(dest, dest, tmp);\n *     mat23.fromScaling(tmp, scale);\n *     mat23.multiply(dest, dest, tmp);\n *\n * @param {mat23} out mat23 receiving operation result\n * @param {number} r Rotation radian\n * @param {vec2} v Translation vector\n * @param {vec2} s Scaling vector\n * @returns {mat23} out\n */\nmat23.fromRTS = function (out, r, t, s) {\n  let sr = Math.sin(r), cr = Math.cos(r);\n  out.m00 = cr * s.x;\n  out.m01 = sr * s.x;\n  out.m02 = -sr * s.y;\n  out.m03 = cr * s.y;\n  out.m04 = t.x;\n  out.m05 = t.y;\n  return out;\n};\n\n/**\n * Returns a string representation of a mat23\n *\n * @param {mat23} a matrix to represent as a string\n * @returns {String} string representation of the matrix\n */\nmat23.str = function (a) {\n  return `mat23(${a.m00}, ${a.m01}, ${a.m02}, ${a.m03}, ${a.m04}, ${a.m05})`;\n};\n\n/**\n * Returns typed array\n *\n * @param {array} out\n * @param {mat23} m\n * @returns {array}\n */\nmat23.array = function (out, m) {\n  out[0] = m.m00;\n  out[1] = m.m01;\n  out[2] = m.m02;\n  out[3] = m.m03;\n  out[4] = m.m04;\n  out[5] = m.m05;\n\n  return out;\n};\n\n/**\n * Returns typed array to 16 float array\n *\n * @param {array} out\n * @param {mat23} m\n * @returns {array}\n */\nmat23.array4x4 = function (out, m) {\n  out[0] = m.m00;\n  out[1] = m.m01;\n  out[2] = 0;\n  out[3] = 0;\n  out[4] = m.m02;\n  out[5] = m.m03;\n  out[6] = 0;\n  out[7] = 0;\n  out[8] = 0;\n  out[9] = 0;\n  out[10] = 1;\n  out[11] = 0;\n  out[12] = m.m04;\n  out[13] = m.m05;\n  out[14] = 0;\n  out[15] = 1;\n\n  return out;\n};\n\n/**\n * Returns Frobenius norm of a mat23\n *\n * @param {mat23} a the matrix to calculate Frobenius norm of\n * @returns {Number} Frobenius norm\n */\nmat23.frob = function (a) {\n  return (Math.sqrt(Math.pow(a.m00, 2) + Math.pow(a.m01, 2) + Math.pow(a.m02, 2) + Math.pow(a.m03, 2) + Math.pow(a.m04, 2) + Math.pow(a.m05, 2) + 1));\n};\n\n/**\n * Adds two mat23's\n *\n * @param {mat23} out the receiving matrix\n * @param {mat23} a the first operand\n * @param {mat23} b the second operand\n * @returns {mat23} out\n */\nmat23.add = function (out, a, b) {\n  out.m00 = a.m00 + b.m00;\n  out.m01 = a.m01 + b.m01;\n  out.m02 = a.m02 + b.m02;\n  out.m03 = a.m03 + b.m03;\n  out.m04 = a.m04 + b.m04;\n  out.m05 = a.m05 + b.m05;\n  return out;\n};\n\n/**\n * Subtracts matrix b from matrix a\n *\n * @param {mat23} out the receiving matrix\n * @param {mat23} a the first operand\n * @param {mat23} b the second operand\n * @returns {mat23} out\n */\nmat23.subtract = function (out, a, b) {\n  out.m00 = a.m00 - b.m00;\n  out.m01 = a.m01 - b.m01;\n  out.m02 = a.m02 - b.m02;\n  out.m03 = a.m03 - b.m03;\n  out.m04 = a.m04 - b.m04;\n  out.m05 = a.m05 - b.m05;\n  return out;\n};\n\n/**\n * Alias for {@link mat23.subtract}\n * @function\n */\nmat23.sub = mat23.subtract;\n\n/**\n * Multiply each element of the matrix by a scalar.\n *\n * @param {mat23} out the receiving matrix\n * @param {mat23} a the matrix to scale\n * @param {Number} b amount to scale the matrix's elements by\n * @returns {mat23} out\n */\nmat23.multiplyScalar = function (out, a, b) {\n  out.m00 = a.m00 * b;\n  out.m01 = a.m01 * b;\n  out.m02 = a.m02 * b;\n  out.m03 = a.m03 * b;\n  out.m04 = a.m04 * b;\n  out.m05 = a.m05 * b;\n  return out;\n};\n\n/**\n * Adds two mat23's after multiplying each element of the second operand by a scalar value.\n *\n * @param {mat23} out the receiving vector\n * @param {mat23} a the first operand\n * @param {mat23} b the second operand\n * @param {Number} scale the amount to scale b's elements by before adding\n * @returns {mat23} out\n */\nmat23.multiplyScalarAndAdd = function (out, a, b, scale) {\n  out.m00 = a.m00 + (b.m00 * scale);\n  out.m01 = a.m01 + (b.m01 * scale);\n  out.m02 = a.m02 + (b.m02 * scale);\n  out.m03 = a.m03 + (b.m03 * scale);\n  out.m04 = a.m04 + (b.m04 * scale);\n  out.m05 = a.m05 + (b.m05 * scale);\n  return out;\n};\n\n/**\n * Returns whether or not the matrices have exactly the same elements in the same position (when compared with ===)\n *\n * @param {mat23} a The first matrix.\n * @param {mat23} b The second matrix.\n * @returns {Boolean} True if the matrices are equal, false otherwise.\n */\nmat23.exactEquals = function (a, b) {\n  return a.m00 === b.m00 && a.m01 === b.m01 && a.m02 === b.m02 && a.m03 === b.m03 && a.m04 === b.m04 && a.m05 === b.m05;\n};\n\n/**\n * Returns whether or not the matrices have approximately the same elements in the same position.\n *\n * @param {mat23} a The first matrix.\n * @param {mat23} b The second matrix.\n * @returns {Boolean} True if the matrices are equal, false otherwise.\n */\nmat23.equals = function (a, b) {\n  let a0 = a.m00, a1 = a.m01, a2 = a.m02, a3 = a.m03, a4 = a.m04, a5 = a.m05;\n  let b0 = b.m00, b1 = b.m01, b2 = b.m02, b3 = b.m03, b4 = b.m04, b5 = b.m05;\n  return (\n    Math.abs(a0 - b0) <= EPSILON * Math.max(1.0, Math.abs(a0), Math.abs(b0)) &&\n    Math.abs(a1 - b1) <= EPSILON * Math.max(1.0, Math.abs(a1), Math.abs(b1)) &&\n    Math.abs(a2 - b2) <= EPSILON * Math.max(1.0, Math.abs(a2), Math.abs(b2)) &&\n    Math.abs(a3 - b3) <= EPSILON * Math.max(1.0, Math.abs(a3), Math.abs(b3)) &&\n    Math.abs(a4 - b4) <= EPSILON * Math.max(1.0, Math.abs(a4), Math.abs(b4)) &&\n    Math.abs(a5 - b5) <= EPSILON * Math.max(1.0, Math.abs(a5), Math.abs(b5))\n  );\n};\n\nexport default mat23;","import { EPSILON } from './utils';\n\nlet _tmp = new Array(16);\n\nclass _mat4 {\n  constructor(\n    m00, m01, m02, m03,\n    m04, m05, m06, m07,\n    m08, m09, m10, m11,\n    m12, m13, m14, m15\n  ) {\n    this.m00 = m00;\n    this.m01 = m01;\n    this.m02 = m02;\n    this.m03 = m03;\n    this.m04 = m04;\n    this.m05 = m05;\n    this.m06 = m06;\n    this.m07 = m07;\n    this.m08 = m08;\n    this.m09 = m09;\n    this.m10 = m10;\n    this.m11 = m11;\n    this.m12 = m12;\n    this.m13 = m13;\n    this.m14 = m14;\n    this.m15 = m15;\n  }\n\n  toJSON() {\n    _tmp[0] = this.m00;\n    _tmp[1] = this.m01;\n    _tmp[2] = this.m02;\n    _tmp[3] = this.m03;\n    _tmp[4] = this.m04;\n    _tmp[5] = this.m05;\n    _tmp[6] = this.m06;\n    _tmp[7] = this.m07;\n    _tmp[8] = this.m08;\n    _tmp[9] = this.m09;\n    _tmp[10] = this.m10;\n    _tmp[11] = this.m11;\n    _tmp[12] = this.m12;\n    _tmp[13] = this.m13;\n    _tmp[14] = this.m14;\n    _tmp[15] = this.m15;\n\n    return _tmp;\n  }\n}\n\n/**\n * @class 4x4 Matrix\n * @name mat4\n *\n * NOTE: we use column-major matrix for all matrix calculation.\n *\n * This may lead to some confusion when referencing OpenGL documentation,\n * however, which represents out all matricies in column-major format.\n * This means that while in code a matrix may be typed out as:\n *\n * [1, 0, 0, 0,\n *  0, 1, 0, 0,\n *  0, 0, 1, 0,\n *  x, y, z, 0]\n *\n * The same matrix in the [OpenGL documentation](https://www.khronos.org/registry/OpenGL-Refpages/gl2.1/xhtml/glTranslate.xml)\n * is written as:\n *\n *  1 0 0 x\n *  0 1 0 y\n *  0 0 1 z\n *  0 0 0 0\n *\n * Please rest assured, however, that they are the same thing!\n * This is not unique to glMatrix, either, as OpenGL developers have long been confused by the\n * apparent lack of consistency between the memory layout and the documentation.\n */\nlet mat4 = {};\n\n/**\n * Creates a new identity mat4\n *\n * @returns {mat4} a new 4x4 matrix\n */\nmat4.create = function () {\n  return new _mat4(\n    1, 0, 0, 0,\n    0, 1, 0, 0,\n    0, 0, 1, 0,\n    0, 0, 0, 1\n  );\n};\n\n/**\n * Create a new mat4 with the given values\n *\n * @param {Number} m00 Component in column 0, row 0 position (index 0)\n * @param {Number} m01 Component in column 0, row 1 position (index 1)\n * @param {Number} m02 Component in column 0, row 2 position (index 2)\n * @param {Number} m03 Component in column 0, row 3 position (index 3)\n * @param {Number} m10 Component in column 1, row 0 position (index 4)\n * @param {Number} m11 Component in column 1, row 1 position (index 5)\n * @param {Number} m12 Component in column 1, row 2 position (index 6)\n * @param {Number} m13 Component in column 1, row 3 position (index 7)\n * @param {Number} m20 Component in column 2, row 0 position (index 8)\n * @param {Number} m21 Component in column 2, row 1 position (index 9)\n * @param {Number} m22 Component in column 2, row 2 position (index 10)\n * @param {Number} m23 Component in column 2, row 3 position (index 11)\n * @param {Number} m30 Component in column 3, row 0 position (index 12)\n * @param {Number} m31 Component in column 3, row 1 position (index 13)\n * @param {Number} m32 Component in column 3, row 2 position (index 14)\n * @param {Number} m33 Component in column 3, row 3 position (index 15)\n * @returns {mat4} A new mat4\n */\nmat4.new = function (m00, m01, m02, m03, m10, m11, m12, m13, m20, m21, m22, m23, m30, m31, m32, m33) {\n  return new _mat4(\n    m00, m01, m02, m03,\n    m10, m11, m12, m13,\n    m20, m21, m22, m23,\n    m30, m31, m32, m33\n  );\n};\n\n/**\n * Creates a new mat4 initialized with values from an existing matrix\n *\n * @param {mat4} a matrix to clone\n * @returns {mat4} a new 4x4 matrix\n */\nmat4.clone = function (a) {\n  return new _mat4(\n    a.m00, a.m01, a.m02, a.m03,\n    a.m04, a.m05, a.m06, a.m07,\n    a.m08, a.m09, a.m10, a.m11,\n    a.m12, a.m13, a.m14, a.m15\n  );\n};\n\n/**\n * Copy the values from one mat4 to another\n *\n * @param {mat4} out the receiving matrix\n * @param {mat4} a the source matrix\n * @returns {mat4} out\n */\nmat4.copy = function (out, a) {\n  out.m00 = a.m00;\n  out.m01 = a.m01;\n  out.m02 = a.m02;\n  out.m03 = a.m03;\n  out.m04 = a.m04;\n  out.m05 = a.m05;\n  out.m06 = a.m06;\n  out.m07 = a.m07;\n  out.m08 = a.m08;\n  out.m09 = a.m09;\n  out.m10 = a.m10;\n  out.m11 = a.m11;\n  out.m12 = a.m12;\n  out.m13 = a.m13;\n  out.m14 = a.m14;\n  out.m15 = a.m15;\n  return out;\n};\n\n/**\n * Set the components of a mat4 to the given values\n *\n * @param {mat4} out the receiving matrix\n * @param {Number} m00 Component in column 0, row 0 position (index 0)\n * @param {Number} m01 Component in column 0, row 1 position (index 1)\n * @param {Number} m02 Component in column 0, row 2 position (index 2)\n * @param {Number} m03 Component in column 0, row 3 position (index 3)\n * @param {Number} m10 Component in column 1, row 0 position (index 4)\n * @param {Number} m11 Component in column 1, row 1 position (index 5)\n * @param {Number} m12 Component in column 1, row 2 position (index 6)\n * @param {Number} m13 Component in column 1, row 3 position (index 7)\n * @param {Number} m20 Component in column 2, row 0 position (index 8)\n * @param {Number} m21 Component in column 2, row 1 position (index 9)\n * @param {Number} m22 Component in column 2, row 2 position (index 10)\n * @param {Number} m23 Component in column 2, row 3 position (index 11)\n * @param {Number} m30 Component in column 3, row 0 position (index 12)\n * @param {Number} m31 Component in column 3, row 1 position (index 13)\n * @param {Number} m32 Component in column 3, row 2 position (index 14)\n * @param {Number} m33 Component in column 3, row 3 position (index 15)\n * @returns {mat4} out\n */\nmat4.set = function (out, m00, m01, m02, m03, m10, m11, m12, m13, m20, m21, m22, m23, m30, m31, m32, m33) {\n  out.m00 = m00;\n  out.m01 = m01;\n  out.m02 = m02;\n  out.m03 = m03;\n  out.m04 = m10;\n  out.m05 = m11;\n  out.m06 = m12;\n  out.m07 = m13;\n  out.m08 = m20;\n  out.m09 = m21;\n  out.m10 = m22;\n  out.m11 = m23;\n  out.m12 = m30;\n  out.m13 = m31;\n  out.m14 = m32;\n  out.m15 = m33;\n  return out;\n};\n\n\n/**\n * Set a mat4 to the identity matrix\n *\n * @param {mat4} out the receiving matrix\n * @returns {mat4} out\n */\nmat4.identity = function (out) {\n  out.m00 = 1;\n  out.m01 = 0;\n  out.m02 = 0;\n  out.m03 = 0;\n  out.m04 = 0;\n  out.m05 = 1;\n  out.m06 = 0;\n  out.m07 = 0;\n  out.m08 = 0;\n  out.m09 = 0;\n  out.m10 = 1;\n  out.m11 = 0;\n  out.m12 = 0;\n  out.m13 = 0;\n  out.m14 = 0;\n  out.m15 = 1;\n  return out;\n};\n\n/**\n * Transpose the values of a mat4\n *\n * @param {mat4} out the receiving matrix\n * @param {mat4} a the source matrix\n * @returns {mat4} out\n */\nmat4.transpose = function (out, a) {\n  // If we are transposing ourselves we can skip a few steps but have to cache some values\n  if (out === a) {\n    let a01 = a.m01, a02 = a.m02, a03 = a.m03,\n        a12 = a.m06, a13 = a.m07,\n        a23 = a.m11;\n\n    out.m01 = a.m04;\n    out.m02 = a.m08;\n    out.m03 = a.m12;\n    out.m04 = a01;\n    out.m06 = a.m09;\n    out.m07 = a.m13;\n    out.m08 = a02;\n    out.m09 = a12;\n    out.m11 = a.m14;\n    out.m12 = a03;\n    out.m13 = a13;\n    out.m14 = a23;\n  } else {\n    out.m00 = a.m00;\n    out.m01 = a.m04;\n    out.m02 = a.m08;\n    out.m03 = a.m12;\n    out.m04 = a.m01;\n    out.m05 = a.m05;\n    out.m06 = a.m09;\n    out.m07 = a.m13;\n    out.m08 = a.m02;\n    out.m09 = a.m06;\n    out.m10 = a.m10;\n    out.m11 = a.m14;\n    out.m12 = a.m03;\n    out.m13 = a.m07;\n    out.m14 = a.m11;\n    out.m15 = a.m15;\n  }\n\n  return out;\n};\n\n/**\n * Inverts a mat4\n *\n * @param {mat4} out the receiving matrix\n * @param {mat4} a the source matrix\n * @returns {mat4} out\n */\nmat4.invert = function (out, a) {\n  let a00 = a.m00, a01 = a.m01, a02 = a.m02, a03 = a.m03,\n      a10 = a.m04, a11 = a.m05, a12 = a.m06, a13 = a.m07,\n      a20 = a.m08, a21 = a.m09, a22 = a.m10, a23 = a.m11,\n      a30 = a.m12, a31 = a.m13, a32 = a.m14, a33 = a.m15;\n\n  let b00 = a00 * a11 - a01 * a10;\n  let b01 = a00 * a12 - a02 * a10;\n  let b02 = a00 * a13 - a03 * a10;\n  let b03 = a01 * a12 - a02 * a11;\n  let b04 = a01 * a13 - a03 * a11;\n  let b05 = a02 * a13 - a03 * a12;\n  let b06 = a20 * a31 - a21 * a30;\n  let b07 = a20 * a32 - a22 * a30;\n  let b08 = a20 * a33 - a23 * a30;\n  let b09 = a21 * a32 - a22 * a31;\n  let b10 = a21 * a33 - a23 * a31;\n  let b11 = a22 * a33 - a23 * a32;\n\n  // Calculate the determinant\n  let det = b00 * b11 - b01 * b10 + b02 * b09 + b03 * b08 - b04 * b07 + b05 * b06;\n\n  if (!det) {\n    return null;\n  }\n  det = 1.0 / det;\n\n  out.m00 = (a11 * b11 - a12 * b10 + a13 * b09) * det;\n  out.m01 = (a02 * b10 - a01 * b11 - a03 * b09) * det;\n  out.m02 = (a31 * b05 - a32 * b04 + a33 * b03) * det;\n  out.m03 = (a22 * b04 - a21 * b05 - a23 * b03) * det;\n  out.m04 = (a12 * b08 - a10 * b11 - a13 * b07) * det;\n  out.m05 = (a00 * b11 - a02 * b08 + a03 * b07) * det;\n  out.m06 = (a32 * b02 - a30 * b05 - a33 * b01) * det;\n  out.m07 = (a20 * b05 - a22 * b02 + a23 * b01) * det;\n  out.m08 = (a10 * b10 - a11 * b08 + a13 * b06) * det;\n  out.m09 = (a01 * b08 - a00 * b10 - a03 * b06) * det;\n  out.m10 = (a30 * b04 - a31 * b02 + a33 * b00) * det;\n  out.m11 = (a21 * b02 - a20 * b04 - a23 * b00) * det;\n  out.m12 = (a11 * b07 - a10 * b09 - a12 * b06) * det;\n  out.m13 = (a00 * b09 - a01 * b07 + a02 * b06) * det;\n  out.m14 = (a31 * b01 - a30 * b03 - a32 * b00) * det;\n  out.m15 = (a20 * b03 - a21 * b01 + a22 * b00) * det;\n\n  return out;\n};\n\n/**\n * Calculates the adjugate of a mat4\n *\n * @param {mat4} out the receiving matrix\n * @param {mat4} a the source matrix\n * @returns {mat4} out\n */\nmat4.adjoint = function (out, a) {\n  let a00 = a.m00, a01 = a.m01, a02 = a.m02, a03 = a.m03,\n      a10 = a.m04, a11 = a.m05, a12 = a.m06, a13 = a.m07,\n      a20 = a.m08, a21 = a.m09, a22 = a.m10, a23 = a.m11,\n      a30 = a.m12, a31 = a.m13, a32 = a.m14, a33 = a.m15;\n\n  out.m00 = (a11 * (a22 * a33 - a23 * a32) - a21 * (a12 * a33 - a13 * a32) + a31 * (a12 * a23 - a13 * a22));\n  out.m01 = -(a01 * (a22 * a33 - a23 * a32) - a21 * (a02 * a33 - a03 * a32) + a31 * (a02 * a23 - a03 * a22));\n  out.m02 = (a01 * (a12 * a33 - a13 * a32) - a11 * (a02 * a33 - a03 * a32) + a31 * (a02 * a13 - a03 * a12));\n  out.m03 = -(a01 * (a12 * a23 - a13 * a22) - a11 * (a02 * a23 - a03 * a22) + a21 * (a02 * a13 - a03 * a12));\n  out.m04 = -(a10 * (a22 * a33 - a23 * a32) - a20 * (a12 * a33 - a13 * a32) + a30 * (a12 * a23 - a13 * a22));\n  out.m05 = (a00 * (a22 * a33 - a23 * a32) - a20 * (a02 * a33 - a03 * a32) + a30 * (a02 * a23 - a03 * a22));\n  out.m06 = -(a00 * (a12 * a33 - a13 * a32) - a10 * (a02 * a33 - a03 * a32) + a30 * (a02 * a13 - a03 * a12));\n  out.m07 = (a00 * (a12 * a23 - a13 * a22) - a10 * (a02 * a23 - a03 * a22) + a20 * (a02 * a13 - a03 * a12));\n  out.m08 = (a10 * (a21 * a33 - a23 * a31) - a20 * (a11 * a33 - a13 * a31) + a30 * (a11 * a23 - a13 * a21));\n  out.m09 = -(a00 * (a21 * a33 - a23 * a31) - a20 * (a01 * a33 - a03 * a31) + a30 * (a01 * a23 - a03 * a21));\n  out.m10 = (a00 * (a11 * a33 - a13 * a31) - a10 * (a01 * a33 - a03 * a31) + a30 * (a01 * a13 - a03 * a11));\n  out.m11 = -(a00 * (a11 * a23 - a13 * a21) - a10 * (a01 * a23 - a03 * a21) + a20 * (a01 * a13 - a03 * a11));\n  out.m12 = -(a10 * (a21 * a32 - a22 * a31) - a20 * (a11 * a32 - a12 * a31) + a30 * (a11 * a22 - a12 * a21));\n  out.m13 = (a00 * (a21 * a32 - a22 * a31) - a20 * (a01 * a32 - a02 * a31) + a30 * (a01 * a22 - a02 * a21));\n  out.m14 = -(a00 * (a11 * a32 - a12 * a31) - a10 * (a01 * a32 - a02 * a31) + a30 * (a01 * a12 - a02 * a11));\n  out.m15 = (a00 * (a11 * a22 - a12 * a21) - a10 * (a01 * a22 - a02 * a21) + a20 * (a01 * a12 - a02 * a11));\n  return out;\n};\n\n/**\n * Calculates the determinant of a mat4\n *\n * @param {mat4} a the source matrix\n * @returns {Number} determinant of a\n */\nmat4.determinant = function (a) {\n  let a00 = a.m00, a01 = a.m01, a02 = a.m02, a03 = a.m03,\n      a10 = a.m04, a11 = a.m05, a12 = a.m06, a13 = a.m07,\n      a20 = a.m08, a21 = a.m09, a22 = a.m10, a23 = a.m11,\n      a30 = a.m12, a31 = a.m13, a32 = a.m14, a33 = a.m15;\n\n  let b00 = a00 * a11 - a01 * a10;\n  let b01 = a00 * a12 - a02 * a10;\n  let b02 = a00 * a13 - a03 * a10;\n  let b03 = a01 * a12 - a02 * a11;\n  let b04 = a01 * a13 - a03 * a11;\n  let b05 = a02 * a13 - a03 * a12;\n  let b06 = a20 * a31 - a21 * a30;\n  let b07 = a20 * a32 - a22 * a30;\n  let b08 = a20 * a33 - a23 * a30;\n  let b09 = a21 * a32 - a22 * a31;\n  let b10 = a21 * a33 - a23 * a31;\n  let b11 = a22 * a33 - a23 * a32;\n\n  // Calculate the determinant\n  return b00 * b11 - b01 * b10 + b02 * b09 + b03 * b08 - b04 * b07 + b05 * b06;\n};\n\n/**\n * Multiplies two mat4's explicitly\n *\n * @param {mat4} out the receiving matrix\n * @param {mat4} a the first operand\n * @param {mat4} b the second operand\n * @returns {mat4} out\n */\nmat4.multiply = function (out, a, b) {\n  let a00 = a.m00, a01 = a.m01, a02 = a.m02, a03 = a.m03,\n      a10 = a.m04, a11 = a.m05, a12 = a.m06, a13 = a.m07,\n      a20 = a.m08, a21 = a.m09, a22 = a.m10, a23 = a.m11,\n      a30 = a.m12, a31 = a.m13, a32 = a.m14, a33 = a.m15;\n\n  // Cache only the current line of the second matrix\n  let b0 = b.m00, b1 = b.m01, b2 = b.m02, b3 = b.m03;\n  out.m00 = b0 * a00 + b1 * a10 + b2 * a20 + b3 * a30;\n  out.m01 = b0 * a01 + b1 * a11 + b2 * a21 + b3 * a31;\n  out.m02 = b0 * a02 + b1 * a12 + b2 * a22 + b3 * a32;\n  out.m03 = b0 * a03 + b1 * a13 + b2 * a23 + b3 * a33;\n\n  b0 = b.m04; b1 = b.m05; b2 = b.m06; b3 = b.m07;\n  out.m04 = b0 * a00 + b1 * a10 + b2 * a20 + b3 * a30;\n  out.m05 = b0 * a01 + b1 * a11 + b2 * a21 + b3 * a31;\n  out.m06 = b0 * a02 + b1 * a12 + b2 * a22 + b3 * a32;\n  out.m07 = b0 * a03 + b1 * a13 + b2 * a23 + b3 * a33;\n\n  b0 = b.m08; b1 = b.m09; b2 = b.m10; b3 = b.m11;\n  out.m08 = b0 * a00 + b1 * a10 + b2 * a20 + b3 * a30;\n  out.m09 = b0 * a01 + b1 * a11 + b2 * a21 + b3 * a31;\n  out.m10 = b0 * a02 + b1 * a12 + b2 * a22 + b3 * a32;\n  out.m11 = b0 * a03 + b1 * a13 + b2 * a23 + b3 * a33;\n\n  b0 = b.m12; b1 = b.m13; b2 = b.m14; b3 = b.m15;\n  out.m12 = b0 * a00 + b1 * a10 + b2 * a20 + b3 * a30;\n  out.m13 = b0 * a01 + b1 * a11 + b2 * a21 + b3 * a31;\n  out.m14 = b0 * a02 + b1 * a12 + b2 * a22 + b3 * a32;\n  out.m15 = b0 * a03 + b1 * a13 + b2 * a23 + b3 * a33;\n  return out;\n};\n\n/**\n * Alias for {@link mat4.multiply}\n * @function\n */\nmat4.mul = mat4.multiply;\n\n/**\n * Translate a mat4 by the given vector\n *\n * @param {mat4} out the receiving matrix\n * @param {mat4} a the matrix to translate\n * @param {vec3} v vector to translate by\n * @returns {mat4} out\n */\nmat4.translate = function (out, a, v) {\n  let x = v.x, y = v.y, z = v.z,\n      a00, a01, a02, a03,\n      a10, a11, a12, a13,\n      a20, a21, a22, a23;\n\n  if (a === out) {\n    out.m12 = a.m00 * x + a.m04 * y + a.m08 * z + a.m12;\n    out.m13 = a.m01 * x + a.m05 * y + a.m09 * z + a.m13;\n    out.m14 = a.m02 * x + a.m06 * y + a.m10 * z + a.m14;\n    out.m15 = a.m03 * x + a.m07 * y + a.m11 * z + a.m15;\n  } else {\n    a00 = a.m00; a01 = a.m01; a02 = a.m02; a03 = a.m03;\n    a10 = a.m04; a11 = a.m05; a12 = a.m06; a13 = a.m07;\n    a20 = a.m08; a21 = a.m09; a22 = a.m10; a23 = a.m11;\n\n    out.m00 = a00; out.m01 = a01; out.m02 = a02; out.m03 = a03;\n    out.m04 = a10; out.m05 = a11; out.m06 = a12; out.m07 = a13;\n    out.m08 = a20; out.m09 = a21; out.m10 = a22; out.m11 = a23;\n\n    out.m12 = a00 * x + a10 * y + a20 * z + a.m12;\n    out.m13 = a01 * x + a11 * y + a21 * z + a.m13;\n    out.m14 = a02 * x + a12 * y + a22 * z + a.m14;\n    out.m15 = a03 * x + a13 * y + a23 * z + a.m15;\n  }\n\n  return out;\n};\n\n/**\n * Scales the mat4 by the dimensions in the given vec3\n *\n * @param {mat4} out the receiving matrix\n * @param {mat4} a the matrix to scale\n * @param {vec3} v the vec3 to scale the matrix by\n * @returns {mat4} out\n **/\nmat4.scale = function (out, a, v) {\n  let x = v.x, y = v.y, z = v.z;\n\n  out.m00 = a.m00 * x;\n  out.m01 = a.m01 * x;\n  out.m02 = a.m02 * x;\n  out.m03 = a.m03 * x;\n  out.m04 = a.m04 * y;\n  out.m05 = a.m05 * y;\n  out.m06 = a.m06 * y;\n  out.m07 = a.m07 * y;\n  out.m08 = a.m08 * z;\n  out.m09 = a.m09 * z;\n  out.m10 = a.m10 * z;\n  out.m11 = a.m11 * z;\n  out.m12 = a.m12;\n  out.m13 = a.m13;\n  out.m14 = a.m14;\n  out.m15 = a.m15;\n  return out;\n};\n\n/**\n * Rotates a mat4 by the given angle around the given axis\n *\n * @param {mat4} out the receiving matrix\n * @param {mat4} a the matrix to rotate\n * @param {Number} rad the angle to rotate the matrix by\n * @param {vec3} axis the axis to rotate around\n * @returns {mat4} out\n */\nmat4.rotate = function (out, a, rad, axis) {\n  let x = axis.x, y = axis.y, z = axis.z;\n  let s, c, t,\n      a00, a01, a02, a03,\n      a10, a11, a12, a13,\n      a20, a21, a22, a23,\n      b00, b01, b02,\n      b10, b11, b12,\n      b20, b21, b22;\n\n  let len = Math.sqrt(x * x + y * y + z * z);\n\n  if (Math.abs(len) < EPSILON) {\n    return null;\n  }\n\n  len = 1 / len;\n  x *= len;\n  y *= len;\n  z *= len;\n\n  s = Math.sin(rad);\n  c = Math.cos(rad);\n  t = 1 - c;\n\n  a00 = a.m00; a01 = a.m01; a02 = a.m02; a03 = a.m03;\n  a10 = a.m04; a11 = a.m05; a12 = a.m06; a13 = a.m07;\n  a20 = a.m08; a21 = a.m09; a22 = a.m10; a23 = a.m11;\n\n  // Construct the elements of the rotation matrix\n  b00 = x * x * t + c; b01 = y * x * t + z * s; b02 = z * x * t - y * s;\n  b10 = x * y * t - z * s; b11 = y * y * t + c; b12 = z * y * t + x * s;\n  b20 = x * z * t + y * s; b21 = y * z * t - x * s; b22 = z * z * t + c;\n\n  // Perform rotation-specific matrix multiplication\n  out.m00 = a00 * b00 + a10 * b01 + a20 * b02;\n  out.m01 = a01 * b00 + a11 * b01 + a21 * b02;\n  out.m02 = a02 * b00 + a12 * b01 + a22 * b02;\n  out.m03 = a03 * b00 + a13 * b01 + a23 * b02;\n  out.m04 = a00 * b10 + a10 * b11 + a20 * b12;\n  out.m05 = a01 * b10 + a11 * b11 + a21 * b12;\n  out.m06 = a02 * b10 + a12 * b11 + a22 * b12;\n  out.m07 = a03 * b10 + a13 * b11 + a23 * b12;\n  out.m08 = a00 * b20 + a10 * b21 + a20 * b22;\n  out.m09 = a01 * b20 + a11 * b21 + a21 * b22;\n  out.m10 = a02 * b20 + a12 * b21 + a22 * b22;\n  out.m11 = a03 * b20 + a13 * b21 + a23 * b22;\n\n  // If the source and destination differ, copy the unchanged last row\n  if (a !== out) {\n    out.m12 = a.m12;\n    out.m13 = a.m13;\n    out.m14 = a.m14;\n    out.m15 = a.m15;\n  }\n\n  return out;\n};\n\n/**\n * Rotates a matrix by the given angle around the X axis\n *\n * @param {mat4} out the receiving matrix\n * @param {mat4} a the matrix to rotate\n * @param {Number} rad the angle to rotate the matrix by\n * @returns {mat4} out\n */\nmat4.rotateX = function (out, a, rad) {\n  let s = Math.sin(rad),\n      c = Math.cos(rad),\n      a10 = a.m04,\n      a11 = a.m05,\n      a12 = a.m06,\n      a13 = a.m07,\n      a20 = a.m08,\n      a21 = a.m09,\n      a22 = a.m10,\n      a23 = a.m11;\n\n  if (a !== out) { // If the source and destination differ, copy the unchanged rows\n    out.m00 = a.m00;\n    out.m01 = a.m01;\n    out.m02 = a.m02;\n    out.m03 = a.m03;\n    out.m12 = a.m12;\n    out.m13 = a.m13;\n    out.m14 = a.m14;\n    out.m15 = a.m15;\n  }\n\n  // Perform axis-specific matrix multiplication\n  out.m04 = a10 * c + a20 * s;\n  out.m05 = a11 * c + a21 * s;\n  out.m06 = a12 * c + a22 * s;\n  out.m07 = a13 * c + a23 * s;\n  out.m08 = a20 * c - a10 * s;\n  out.m09 = a21 * c - a11 * s;\n  out.m10 = a22 * c - a12 * s;\n  out.m11 = a23 * c - a13 * s;\n\n  return out;\n};\n\n/**\n * Rotates a matrix by the given angle around the Y axis\n *\n * @param {mat4} out the receiving matrix\n * @param {mat4} a the matrix to rotate\n * @param {Number} rad the angle to rotate the matrix by\n * @returns {mat4} out\n */\nmat4.rotateY = function (out, a, rad) {\n  let s = Math.sin(rad),\n      c = Math.cos(rad),\n      a00 = a.m00,\n      a01 = a.m01,\n      a02 = a.m02,\n      a03 = a.m03,\n      a20 = a.m08,\n      a21 = a.m09,\n      a22 = a.m10,\n      a23 = a.m11;\n\n  if (a !== out) { // If the source and destination differ, copy the unchanged rows\n    out.m04 = a.m04;\n    out.m05 = a.m05;\n    out.m06 = a.m06;\n    out.m07 = a.m07;\n    out.m12 = a.m12;\n    out.m13 = a.m13;\n    out.m14 = a.m14;\n    out.m15 = a.m15;\n  }\n\n  // Perform axis-specific matrix multiplication\n  out.m00 = a00 * c - a20 * s;\n  out.m01 = a01 * c - a21 * s;\n  out.m02 = a02 * c - a22 * s;\n  out.m03 = a03 * c - a23 * s;\n  out.m08 = a00 * s + a20 * c;\n  out.m09 = a01 * s + a21 * c;\n  out.m10 = a02 * s + a22 * c;\n  out.m11 = a03 * s + a23 * c;\n\n  return out;\n};\n\n/**\n * Rotates a matrix by the given angle around the Z axis\n *\n * @param {mat4} out the receiving matrix\n * @param {mat4} a the matrix to rotate\n * @param {Number} rad the angle to rotate the matrix by\n * @returns {mat4} out\n */\nmat4.rotateZ = function (out, a, rad) {\n  let s = Math.sin(rad),\n      c = Math.cos(rad),\n      a00 = a.m00,\n      a01 = a.m01,\n      a02 = a.m02,\n      a03 = a.m03,\n      a10 = a.m04,\n      a11 = a.m05,\n      a12 = a.m06,\n      a13 = a.m07;\n\n  // If the source and destination differ, copy the unchanged last row\n  if (a !== out) {\n    out.m08 = a.m08;\n    out.m09 = a.m09;\n    out.m10 = a.m10;\n    out.m11 = a.m11;\n    out.m12 = a.m12;\n    out.m13 = a.m13;\n    out.m14 = a.m14;\n    out.m15 = a.m15;\n  }\n\n  // Perform axis-specific matrix multiplication\n  out.m00 = a00 * c + a10 * s;\n  out.m01 = a01 * c + a11 * s;\n  out.m02 = a02 * c + a12 * s;\n  out.m03 = a03 * c + a13 * s;\n  out.m04 = a10 * c - a00 * s;\n  out.m05 = a11 * c - a01 * s;\n  out.m06 = a12 * c - a02 * s;\n  out.m07 = a13 * c - a03 * s;\n\n  return out;\n};\n\n/**\n * Creates a matrix from a vector translation\n * This is equivalent to (but much faster than):\n *\n *     mat4.identity(dest);\n *     mat4.translate(dest, dest, vec);\n *\n * @param {mat4} out mat4 receiving operation result\n * @param {vec3} v Translation vector\n * @returns {mat4} out\n */\nmat4.fromTranslation = function (out, v) {\n  out.m00 = 1;\n  out.m01 = 0;\n  out.m02 = 0;\n  out.m03 = 0;\n  out.m04 = 0;\n  out.m05 = 1;\n  out.m06 = 0;\n  out.m07 = 0;\n  out.m08 = 0;\n  out.m09 = 0;\n  out.m10 = 1;\n  out.m11 = 0;\n  out.m12 = v.x;\n  out.m13 = v.y;\n  out.m14 = v.z;\n  out.m15 = 1;\n  return out;\n};\n\n/**\n * Creates a matrix from a vector scaling\n * This is equivalent to (but much faster than):\n *\n *     mat4.identity(dest);\n *     mat4.scale(dest, dest, vec);\n *\n * @param {mat4} out mat4 receiving operation result\n * @param {vec3} v Scaling vector\n * @returns {mat4} out\n */\nmat4.fromScaling = function (out, v) {\n  out.m00 = v.x;\n  out.m01 = 0;\n  out.m02 = 0;\n  out.m03 = 0;\n  out.m04 = 0;\n  out.m05 = v.y;\n  out.m06 = 0;\n  out.m07 = 0;\n  out.m08 = 0;\n  out.m09 = 0;\n  out.m10 = v.z;\n  out.m11 = 0;\n  out.m12 = 0;\n  out.m13 = 0;\n  out.m14 = 0;\n  out.m15 = 1;\n  return out;\n};\n\n/**\n * Creates a matrix from a given angle around a given axis\n * This is equivalent to (but much faster than):\n *\n *     mat4.identity(dest);\n *     mat4.rotate(dest, dest, rad, axis);\n *\n * @param {mat4} out mat4 receiving operation result\n * @param {Number} rad the angle to rotate the matrix by\n * @param {vec3} axis the axis to rotate around\n * @returns {mat4} out\n */\nmat4.fromRotation = function (out, rad, axis) {\n  let x = axis.x, y = axis.y, z = axis.z;\n  let len = Math.sqrt(x * x + y * y + z * z);\n  let s, c, t;\n\n  if (Math.abs(len) < EPSILON) {\n    return null;\n  }\n\n  len = 1 / len;\n  x *= len;\n  y *= len;\n  z *= len;\n\n  s = Math.sin(rad);\n  c = Math.cos(rad);\n  t = 1 - c;\n\n  // Perform rotation-specific matrix multiplication\n  out.m00 = x * x * t + c;\n  out.m01 = y * x * t + z * s;\n  out.m02 = z * x * t - y * s;\n  out.m03 = 0;\n  out.m04 = x * y * t - z * s;\n  out.m05 = y * y * t + c;\n  out.m06 = z * y * t + x * s;\n  out.m07 = 0;\n  out.m08 = x * z * t + y * s;\n  out.m09 = y * z * t - x * s;\n  out.m10 = z * z * t + c;\n  out.m11 = 0;\n  out.m12 = 0;\n  out.m13 = 0;\n  out.m14 = 0;\n  out.m15 = 1;\n  return out;\n};\n\n/**\n * Creates a matrix from the given angle around the X axis\n * This is equivalent to (but much faster than):\n *\n *     mat4.identity(dest);\n *     mat4.rotateX(dest, dest, rad);\n *\n * @param {mat4} out mat4 receiving operation result\n * @param {Number} rad the angle to rotate the matrix by\n * @returns {mat4} out\n */\nmat4.fromXRotation = function (out, rad) {\n  let s = Math.sin(rad),\n      c = Math.cos(rad);\n\n  // Perform axis-specific matrix multiplication\n  out.m00 = 1;\n  out.m01 = 0;\n  out.m02 = 0;\n  out.m03 = 0;\n  out.m04 = 0;\n  out.m05 = c;\n  out.m06 = s;\n  out.m07 = 0;\n  out.m08 = 0;\n  out.m09 = -s;\n  out.m10 = c;\n  out.m11 = 0;\n  out.m12 = 0;\n  out.m13 = 0;\n  out.m14 = 0;\n  out.m15 = 1;\n  return out;\n};\n\n/**\n * Creates a matrix from the given angle around the Y axis\n * This is equivalent to (but much faster than):\n *\n *     mat4.identity(dest);\n *     mat4.rotateY(dest, dest, rad);\n *\n * @param {mat4} out mat4 receiving operation result\n * @param {Number} rad the angle to rotate the matrix by\n * @returns {mat4} out\n */\nmat4.fromYRotation = function (out, rad) {\n  let s = Math.sin(rad),\n      c = Math.cos(rad);\n\n  // Perform axis-specific matrix multiplication\n  out.m00 = c;\n  out.m01 = 0;\n  out.m02 = -s;\n  out.m03 = 0;\n  out.m04 = 0;\n  out.m05 = 1;\n  out.m06 = 0;\n  out.m07 = 0;\n  out.m08 = s;\n  out.m09 = 0;\n  out.m10 = c;\n  out.m11 = 0;\n  out.m12 = 0;\n  out.m13 = 0;\n  out.m14 = 0;\n  out.m15 = 1;\n  return out;\n};\n\n/**\n * Creates a matrix from the given angle around the Z axis\n * This is equivalent to (but much faster than):\n *\n *     mat4.identity(dest);\n *     mat4.rotateZ(dest, dest, rad);\n *\n * @param {mat4} out mat4 receiving operation result\n * @param {Number} rad the angle to rotate the matrix by\n * @returns {mat4} out\n */\nmat4.fromZRotation = function (out, rad) {\n  let s = Math.sin(rad),\n      c = Math.cos(rad);\n\n  // Perform axis-specific matrix multiplication\n  out.m00 = c;\n  out.m01 = s;\n  out.m02 = 0;\n  out.m03 = 0;\n  out.m04 = -s;\n  out.m05 = c;\n  out.m06 = 0;\n  out.m07 = 0;\n  out.m08 = 0;\n  out.m09 = 0;\n  out.m10 = 1;\n  out.m11 = 0;\n  out.m12 = 0;\n  out.m13 = 0;\n  out.m14 = 0;\n  out.m15 = 1;\n  return out;\n};\n\n/**\n * Creates a matrix from a quaternion rotation and vector translation\n * This is equivalent to (but much faster than):\n *\n *     mat4.identity(dest);\n *     mat4.translate(dest, vec);\n *     let quatMat = mat4.create();\n *     quat.toMat4(quat, quatMat);\n *     mat4.multiply(dest, quatMat);\n *\n * @param {mat4} out mat4 receiving operation result\n * @param {quat} q Rotation quaternion\n * @param {vec3} v Translation vector\n * @returns {mat4} out\n */\nmat4.fromRT = function (out, q, v) {\n  // Quaternion math\n  let x = q.x, y = q.y, z = q.z, w = q.w;\n  let x2 = x + x;\n  let y2 = y + y;\n  let z2 = z + z;\n\n  let xx = x * x2;\n  let xy = x * y2;\n  let xz = x * z2;\n  let yy = y * y2;\n  let yz = y * z2;\n  let zz = z * z2;\n  let wx = w * x2;\n  let wy = w * y2;\n  let wz = w * z2;\n\n  out.m00 = 1 - (yy + zz);\n  out.m01 = xy + wz;\n  out.m02 = xz - wy;\n  out.m03 = 0;\n  out.m04 = xy - wz;\n  out.m05 = 1 - (xx + zz);\n  out.m06 = yz + wx;\n  out.m07 = 0;\n  out.m08 = xz + wy;\n  out.m09 = yz - wx;\n  out.m10 = 1 - (xx + yy);\n  out.m11 = 0;\n  out.m12 = v.x;\n  out.m13 = v.y;\n  out.m14 = v.z;\n  out.m15 = 1;\n\n  return out;\n};\n\n/**\n * Returns the translation vector component of a transformation\n *  matrix. If a matrix is built with fromRT,\n *  the returned vector will be the same as the translation vector\n *  originally supplied.\n * @param  {vec3} out Vector to receive translation component\n * @param  {mat4} mat Matrix to be decomposed (input)\n * @return {vec3} out\n */\nmat4.getTranslation = function (out, mat) {\n  out.x = mat.m12;\n  out.y = mat.m13;\n  out.z = mat.m14;\n\n  return out;\n};\n\n/**\n * Returns the scaling factor component of a transformation\n *  matrix. If a matrix is built with fromRTS\n *  with a normalized Quaternion paramter, the returned vector will be\n *  the same as the scaling vector\n *  originally supplied.\n * @param  {vec3} out Vector to receive scaling factor component\n * @param  {mat4} mat Matrix to be decomposed (input)\n * @return {vec3} out\n */\nmat4.getScaling = function (out, mat) {\n  let m11 = mat.m00,\n      m12 = mat.m01,\n      m13 = mat.m02,\n      m21 = mat.m04,\n      m22 = mat.m05,\n      m23 = mat.m06,\n      m31 = mat.m08,\n      m32 = mat.m09,\n      m33 = mat.m10;\n\n  out.x = Math.sqrt(m11 * m11 + m12 * m12 + m13 * m13);\n  out.y = Math.sqrt(m21 * m21 + m22 * m22 + m23 * m23);\n  out.z = Math.sqrt(m31 * m31 + m32 * m32 + m33 * m33);\n\n  return out;\n};\n\n/**\n * Returns a quaternion representing the rotational component\n *  of a transformation matrix. If a matrix is built with\n *  fromRT, the returned quaternion will be the\n *  same as the quaternion originally supplied.\n * @param {quat} out Quaternion to receive the rotation component\n * @param {mat4} mat Matrix to be decomposed (input)\n * @return {quat} out\n */\nmat4.getRotation = function (out, mat) {\n  // Algorithm taken from http://www.euclideanspace.com/maths/geometry/rotations/conversions/matrixToQuaternion/index.htm\n  let trace = mat.m00 + mat.m05 + mat.m10;\n  let S = 0;\n\n  if (trace > 0) {\n    S = Math.sqrt(trace + 1.0) * 2;\n    out.w = 0.25 * S;\n    out.x = (mat.m06 - mat.m09) / S;\n    out.y = (mat.m08 - mat.m02) / S;\n    out.z = (mat.m01 - mat.m04) / S;\n  } else if ((mat.m00 > mat.m05) & (mat.m00 > mat.m10)) {\n    S = Math.sqrt(1.0 + mat.m00 - mat.m05 - mat.m10) * 2;\n    out.w = (mat.m06 - mat.m09) / S;\n    out.x = 0.25 * S;\n    out.y = (mat.m01 + mat.m04) / S;\n    out.z = (mat.m08 + mat.m02) / S;\n  } else if (mat.m05 > mat.m10) {\n    S = Math.sqrt(1.0 + mat.m05 - mat.m00 - mat.m10) * 2;\n    out.w = (mat.m08 - mat.m02) / S;\n    out.x = (mat.m01 + mat.m04) / S;\n    out.y = 0.25 * S;\n    out.z = (mat.m06 + mat.m09) / S;\n  } else {\n    S = Math.sqrt(1.0 + mat.m10 - mat.m00 - mat.m05) * 2;\n    out.w = (mat.m01 - mat.m04) / S;\n    out.x = (mat.m08 + mat.m02) / S;\n    out.y = (mat.m06 + mat.m09) / S;\n    out.z = 0.25 * S;\n  }\n\n  return out;\n};\n\n/**\n * Creates a matrix from a quaternion rotation, vector translation and vector scale\n * This is equivalent to (but much faster than):\n *\n *     mat4.identity(dest);\n *     mat4.translate(dest, vec);\n *     let quatMat = mat4.create();\n *     quat.toMat4(quat, quatMat);\n *     mat4.multiply(dest, quatMat);\n *     mat4.scale(dest, scale)\n *\n * @param {mat4} out mat4 receiving operation result\n * @param {quat} q Rotation quaternion\n * @param {vec3} v Translation vector\n * @param {vec3} s Scaling vector\n * @returns {mat4} out\n */\nmat4.fromRTS = function (out, q, v, s) {\n  // Quaternion math\n  let x = q.x, y = q.y, z = q.z, w = q.w;\n  let x2 = x + x;\n  let y2 = y + y;\n  let z2 = z + z;\n\n  let xx = x * x2;\n  let xy = x * y2;\n  let xz = x * z2;\n  let yy = y * y2;\n  let yz = y * z2;\n  let zz = z * z2;\n  let wx = w * x2;\n  let wy = w * y2;\n  let wz = w * z2;\n  let sx = s.x;\n  let sy = s.y;\n  let sz = s.z;\n\n  out.m00 = (1 - (yy + zz)) * sx;\n  out.m01 = (xy + wz) * sx;\n  out.m02 = (xz - wy) * sx;\n  out.m03 = 0;\n  out.m04 = (xy - wz) * sy;\n  out.m05 = (1 - (xx + zz)) * sy;\n  out.m06 = (yz + wx) * sy;\n  out.m07 = 0;\n  out.m08 = (xz + wy) * sz;\n  out.m09 = (yz - wx) * sz;\n  out.m10 = (1 - (xx + yy)) * sz;\n  out.m11 = 0;\n  out.m12 = v.x;\n  out.m13 = v.y;\n  out.m14 = v.z;\n  out.m15 = 1;\n\n  return out;\n};\n\n/**\n * Creates a matrix from a quaternion rotation, vector translation and vector scale, rotating and scaling around the given origin\n * This is equivalent to (but much faster than):\n *\n *     mat4.identity(dest);\n *     mat4.translate(dest, vec);\n *     mat4.translate(dest, origin);\n *     let quatMat = mat4.create();\n *     quat.toMat4(quat, quatMat);\n *     mat4.multiply(dest, quatMat);\n *     mat4.scale(dest, scale)\n *     mat4.translate(dest, negativeOrigin);\n *\n * @param {mat4} out mat4 receiving operation result\n * @param {quat} q Rotation quaternion\n * @param {vec3} v Translation vector\n * @param {vec3} s Scaling vector\n * @param {vec3} o The origin vector around which to scale and rotate\n * @returns {mat4} out\n */\nmat4.fromRTSOrigin = function (out, q, v, s, o) {\n  // Quaternion math\n  let x = q.x, y = q.y, z = q.z, w = q.w;\n  let x2 = x + x;\n  let y2 = y + y;\n  let z2 = z + z;\n\n  let xx = x * x2;\n  let xy = x * y2;\n  let xz = x * z2;\n  let yy = y * y2;\n  let yz = y * z2;\n  let zz = z * z2;\n  let wx = w * x2;\n  let wy = w * y2;\n  let wz = w * z2;\n\n  let sx = s.x;\n  let sy = s.y;\n  let sz = s.z;\n\n  let ox = o.x;\n  let oy = o.y;\n  let oz = o.z;\n\n  out.m00 = (1 - (yy + zz)) * sx;\n  out.m01 = (xy + wz) * sx;\n  out.m02 = (xz - wy) * sx;\n  out.m03 = 0;\n  out.m04 = (xy - wz) * sy;\n  out.m05 = (1 - (xx + zz)) * sy;\n  out.m06 = (yz + wx) * sy;\n  out.m07 = 0;\n  out.m08 = (xz + wy) * sz;\n  out.m09 = (yz - wx) * sz;\n  out.m10 = (1 - (xx + yy)) * sz;\n  out.m11 = 0;\n  out.m12 = v.x + ox - (out.m00 * ox + out.m04 * oy + out.m08 * oz);\n  out.m13 = v.y + oy - (out.m01 * ox + out.m05 * oy + out.m09 * oz);\n  out.m14 = v.z + oz - (out.m02 * ox + out.m06 * oy + out.m10 * oz);\n  out.m15 = 1;\n\n  return out;\n};\n\n/**\n * Calculates a 4x4 matrix from the given quaternion\n *\n * @param {mat4} out mat4 receiving operation result\n * @param {quat} q Quaternion to create matrix from\n *\n * @returns {mat4} out\n */\nmat4.fromQuat = function (out, q) {\n  let x = q.x, y = q.y, z = q.z, w = q.w;\n  let x2 = x + x;\n  let y2 = y + y;\n  let z2 = z + z;\n\n  let xx = x * x2;\n  let yx = y * x2;\n  let yy = y * y2;\n  let zx = z * x2;\n  let zy = z * y2;\n  let zz = z * z2;\n  let wx = w * x2;\n  let wy = w * y2;\n  let wz = w * z2;\n\n  out.m00 = 1 - yy - zz;\n  out.m01 = yx + wz;\n  out.m02 = zx - wy;\n  out.m03 = 0;\n\n  out.m04 = yx - wz;\n  out.m05 = 1 - xx - zz;\n  out.m06 = zy + wx;\n  out.m07 = 0;\n\n  out.m08 = zx + wy;\n  out.m09 = zy - wx;\n  out.m10 = 1 - xx - yy;\n  out.m11 = 0;\n\n  out.m12 = 0;\n  out.m13 = 0;\n  out.m14 = 0;\n  out.m15 = 1;\n\n  return out;\n};\n\n/**\n * Generates a frustum matrix with the given bounds\n *\n * @param {mat4} out mat4 frustum matrix will be written into\n * @param {Number} left Left bound of the frustum\n * @param {Number} right Right bound of the frustum\n * @param {Number} bottom Bottom bound of the frustum\n * @param {Number} top Top bound of the frustum\n * @param {Number} near Near bound of the frustum\n * @param {Number} far Far bound of the frustum\n * @returns {mat4} out\n */\nmat4.frustum = function (out, left, right, bottom, top, near, far) {\n  let rl = 1 / (right - left);\n  let tb = 1 / (top - bottom);\n  let nf = 1 / (near - far);\n\n  out.m00 = (near * 2) * rl;\n  out.m01 = 0;\n  out.m02 = 0;\n  out.m03 = 0;\n  out.m04 = 0;\n  out.m05 = (near * 2) * tb;\n  out.m06 = 0;\n  out.m07 = 0;\n  out.m08 = (right + left) * rl;\n  out.m09 = (top + bottom) * tb;\n  out.m10 = (far + near) * nf;\n  out.m11 = -1;\n  out.m12 = 0;\n  out.m13 = 0;\n  out.m14 = (far * near * 2) * nf;\n  out.m15 = 0;\n  return out;\n};\n\n/**\n * Generates a perspective projection matrix with the given bounds\n *\n * @param {mat4} out mat4 frustum matrix will be written into\n * @param {number} fovy Vertical field of view in radians\n * @param {number} aspect Aspect ratio. typically viewport width/height\n * @param {number} near Near bound of the frustum\n * @param {number} far Far bound of the frustum\n * @returns {mat4} out\n */\nmat4.perspective = function (out, fovy, aspect, near, far) {\n  let f = 1.0 / Math.tan(fovy / 2);\n  let nf = 1 / (near - far);\n\n  out.m00 = f / aspect;\n  out.m01 = 0;\n  out.m02 = 0;\n  out.m03 = 0;\n  out.m04 = 0;\n  out.m05 = f;\n  out.m06 = 0;\n  out.m07 = 0;\n  out.m08 = 0;\n  out.m09 = 0;\n  out.m10 = (far + near) * nf;\n  out.m11 = -1;\n  out.m12 = 0;\n  out.m13 = 0;\n  out.m14 = (2 * far * near) * nf;\n  out.m15 = 0;\n  return out;\n};\n\n/**\n * Generates a perspective projection matrix with the given field of view.\n * This is primarily useful for generating projection matrices to be used\n * with the still experiemental WebVR API.\n *\n * @param {mat4} out mat4 frustum matrix will be written into\n * @param {Object} fov Object containing the following values: upDegrees, downDegrees, leftDegrees, rightDegrees\n * @param {number} near Near bound of the frustum\n * @param {number} far Far bound of the frustum\n * @returns {mat4} out\n */\nmat4.perspectiveFromFieldOfView = function (out, fov, near, far) {\n  let upTan = Math.tan(fov.upDegrees * Math.PI / 180.0);\n  let downTan = Math.tan(fov.downDegrees * Math.PI / 180.0);\n  let leftTan = Math.tan(fov.leftDegrees * Math.PI / 180.0);\n  let rightTan = Math.tan(fov.rightDegrees * Math.PI / 180.0);\n  let xScale = 2.0 / (leftTan + rightTan);\n  let yScale = 2.0 / (upTan + downTan);\n\n  out.m00 = xScale;\n  out.m01 = 0.0;\n  out.m02 = 0.0;\n  out.m03 = 0.0;\n  out.m04 = 0.0;\n  out.m05 = yScale;\n  out.m06 = 0.0;\n  out.m07 = 0.0;\n  out.m08 = -((leftTan - rightTan) * xScale * 0.5);\n  out.m09 = ((upTan - downTan) * yScale * 0.5);\n  out.m10 = far / (near - far);\n  out.m11 = -1.0;\n  out.m12 = 0.0;\n  out.m13 = 0.0;\n  out.m14 = (far * near) / (near - far);\n  out.m15 = 0.0;\n  return out;\n};\n\n/**\n * Generates a orthogonal projection matrix with the given bounds\n *\n * @param {mat4} out mat4 frustum matrix will be written into\n * @param {number} left Left bound of the frustum\n * @param {number} right Right bound of the frustum\n * @param {number} bottom Bottom bound of the frustum\n * @param {number} top Top bound of the frustum\n * @param {number} near Near bound of the frustum\n * @param {number} far Far bound of the frustum\n * @returns {mat4} out\n */\nmat4.ortho = function (out, left, right, bottom, top, near, far) {\n  let lr = 1 / (left - right);\n  let bt = 1 / (bottom - top);\n  let nf = 1 / (near - far);\n  out.m00 = -2 * lr;\n  out.m01 = 0;\n  out.m02 = 0;\n  out.m03 = 0;\n  out.m04 = 0;\n  out.m05 = -2 * bt;\n  out.m06 = 0;\n  out.m07 = 0;\n  out.m08 = 0;\n  out.m09 = 0;\n  out.m10 = 2 * nf;\n  out.m11 = 0;\n  out.m12 = (left + right) * lr;\n  out.m13 = (top + bottom) * bt;\n  out.m14 = (far + near) * nf;\n  out.m15 = 1;\n  return out;\n};\n\n/**\n * Generates a look-at matrix with the given eye position, focal point, and up axis\n *\n * @param {mat4} out mat4 frustum matrix will be written into\n * @param {vec3} eye Position of the viewer\n * @param {vec3} center Point the viewer is looking at\n * @param {vec3} up vec3 pointing up\n * @returns {mat4} out\n */\nmat4.lookAt = function (out, eye, center, up) {\n  let x0, x1, x2, y0, y1, y2, z0, z1, z2, len;\n  let eyex = eye.x;\n  let eyey = eye.y;\n  let eyez = eye.z;\n  let upx = up.x;\n  let upy = up.y;\n  let upz = up.z;\n  let centerx = center.x;\n  let centery = center.y;\n  let centerz = center.z;\n\n  if (\n    Math.abs(eyex - centerx) < EPSILON &&\n    Math.abs(eyey - centery) < EPSILON &&\n    Math.abs(eyez - centerz) < EPSILON\n  ) {\n    return mat4.identity(out);\n  }\n\n  z0 = eyex - centerx;\n  z1 = eyey - centery;\n  z2 = eyez - centerz;\n\n  len = 1 / Math.sqrt(z0 * z0 + z1 * z1 + z2 * z2);\n  z0 *= len;\n  z1 *= len;\n  z2 *= len;\n\n  x0 = upy * z2 - upz * z1;\n  x1 = upz * z0 - upx * z2;\n  x2 = upx * z1 - upy * z0;\n  len = Math.sqrt(x0 * x0 + x1 * x1 + x2 * x2);\n  if (!len) {\n    x0 = 0;\n    x1 = 0;\n    x2 = 0;\n  } else {\n    len = 1 / len;\n    x0 *= len;\n    x1 *= len;\n    x2 *= len;\n  }\n\n  y0 = z1 * x2 - z2 * x1;\n  y1 = z2 * x0 - z0 * x2;\n  y2 = z0 * x1 - z1 * x0;\n\n  len = Math.sqrt(y0 * y0 + y1 * y1 + y2 * y2);\n  if (!len) {\n    y0 = 0;\n    y1 = 0;\n    y2 = 0;\n  } else {\n    len = 1 / len;\n    y0 *= len;\n    y1 *= len;\n    y2 *= len;\n  }\n\n  out.m00 = x0;\n  out.m01 = y0;\n  out.m02 = z0;\n  out.m03 = 0;\n  out.m04 = x1;\n  out.m05 = y1;\n  out.m06 = z1;\n  out.m07 = 0;\n  out.m08 = x2;\n  out.m09 = y2;\n  out.m10 = z2;\n  out.m11 = 0;\n  out.m12 = -(x0 * eyex + x1 * eyey + x2 * eyez);\n  out.m13 = -(y0 * eyex + y1 * eyey + y2 * eyez);\n  out.m14 = -(z0 * eyex + z1 * eyey + z2 * eyez);\n  out.m15 = 1;\n\n  return out;\n};\n\n/**\n * Returns a string representation of a mat4\n *\n * @param {mat4} a matrix to represent as a string\n * @returns {String} string representation of the matrix\n */\nmat4.str = function (a) {\n  return `mat4(${a.m00}, ${a.m01}, ${a.m02}, ${a.m03}, ${a.m04}, ${a.m05}, ${a.m06}, ${a.m07}, ${a.m08}, ${a.m09}, ${a.m10}, ${a.m11}, ${a.m12}, ${a.m13}, ${a.m14}, ${a.m15})`;\n};\n\n/**\n * Returns typed array\n *\n * @param {array} out\n * @param {mat4} m\n * @returns {array}\n */\nmat4.array = function (out, m) {\n  out[0]  = m.m00;\n  out[1]  = m.m01;\n  out[2]  = m.m02;\n  out[3]  = m.m03;\n  out[4]  = m.m04;\n  out[5]  = m.m05;\n  out[6]  = m.m06;\n  out[7]  = m.m07;\n  out[8]  = m.m08;\n  out[9]  = m.m09;\n  out[10] = m.m10;\n  out[11] = m.m11;\n  out[12] = m.m12;\n  out[13] = m.m13;\n  out[14] = m.m14;\n  out[15] = m.m15;\n\n  return out;\n};\n\n/**\n * Returns Frobenius norm of a mat4\n *\n * @param {mat4} a the matrix to calculate Frobenius norm of\n * @returns {Number} Frobenius norm\n */\nmat4.frob = function (a) {\n  return (Math.sqrt(Math.pow(a.m00, 2) + Math.pow(a.m01, 2) + Math.pow(a.m02, 2) + Math.pow(a.m03, 2) + Math.pow(a.m04, 2) + Math.pow(a.m05, 2) + Math.pow(a.m06, 2) + Math.pow(a.m07, 2) + Math.pow(a.m08, 2) + Math.pow(a.m09, 2) + Math.pow(a.m10, 2) + Math.pow(a.m11, 2) + Math.pow(a.m12, 2) + Math.pow(a.m13, 2) + Math.pow(a.m14, 2) + Math.pow(a.m15, 2)))\n};\n\n/**\n * Adds two mat4's\n *\n * @param {mat4} out the receiving matrix\n * @param {mat4} a the first operand\n * @param {mat4} b the second operand\n * @returns {mat4} out\n */\nmat4.add = function (out, a, b) {\n  out.m00 = a.m00 + b.m00;\n  out.m01 = a.m01 + b.m01;\n  out.m02 = a.m02 + b.m02;\n  out.m03 = a.m03 + b.m03;\n  out.m04 = a.m04 + b.m04;\n  out.m05 = a.m05 + b.m05;\n  out.m06 = a.m06 + b.m06;\n  out.m07 = a.m07 + b.m07;\n  out.m08 = a.m08 + b.m08;\n  out.m09 = a.m09 + b.m09;\n  out.m10 = a.m10 + b.m10;\n  out.m11 = a.m11 + b.m11;\n  out.m12 = a.m12 + b.m12;\n  out.m13 = a.m13 + b.m13;\n  out.m14 = a.m14 + b.m14;\n  out.m15 = a.m15 + b.m15;\n  return out;\n};\n\n/**\n * Subtracts matrix b from matrix a\n *\n * @param {mat4} out the receiving matrix\n * @param {mat4} a the first operand\n * @param {mat4} b the second operand\n * @returns {mat4} out\n */\nmat4.subtract = function (out, a, b) {\n  out.m00 = a.m00 - b.m00;\n  out.m01 = a.m01 - b.m01;\n  out.m02 = a.m02 - b.m02;\n  out.m03 = a.m03 - b.m03;\n  out.m04 = a.m04 - b.m04;\n  out.m05 = a.m05 - b.m05;\n  out.m06 = a.m06 - b.m06;\n  out.m07 = a.m07 - b.m07;\n  out.m08 = a.m08 - b.m08;\n  out.m09 = a.m09 - b.m09;\n  out.m10 = a.m10 - b.m10;\n  out.m11 = a.m11 - b.m11;\n  out.m12 = a.m12 - b.m12;\n  out.m13 = a.m13 - b.m13;\n  out.m14 = a.m14 - b.m14;\n  out.m15 = a.m15 - b.m15;\n  return out;\n};\n\n/**\n * Alias for {@link mat4.subtract}\n * @function\n */\nmat4.sub = mat4.subtract;\n\n/**\n * Multiply each element of the matrix by a scalar.\n *\n * @param {mat4} out the receiving matrix\n * @param {mat4} a the matrix to scale\n * @param {Number} b amount to scale the matrix's elements by\n * @returns {mat4} out\n */\nmat4.multiplyScalar = function (out, a, b) {\n  out.m00 = a.m00 * b;\n  out.m01 = a.m01 * b;\n  out.m02 = a.m02 * b;\n  out.m03 = a.m03 * b;\n  out.m04 = a.m04 * b;\n  out.m05 = a.m05 * b;\n  out.m06 = a.m06 * b;\n  out.m07 = a.m07 * b;\n  out.m08 = a.m08 * b;\n  out.m09 = a.m09 * b;\n  out.m10 = a.m10 * b;\n  out.m11 = a.m11 * b;\n  out.m12 = a.m12 * b;\n  out.m13 = a.m13 * b;\n  out.m14 = a.m14 * b;\n  out.m15 = a.m15 * b;\n  return out;\n};\n\n/**\n * Adds two mat4's after multiplying each element of the second operand by a scalar value.\n *\n * @param {mat4} out the receiving vector\n * @param {mat4} a the first operand\n * @param {mat4} b the second operand\n * @param {Number} scale the amount to scale b's elements by before adding\n * @returns {mat4} out\n */\nmat4.multiplyScalarAndAdd = function (out, a, b, scale) {\n  out.m00 = a.m00 + (b.m00 * scale);\n  out.m01 = a.m01 + (b.m01 * scale);\n  out.m02 = a.m02 + (b.m02 * scale);\n  out.m03 = a.m03 + (b.m03 * scale);\n  out.m04 = a.m04 + (b.m04 * scale);\n  out.m05 = a.m05 + (b.m05 * scale);\n  out.m06 = a.m06 + (b.m06 * scale);\n  out.m07 = a.m07 + (b.m07 * scale);\n  out.m08 = a.m08 + (b.m08 * scale);\n  out.m09 = a.m09 + (b.m09 * scale);\n  out.m10 = a.m10 + (b.m10 * scale);\n  out.m11 = a.m11 + (b.m11 * scale);\n  out.m12 = a.m12 + (b.m12 * scale);\n  out.m13 = a.m13 + (b.m13 * scale);\n  out.m14 = a.m14 + (b.m14 * scale);\n  out.m15 = a.m15 + (b.m15 * scale);\n  return out;\n};\n\n/**\n * Returns whether or not the matrices have exactly the same elements in the same position (when compared with ===)\n *\n * @param {mat4} a The first matrix.\n * @param {mat4} b The second matrix.\n * @returns {Boolean} True if the matrices are equal, false otherwise.\n */\nmat4.exactEquals = function (a, b) {\n  return a.m00 === b.m00 && a.m01 === b.m01 && a.m02 === b.m02 && a.m03 === b.m03 &&\n    a.m04 === b.m04 && a.m05 === b.m05 && a.m06 === b.m06 && a.m07 === b.m07 &&\n    a.m08 === b.m08 && a.m09 === b.m09 && a.m10 === b.m10 && a.m11 === b.m11 &&\n    a.m12 === b.m12 && a.m13 === b.m13 && a.m14 === b.m14 && a.m15 === b.m15;\n};\n\n/**\n * Returns whether or not the matrices have approximately the same elements in the same position.\n *\n * @param {mat4} a The first matrix.\n * @param {mat4} b The second matrix.\n * @returns {Boolean} True if the matrices are equal, false otherwise.\n */\nmat4.equals = function (a, b) {\n  let a0 = a.m00, a1 = a.m01, a2 = a.m02, a3 = a.m03,\n      a4 = a.m04, a5 = a.m05, a6 = a.m06, a7 = a.m07,\n      a8 = a.m08, a9 = a.m09, a10 = a.m10, a11 = a.m11,\n      a12 = a.m12, a13 = a.m13, a14 = a.m14, a15 = a.m15;\n\n  let b0 = b.m00, b1 = b.m01, b2 = b.m02, b3 = b.m03,\n      b4 = b.m04, b5 = b.m05, b6 = b.m06, b7 = b.m07,\n      b8 = b.m08, b9 = b.m09, b10 = b.m10, b11 = b.m11,\n      b12 = b.m12, b13 = b.m13, b14 = b.m14, b15 = b.m15;\n\n  return (\n    Math.abs(a0 - b0) <= EPSILON * Math.max(1.0, Math.abs(a0), Math.abs(b0)) &&\n    Math.abs(a1 - b1) <= EPSILON * Math.max(1.0, Math.abs(a1), Math.abs(b1)) &&\n    Math.abs(a2 - b2) <= EPSILON * Math.max(1.0, Math.abs(a2), Math.abs(b2)) &&\n    Math.abs(a3 - b3) <= EPSILON * Math.max(1.0, Math.abs(a3), Math.abs(b3)) &&\n    Math.abs(a4 - b4) <= EPSILON * Math.max(1.0, Math.abs(a4), Math.abs(b4)) &&\n    Math.abs(a5 - b5) <= EPSILON * Math.max(1.0, Math.abs(a5), Math.abs(b5)) &&\n    Math.abs(a6 - b6) <= EPSILON * Math.max(1.0, Math.abs(a6), Math.abs(b6)) &&\n    Math.abs(a7 - b7) <= EPSILON * Math.max(1.0, Math.abs(a7), Math.abs(b7)) &&\n    Math.abs(a8 - b8) <= EPSILON * Math.max(1.0, Math.abs(a8), Math.abs(b8)) &&\n    Math.abs(a9 - b9) <= EPSILON * Math.max(1.0, Math.abs(a9), Math.abs(b9)) &&\n    Math.abs(a10 - b10) <= EPSILON * Math.max(1.0, Math.abs(a10), Math.abs(b10)) &&\n    Math.abs(a11 - b11) <= EPSILON * Math.max(1.0, Math.abs(a11), Math.abs(b11)) &&\n    Math.abs(a12 - b12) <= EPSILON * Math.max(1.0, Math.abs(a12), Math.abs(b12)) &&\n    Math.abs(a13 - b13) <= EPSILON * Math.max(1.0, Math.abs(a13), Math.abs(b13)) &&\n    Math.abs(a14 - b14) <= EPSILON * Math.max(1.0, Math.abs(a14), Math.abs(b14)) &&\n    Math.abs(a15 - b15) <= EPSILON * Math.max(1.0, Math.abs(a15), Math.abs(b15))\n  );\n};\n\nexport default mat4;","import { EPSILON } from './utils';\n\nlet _tmp = new Array(3);\n\nclass _color3 {\n  constructor(r, g, b) {\n    this.r = r;\n    this.g = g;\n    this.b = b;\n  }\n\n  toJSON() {\n    _tmp[0] = this.r;\n    _tmp[1] = this.g;\n    _tmp[2] = this.b;\n\n    return _tmp;\n  }\n}\n\n/**\n * @class Color\n * @name color3\n */\nlet color3 = {};\n\n/**\n * Creates a new color\n *\n * @returns {color3} a new color\n */\ncolor3.create = function () {\n  return new _color3(1, 1, 1);\n};\n\n/**\n * Creates a new color initialized with the given values\n *\n * @param {Number} r red component\n * @param {Number} g green component\n * @param {Number} b blue component\n * @returns {color3} a new color\n * @function\n */\ncolor3.new = function (r, g, b) {\n  return new _color3(r, g, b);\n};\n\n/**\n * Creates a new color initialized with values from an existing quaternion\n *\n * @param {color3} a color to clone\n * @returns {color3} a new color\n * @function\n */\ncolor3.clone = function (a) {\n  return new _color3(a.r, a.g, a.b, a.a);\n};\n\n/**\n * Copy the values from one color to another\n *\n * @param {color3} out the receiving color\n * @param {color3} a the source color\n * @returns {color3} out\n * @function\n */\ncolor3.copy = function (out, a) {\n  out.r = a.r;\n  out.g = a.g;\n  out.b = a.b;\n  return out;\n};\n\n/**\n * Set the components of a color to the given values\n *\n * @param {color3} out the receiving color\n * @param {Number} r red component\n * @param {Number} g green component\n * @param {Number} b blue component\n * @returns {color3} out\n * @function\n */\ncolor3.set = function (out, r, g, b) {\n  out.r = r;\n  out.g = g;\n  out.b = b;\n  return out;\n};\n\n/**\n * Set from hex\n *\n * @param {color3} out the receiving color\n * @param {Number} hex\n * @returns {color3} out\n * @function\n */\ncolor3.fromHex = function (out, hex) {\n  let r = ((hex >> 16)) / 255.0;\n  let g = ((hex >> 8) & 0xff) / 255.0;\n  let b = ((hex) & 0xff) / 255.0;\n\n  out.r = r;\n  out.g = g;\n  out.b = b;\n  return out;\n};\n\n/**\n * Adds two color's\n *\n * @param {color3} out the receiving color\n * @param {color3} a the first operand\n * @param {color3} b the second operand\n * @returns {color3} out\n * @function\n */\ncolor3.add = function (out, a, b) {\n  out.r = a.r + b.r;\n  out.g = a.g + b.g;\n  out.b = a.b + b.b;\n  return out;\n};\n\n/**\n * Subtracts color b from color a\n *\n * @param {color3} out the receiving color\n * @param {color3} a the first operand\n * @param {color3} b the second operand\n * @returns {color3} out\n */\ncolor3.subtract = function (out, a, b) {\n  out.r = a.r - b.r;\n  out.g = a.g - b.g;\n  out.b = a.b - b.b;\n  return out;\n};\n\n/**\n * Alias for {@link color3.subtract}\n * @function\n */\ncolor3.sub = color3.subtract;\n\n/**\n * Multiplies two color's\n *\n * @param {color3} out the receiving color\n * @param {color3} a the first operand\n * @param {color3} b the second operand\n * @returns {color3} out\n * @function\n */\ncolor3.multiply = function (out, a, b) {\n  out.r = a.r * b.r;\n  out.g = a.g * b.g;\n  out.b = a.b * b.b;\n  return out;\n};\n\n/**\n * Alias for {@link color3.multiply}\n * @function\n */\ncolor3.mul = color3.multiply;\n\n/**\n * Divides two color's\n *\n * @param {color3} out the receiving vector\n * @param {color3} a the first operand\n * @param {color3} b the second operand\n * @returns {color3} out\n */\ncolor3.divide = function (out, a, b) {\n  out.r = a.r / b.r;\n  out.g = a.g / b.g;\n  out.b = a.b / b.b;\n  return out;\n};\n\n/**\n * Alias for {@link color3.divide}\n * @function\n */\ncolor3.div = color3.divide;\n\n\n/**\n * Scales a color by a scalar number\n *\n * @param {color3} out the receiving vector\n * @param {color3} a the vector to scale\n * @param {Number} b amount to scale the vector by\n * @returns {color3} out\n * @function\n */\ncolor3.scale = function (out, a, b) {\n  out.r = a.r * b;\n  out.g = a.g * b;\n  out.b = a.b * b;\n  return out;\n};\n\n/**\n * Performs a linear interpolation between two color's\n *\n * @param {color3} out the receiving color\n * @param {color3} a the first operand\n * @param {color3} b the second operand\n * @param {Number} t interpolation amount between the two inputs\n * @returns {color3} out\n * @function\n */\ncolor3.lerp = function (out, a, b, t) {\n  let ar = a.r,\n      ag = a.g,\n      ab = a.b;\n  out.r = ar + t * (b.r - ar);\n  out.g = ag + t * (b.g - ag);\n  out.b = ab + t * (b.b - ab);\n  return out;\n};\n\n/**\n * Returns a string representation of a color\n *\n * @param {color3} a vector to represent as a string\n * @returns {String} string representation of the vector\n */\ncolor3.str = function (a) {\n  return `color3(${a.r}, ${a.g}, ${a.b})`;\n};\n\n/**\n * Returns typed array\n *\n * @param {array} out\n * @param {color3} a\n * @returns {array}\n */\ncolor3.array = function (out, a) {\n  out[0] = a.r;\n  out[1] = a.g;\n  out[2] = a.b;\n\n  return out;\n};\n\n/**\n * Returns whether or not the color have exactly the same elements in the same position (when compared with ===)\n *\n * @param {color3} a The first color3.\n * @param {color3} b The second color3.\n * @returns {Boolean} True if the colors are equal, false otherwise.\n */\ncolor3.exactEquals = function (a, b) {\n  return a.r === b.r && a.g === b.g && a.b === b.b;\n};\n\n/**\n * Returns whether or not the colors have approximately the same elements in the same position.\n *\n * @param {color3} a The first color3.\n * @param {color3} b The second color3.\n * @returns {Boolean} True if the colors are equal, false otherwise.\n */\ncolor3.equals = function (a, b) {\n  let a0 = a.r, a1 = a.g, a2 = a.b;\n  let b0 = b.r, b1 = b.g, b2 = b.b;\n  return (Math.abs(a0 - b0) <= EPSILON * Math.max(1.0, Math.abs(a0), Math.abs(b0)) &&\n    Math.abs(a1 - b1) <= EPSILON * Math.max(1.0, Math.abs(a1), Math.abs(b1)) &&\n    Math.abs(a2 - b2) <= EPSILON * Math.max(1.0, Math.abs(a2), Math.abs(b2)));\n};\n\n/**\n * Returns the hex value\n *\n * @param {color3} a The color\n * @returns {Number}\n */\ncolor3.hex = function (a) {\n  return (a.r * 255) << 16 | (a.g * 255) << 8 | (a.b * 255);\n};\n\nexport default color3;","import { EPSILON } from './utils';\n\nlet _tmp = new Array(4);\n\nclass _color4 {\n  constructor(r, g, b, a) {\n    this.r = r;\n    this.g = g;\n    this.b = b;\n    this.a = a;\n  }\n\n  toJSON() {\n    _tmp[0] = this.r;\n    _tmp[1] = this.g;\n    _tmp[2] = this.b;\n    _tmp[3] = this.a;\n\n    return _tmp;\n  }\n}\n\n/**\n * @class Color\n * @name color4\n */\nlet color4 = {};\n\n/**\n * Creates a new color\n *\n * @returns {color4} a new color\n */\ncolor4.create = function () {\n  return new _color4(1, 1, 1, 1);\n};\n\n/**\n * Creates a new color initialized with the given values\n *\n * @param {Number} r red component\n * @param {Number} g green component\n * @param {Number} b blue component\n * @param {Number} a alpha component\n * @returns {color4} a new color\n * @function\n */\ncolor4.new = function (r, g, b, a) {\n  return new _color4(r, g, b, a);\n};\n\n/**\n * Creates a new color initialized with values from an existing quaternion\n *\n * @param {color4} a color to clone\n * @returns {color4} a new color\n * @function\n */\ncolor4.clone = function (a) {\n  return new _color4(a.r, a.g, a.b, a.a);\n};\n\n/**\n * Copy the values from one color to another\n *\n * @param {color4} out the receiving color\n * @param {color4} a the source color\n * @returns {color4} out\n * @function\n */\ncolor4.copy = function (out, a) {\n  out.r = a.r;\n  out.g = a.g;\n  out.b = a.b;\n  out.a = a.a;\n  return out;\n};\n\n/**\n * Set the components of a color to the given values\n *\n * @param {color4} out the receiving color\n * @param {Number} r red component\n * @param {Number} g green component\n * @param {Number} b blue component\n * @param {Number} a alpha component\n * @returns {color4} out\n * @function\n */\ncolor4.set = function (out, r, g, b, a) {\n  out.r = r;\n  out.g = g;\n  out.b = b;\n  out.a = a;\n  return out;\n};\n\n/**\n * Set from hex\n *\n * @param {color4} out the receiving color\n * @param {Number} hex\n * @returns {color4} out\n * @function\n */\ncolor4.fromHex = function (out, hex) {\n  let r = ((hex >> 24)) / 255.0;\n  let g = ((hex >> 16) & 0xff) / 255.0;\n  let b = ((hex >> 8) & 0xff) / 255.0;\n  let a = ((hex) & 0xff) / 255.0;\n\n  out.r = r;\n  out.g = g;\n  out.b = b;\n  out.a = a;\n  return out;\n};\n\n/**\n * Adds two color's\n *\n * @param {color4} out the receiving color\n * @param {color4} a the first operand\n * @param {color4} b the second operand\n * @returns {color4} out\n * @function\n */\ncolor4.add = function (out, a, b) {\n  out.r = a.r + b.r;\n  out.g = a.g + b.g;\n  out.b = a.b + b.b;\n  out.a = a.a + b.a;\n  return out;\n};\n\n/**\n * Subtracts color b from color a\n *\n * @param {color4} out the receiving color\n * @param {color4} a the first operand\n * @param {color4} b the second operand\n * @returns {color4} out\n */\ncolor4.subtract = function (out, a, b) {\n  out.r = a.r - b.r;\n  out.g = a.g - b.g;\n  out.b = a.b - b.b;\n  out.a = a.a - b.a;\n  return out;\n};\n\n/**\n * Alias for {@link color4.subtract}\n * @function\n */\ncolor4.sub = color4.subtract;\n\n/**\n * Multiplies two color's\n *\n * @param {color4} out the receiving color\n * @param {color4} a the first operand\n * @param {color4} b the second operand\n * @returns {color4} out\n * @function\n */\ncolor4.multiply = function (out, a, b) {\n  out.r = a.r * b.r;\n  out.g = a.g * b.g;\n  out.b = a.b * b.b;\n  out.a = a.a * b.a;\n  return out;\n};\n\n/**\n * Alias for {@link color4.multiply}\n * @function\n */\ncolor4.mul = color4.multiply;\n\n/**\n * Divides two color's\n *\n * @param {color4} out the receiving vector\n * @param {color4} a the first operand\n * @param {color4} b the second operand\n * @returns {color4} out\n */\ncolor4.divide = function (out, a, b) {\n  out.r = a.r / b.r;\n  out.g = a.g / b.g;\n  out.b = a.b / b.b;\n  out.a = a.a / b.a;\n  return out;\n};\n\n/**\n * Alias for {@link color4.divide}\n * @function\n */\ncolor4.div = color4.divide;\n\n\n/**\n * Scales a color by a scalar number\n *\n * @param {color4} out the receiving vector\n * @param {color4} a the vector to scale\n * @param {Number} b amount to scale the vector by\n * @returns {color4} out\n * @function\n */\ncolor4.scale = function (out, a, b) {\n  out.r = a.r * b;\n  out.g = a.g * b;\n  out.b = a.b * b;\n  out.a = a.a * b;\n  return out;\n};\n\n/**\n * Performs a linear interpolation between two color's\n *\n * @param {color4} out the receiving color\n * @param {color4} a the first operand\n * @param {color4} b the second operand\n * @param {Number} t interpolation amount between the two inputs\n * @returns {color4} out\n * @function\n */\ncolor4.lerp = function (out, a, b, t) {\n  let ar = a.r,\n      ag = a.g,\n      ab = a.b,\n      aa = a.a;\n  out.r = ar + t * (b.r - ar);\n  out.g = ag + t * (b.g - ag);\n  out.b = ab + t * (b.b - ab);\n  out.a = aa + t * (b.a - aa);\n  return out;\n};\n\n/**\n * Returns a string representation of a color\n *\n * @param {color4} a vector to represent as a string\n * @returns {String} string representation of the vector\n */\ncolor4.str = function (a) {\n  return `color4(${a.r}, ${a.g}, ${a.b}, ${a.a})`;\n};\n\n/**\n * Returns typed array\n *\n * @param {array} out\n * @param {color4} a\n * @returns {array}\n */\ncolor4.array = function (out, a) {\n  out[0] = a.r;\n  out[1] = a.g;\n  out[2] = a.b;\n  out[3] = a.a;\n\n  return out;\n};\n\n/**\n * Returns whether or not the color have exactly the same elements in the same position (when compared with ===)\n *\n * @param {color4} a The first color4.\n * @param {color4} b The second color4.\n * @returns {Boolean} True if the colors are equal, false otherwise.\n */\ncolor4.exactEquals = function (a, b) {\n  return a.r === b.r && a.g === b.g && a.b === b.b && a.a === b.a;\n};\n\n/**\n * Returns whether or not the colors have approximately the same elements in the same position.\n *\n * @param {color4} a The first color4.\n * @param {color4} b The second color4.\n * @returns {Boolean} True if the colors are equal, false otherwise.\n */\ncolor4.equals = function (a, b) {\n  let a0 = a.r, a1 = a.g, a2 = a.b, a3 = a.a;\n  let b0 = b.r, b1 = b.g, b2 = b.b, b3 = b.a;\n  return (Math.abs(a0 - b0) <= EPSILON * Math.max(1.0, Math.abs(a0), Math.abs(b0)) &&\n    Math.abs(a1 - b1) <= EPSILON * Math.max(1.0, Math.abs(a1), Math.abs(b1)) &&\n    Math.abs(a2 - b2) <= EPSILON * Math.max(1.0, Math.abs(a2), Math.abs(b2)) &&\n    Math.abs(a3 - b3) <= EPSILON * Math.max(1.0, Math.abs(a3), Math.abs(b3)));\n};\n\n/**\n * Returns the hex value\n *\n * @param {color4} a The color\n * @returns {Number}\n */\ncolor4.hex = function (a) {\n  return ((a.r * 255) << 24 | (a.g * 255) << 16 | (a.b * 255) << 8 | a.a * 255) >>> 0;\n};\n\nexport default color4;","export * from './lib/utils';\n\n// NOTE: there is no syntax for: export {* as bits} from './lib/bits';\nimport * as bits_ from './lib/bits';\nexport let bits = bits_;\n\nexport { default as vec2 } from './lib/vec2';\nexport { default as vec3 } from './lib/vec3';\nexport { default as vec4 } from './lib/vec4';\nexport { default as quat } from './lib/quat';\nexport { default as mat2 } from './lib/mat2';\nexport { default as mat23 } from './lib/mat23';\nexport { default as mat3 } from './lib/mat3';\nexport { default as mat4 } from './lib/mat4';\nexport { default as color3 } from './lib/color3';\nexport { default as color4 } from './lib/color4';"],"names":["const","let","nextPow2","_tmp","s"],"mappings":"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AAG,CAAC,CAAC,GAAG,EAAE,EAAE,GAAG,CAAC,CAAC,GAAG,EAAE,EAAE,GAAG,CAAC,CAAC,GAAG,CAAC;EAC/G;IACE,IAAI,CAAC,GAAG,CAAC,EAAE,GAAG,EAAE,CAAC,IAAI,OAAO,GAAG,IAAI,CAAC,GAAG,CAAC,GAAG,EAAE,IAAI,CAAC,GAAG,CAAC,EAAE,CAAC,EAAE,IAAI,CAAC,GAAG,CAAC,EAAE,CAAC,CAAC;IACxE,IAAI,CAAC,GAAG,CAAC,EAAE,GAAG,EAAE,CAAC,IAAI,OAAO,GAAG,IAAI,CAAC,GAAG,CAAC,GAAG,EAAE,IAAI,CAAC,GAAG,CAAC,EAAE,CAAC,EAAE,IAAI,CAAC,GAAG,CAAC,EAAE,CAAC,CAAC;IACxE,IAAI,CAAC,GAAG,CAAC,EAAE,GAAG,EAAE,CAAC,IAAI,OAAO,GAAG,IAAI,CAAC,GAAG,CAAC,GAAG,EAAE,IAAI,CAAC,GAAG,CAAC,EAAE,CAAC,EAAE,IAAI,CAAC,GAAG,CAAC,EAAE,CAAC,CAAC;IACxE,IAAI,CAAC,GAAG,CAAC,EAAE,GAAG,EAAE,CAAC,IAAI,OAAO,GAAG,IAAI,CAAC,GAAG,CAAC,GAAG,EAAE,IAAI,CAAC,GAAG,CAAC,EAAE,CAAC,EAAE,IAAI,CAAC,GAAG,CAAC,EAAE,CAAC,CAAC;IACxE,IAAI,CAAC,GAAG,CAAC,EAAE,GAAG,EAAE,CAAC,IAAI,OAAO,GAAG,IAAI,CAAC,GAAG,CAAC,GAAG,EAAE,IAAI,CAAC,GAAG,CAAC,EAAE,CAAC,EAAE,IAAI,CAAC,GAAG,CAAC,EAAE,CAAC,CAAC;IACxE,IAAI,CAAC,GAAG,CAAC,EAAE,GAAG,EAAE,CAAC,IAAI,OAAO,GAAG,IAAI,CAAC,GAAG,CAAC,GAAG,EAAE,IAAI,CAAC,GAAG,CAAC,EAAE,CAAC,EAAE,IAAI,CAAC,GAAG,CAAC,EAAE,CAAC,CAAC;IACxE,IAAI,CAAC,GAAG,CAAC,EAAE,GAAG,EAAE,CAAC,IAAI,OAAO,GAAG,IAAI,CAAC,GAAG,CAAC,GAAG,EAAE,IAAI,CAAC,GAAG,CAAC,EAAE,CAAC,EAAE,IAAI,CAAC,GAAG,CAAC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AAG,GAAG,GAAG,GAAG,GAAG,GAAG,GAAG,GAAG,GAAG,IAAI,GAAG,CAAC;EACpD,GAAG,CAAC,GAAG,GAAG,CAAC,GAAG,GAAG,GAAG,GAAG,GAAG,GAAG,GAAG,GAAG,GAAG,GAAG,GAAG,IAAI,GAAG,CAAC;EACpD,GAAG,CAAC,GAAG,GAAG,CAAC,GAAG,GAAG,GAAG,GAAG,GAAG,GAAG,GAAG,GAAG,GAAG,GAAG,GAAG,IAAI,GAAG,CAAC;EACpD,GAAG,CAAC,GAAG,GAAG,CAAC,GAAG,GAAG,GAAG,GAAG,GAAG,GAAG,GAAG,GAAG,GAAG,GAAG,GAAG,IAAI,GAAG,CAAC;EACpD,GAAG,CAAC,GAAG,GAAG,CAAC,GAAG,GAAG,GAAG,GAAG,GAAG,GAAG,GAAG,GAAG,GAAG,GAAG,GAAG,IAAI,GAAG,CAAC;EACpD,GAAG,CAAC,GAAG,GAAG,CAAC,GAAG,GAAG,GAAG,GAAG,GAAG,GAAG,GAAG,GAAG,GAAG,GAAG,GAAG,IAAI,GAAG,CAAC;EACpD,GAAG,CAAC,GAAG,GAAG,CAAC,GAAG,GAAG,GAAG,GAAG,GAAG,GAAG,GAAG,GAAG,GAAG,GAAG,GAAG,IAAI,GAAG,CAAC;EACpD,GAAG,CAAC,GAAG,GAAG,CAAC,GAAG,GAAG,GAAG,GAAG,GAAG,GAAG,GAAG,GAAG,GAAG,GAAG,GAAG,IAAI,GAAG,CAAC;EACpD,GAAG,CAAC,GAAG,GAAG,CAAC,GAAG,GAAG,GAAG,GAAG,GAAG,GAAG,GAAG,GAAG,GAAG,GAAG,GAAG,IAAI,GAAG,CAAC;EACpD,GAAG,CAAC,GAAG,GAAG,CAAC,GAAG,GAAG,GAAG,GAAG,GAAG,GAAG,GAAG,GAAG,GAAG,GAAG,GAAG,IAAI,GAAG,CAAC;EACpD,GAAG,CAAC,GAAG,GAAG,CAAC,GAAG,GAAG,GAAG,GAAG,GAAG,GAAG,GAAG,GAAG,GAAG,GAAG,GAAG,IAAI,GAAG,CAAC;EACpD,GAAG,CAAC,GAAG,GAAG,CAAC,GAAG,GAAG,GAAG,GAAG,GAAG,GAAG,GAAG,GAAG,GAAG,GAAG,GAAG,IAAI,GAAG,CAAC;;EAEpD,OAAO,GAAG,CAAC;CACZ,CAAC;;;;;;;;;AASF,IAAI,CAAC,OAAO,GAAG,UAAU,GAAG,EAAE,CAAC,EAAE;EAC/BA,IAAI,GAAG,GAAG,CAAC,CAAC,GAAG,EAAE,GAAG,GAAG,CAAC,CAAC,GAAG,EAAE,GAAG,GAAG,CAAC,CAAC,GAAG,EAAE,GAAG,GAAG,CAAC,CAAC,GAAG;MAClD,GAAG,GAAG,CAAC,CAAC,GAAG,EAAE,GAAG,GAAG,CAAC,CAAC,GAAG,EAAE,GAAG,GAAG,CAAC,CAAC,GAAG,EAAE,GAAG,GAAG,CAAC,CAAC,GAAG;MAClD,GAAG,GAAG,CAAC,CAAC,GAAG,EAAE,GAAG,GAAG,CAAC,CAAC,GAAG,EAAE,GAAG,GAAG,CAAC,CAAC,GAAG,EAAE,GAAG,GAAG,CAAC,CAAC,GAAG;MAClD,GAAG,GAAG,CAAC,CAAC,GAAG,EAAE,GAAG,GAAG,CAAC,CAAC,GAAG,EAAE,GAAG,GAAG,CAAC,CAAC,GAAG,EAAE,GAAG,GAAG,CAAC,CAAC,GAAG,CAAC;;EAEvD,GAAG,CAAC,GAAG,IAAI,GAAG,IAAI,GAAG,GAAG,GAAG,GAAG,GAAG,GAAG,GAAG,CAAC,GAAG,GAAG,IAAI,GAAG,GAAG,GAAG,GAAG,GAAG,GAAG,GAAG,CAAC,GAAG,GAAG,IAAI,GAAG,GAAG,GAAG,GAAG,GAAG,GAAG,GAAG,CAAC,CAAC,CAAC;EAC1G,GAAG,CAAC,GAAG,GAAG,EAAE,GAAG,IAAI,GAAG,GAAG,GAAG,GAAG,GAAG,GAAG,GAAG,CAAC,GAAG,GAAG,IAAI,GAAG,GAAG,GAAG,GAAG,GAAG,GAAG,GAAG,CAAC,GAAG,GAAG,IAAI,GAAG,GAAG,GAAG,GAAG,GAAG,GAAG,GAAG,CAAC,CAAC,CAAC;EAC3G,GAAG,CAAC,GAAG,IAAI,GAAG,IAAI,GAAG,GAAG,GAAG,GAAG,GAAG,GAAG,GAAG,CAAC,GAAG,GAAG,IAAI,GAAG,GAAG,GAAG,GAAG,GAAG,GAAG,GAAG,CAAC,GAAG,GAAG,IAAI,GAAG,GAAG,GAAG,GAAG,GAAG,GAAG,GAAG,CAAC,CAAC,CAAC;EAC1G,GAAG,CAAC,GAAG,GAAG,EAAE,GAAG,IAAI,GAAG,GAAG,GAAG,GAAG,GAAG,GAAG,GAAG,CAAC,GAAG,GAAG,IAAI,GAAG,GAAG,GAAG,GAAG,GAAG,GAAG,GAAG,CAAC,GAAG,GAAG,IAAI,GAAG,GAAG,GAAG,GAAG,GAAG,GAAG,GAAG,CAAC,CAAC,CAAC;EAC3G,GAAG,CAAC,GAAG,GAAG,EAAE,GAAG,IAAI,GAAG,GAAG,GAAG,GAAG,GAAG,GAAG,GAAG,CAAC,GAAG,GAAG,IAAI,GAAG,GAAG,GAAG,GAAG,GAAG,GAAG,GAAG,CAAC,GAAG,GAAG,IAAI,GAAG,GAAG,GAAG,GAAG,GAAG,GAAG,GAAG,CAAC,CAAC,CAAC;EAC3G,GAAG,CAAC,GAAG,IAAI,GAAG,IAAI,GAAG,GAAG,GAAG,GAAG,GAAG,GAAG,GAAG,CAAC,GAAG,GAAG,IAAI,GAAG,GAAG,GAAG,GAAG,GAAG,GAAG,GAAG,CAAC,GAAG,GAAG,IAAI,GAAG,GAAG,GAAG,GAAG,GAAG,GAAG,GAAG,CAAC,CAAC,CAAC;EAC1G,GAAG,CAAC,GAAG,GAAG,EAAE,GAAG,IAAI,GAAG,GAAG,GAAG,GAAG,GAAG,GAAG,GAAG,CAAC,GAAG,GAAG,IAAI,GAAG,GAAG,GAAG,GAAG,GAAG,GAAG,GAAG,CAAC,GAAG,GAAG,IAAI,GAAG,GAAG,GAAG,GAAG,GAAG,GAAG,GAAG,CAAC,CAAC,CAAC;EAC3G,GAAG,CAAC,GAAG,IAAI,GAAG,IAAI,GAAG,GAAG,GAAG,GAAG,GAAG,GAAG,GAAG,CAAC,GAAG,GAAG,IAAI,GAAG,GAAG,GAAG,GAAG,GAAG,GAAG,GAAG,CAAC,GAAG,GAAG,IAAI,GAAG,GAAG,GAAG,GAAG,GAAG,GAAG,GAAG,CAAC,CAAC,CAAC;EAC1G,GAAG,CAAC,GAAG,IAAI,GAAG,IAAI,GAAG,GAAG,GAAG,GAAG,GAAG,GAAG,GAAG,CAAC,GAAG,GAAG,IAAI,GAAG,GAAG,GAAG,GAAG,GAAG,GAAG,GAAG,CAAC,GAAG,GAAG,IAAI,GAAG,GAAG,GAAG,GAAG,GAAG,GAAG,GAAG,CAAC,CAAC,CAAC;EAC1G,GAAG,CAAC,GAAG,GAAG,EAAE,GAAG,IAAI,GAAG,GAAG,GAAG,GAAG,GAAG,GAAG,GAAG,CAAC,GAAG,GAAG,IAAI,GAAG,GAAG,GAAG,GAAG,GAAG,GAAG,GAAG,CAAC,GAAG,GAAG,IAAI,GAAG,GAAG,GAAG,GAAG,GAAG,GAAG,GAAG,CAAC,CAAC,CAAC;EAC3G,GAAG,CAAC,GAAG,IAAI,GAAG,IAAI,GAAG,GAAG,GAAG,GAAG,GAAG,GAAG,GAAG,CAAC,GAAG,GAAG,IAAI,GAAG,GAAG,GAAG,GAAG,GAAG,GAAG,GAAG,CAAC,GAAG,GAAG,IAAI,GAAG,GAAG,GAAG,GAAG,GAAG,GAAG,GAAG,CAAC,CAAC,CAAC;EAC1G,GAAG,CAAC,GAAG,GAAG,EAAE,GAAG,IAAI,GAAG,GAAG,GAAG,GAAG,GAAG,GAAG,GAAG,CAAC,GAAG,GAAG,IAAI,GAAG,GAAG,GAAG,GAAG,GAAG,GAAG,GAAG,CAAC,GAAG,GAAG,IAAI,GAAG,GAAG,GAAG,GAAG,GAAG,GAAG,GAAG,CAAC,CAAC,CAAC;EAC3G,GAAG,CAAC,GAAG,GAAG,EAAE,GAAG,IAAI,GAAG,GAAG,GAAG,GAAG,GAAG,GAAG,GAAG,CAAC,GAAG,GAAG,IAAI,GAAG,GAAG,GAAG,GAAG,GAAG,GAAG,GAAG,CAAC,GAAG,GAAG,IAAI,GAAG,GAAG,GAAG,GAAG,GAAG,GAAG,GAAG,CAAC,CAAC,CAAC;EAC3G,GAAG,CAAC,GAAG,IAAI,GAAG,IAAI,GAAG,GAAG,GAAG,GAAG,GAAG,GAAG,GAAG,CAAC,GAAG,GAAG,IAAI,GAAG,GAAG,GAAG,GAAG,GAAG,GAAG,GAAG,CAAC,GAAG,GAAG,IAAI,GAAG,GAAG,GAAG,GAAG,GAAG,GAAG,GAAG,CAAC,CAAC,CAAC;EAC1G,GAAG,CAAC,GAAG,GAAG,EAAE,GAAG,IAAI,GAAG,GAAG,GAAG,GAAG,GAAG,GAAG,GAAG,CAAC,GAAG,GAAG,IAAI,GAAG,GAAG,GAAG,GAAG,GAAG,GAAG,GAAG,CAAC,GAAG,GAAG,IAAI,GAAG,GAAG,GAAG,GAAG,GAAG,GAAG,GAAG,CAAC,CAAC,CAAC;EAC3G,GAAG,CAAC,GAAG,IAAI,GAAG,IAAI,GAAG,GAAG,GAAG,GAAG,GAAG,GAAG,GAAG,CAAC,GAAG,GAAG,IAAI,GAAG,GAAG,GAAG,GAAG,GAAG,GAAG,GAAG,CAAC,GAAG,GAAG,IAAI,GAAG,GAAG,GAAG,GAAG,GAAG,GAAG,GAAG,CAAC,CAAC,CAAC;EAC1G,OAAO,GAAG,CAAC;CACZ,CAAC;;;;;;;;AAQF,IAAI,CAAC,WAAW,GAAG,UAAU,CAAC,EAAE;EAC9BA,IAAI,GAAG,GAAG,CAAC,CAAC,GAAG,EAAE,GAAG,GAAG,CAAC,CAAC,GAAG,EAAE,GAAG,GAAG,CAAC,CAAC,GAAG,EAAE,GAAG,GAAG,CAAC,CAAC,GAAG;MAClD,GAAG,GAAG,CAAC,CAAC,GAAG,EAAE,GAAG,GAAG,CAAC,CAAC,GAAG,EAAE,GAAG,GAAG,CAAC,CAAC,GAAG,EAAE,GAAG,GAAG,CAAC,CAAC,GAAG;MAClD,GAAG,GAAG,CAAC,CAAC,GAAG,EAAE,GAAG,GAAG,CAAC,CAAC,GAAG,EAAE,GAAG,GAAG,CAAC,CAAC,GAAG,EAAE,GAAG,GAAG,CAAC,CAAC,GAAG;MAClD,GAAG,GAAG,CAAC,CAAC,GAAG,EAAE,GAAG,GAAG,CAAC,CAAC,GAAG,EAAE,GAAG,GAAG,CAAC,CAAC,GAAG,EAAE,GAAG,GAAG,CAAC,CAAC,GAAG,CAAC;;EAEvDA,IAAI,GAAG,GAAG,GAAG,GAAG,GAAG,GAAG,GAAG,GAAG,GAAG,CAAC;EAChCA,IAAI,GAAG,GAAG,GAAG,GAAG,GAAG,GAAG,GAAG,GAAG,GAAG,CAAC;EAChCA,IAAI,GAAG,GAAG,GAAG,GAAG,GAAG,GAAG,GAAG,GAAG,GAAG,CAAC;EAChCA,IAAI,GAAG,GAAG,GAAG,GAAG,GAAG,GAAG,GAAG,GAAG,GAAG,CAAC;EAChCA,IAAI,GAAG,GAAG,GAAG,GAAG,GAAG,GAAG,GAAG,GAAG,GAAG,CAAC;EAChCA,IAAI,GAAG,GAAG,GAAG,GAAG,GAAG,GAAG,GAAG,GAAG,GAAG,CAAC;EAChCA,IAAI,GAAG,GAAG,GAAG,GAAG,GAAG,GAAG,GAAG,GAAG,GAAG,CAAC;EAChCA,IAAI,GAAG,GAAG,GAAG,GAAG,GAAG,GAAG,GAAG,GAAG,GAAG,CAAC;EAChCA,IAAI,GAAG,GAAG,GAAG,GAAG,GAAG,GAAG,GAAG,GAAG,GAAG,CAAC;EAChCA,IAAI,GAAG,GAAG,GAAG,GAAG,GAAG,GAAG,GAAG,GAAG,GAAG,CAAC;EAChCA,IAAI,GAAG,GAAG,GAAG,GAAG,GAAG,GAAG,GAAG,GAAG,GAAG,CAAC;EAChCA,IAAI,GAAG,GAAG,GAAG,GAAG,GAAG,GAAG,GAAG,GAAG,GAAG,CAAC;;;EAGhC,OAAO,GAAG,GAAG,GAAG,GAAG,GAAG,GAAG,GAAG,GAAG,GAAG,GAAG,GAAG,GAAG,GAAG,GAAG,GAAG,GAAG,GAAG,GAAG,GAAG,GAAG,GAAG,GAAG,GAAG,CAAC;CAC9E,CAAC;;;;;;;;;;AAUF,IAAI,CAAC,QAAQ,GAAG,UAAU,GAAG,EAAE,CAAC,EAAE,CAAC,EAAE;EACnCA,IAAI,GAAG,GAAG,CAAC,CAAC,GAAG,EAAE,GAAG,GAAG,CAAC,CAAC,GAAG,EAAE,GAAG,GAAG,CAAC,CAAC,GAAG,EAAE,GAAG,GAAG,CAAC,CAAC,GAAG;MAClD,GAAG,GAAG,CAAC,CAAC,GAAG,EAAE,GAAG,GAAG,CAAC,CAAC,GAAG,EAAE,GAAG,GAAG,CAAC,CAAC,GAAG,EAAE,GAAG,GAAG,CAAC,CAAC,GAAG;MAClD,GAAG,GAAG,CAAC,CAAC,GAAG,EAAE,GAAG,GAAG,CAAC,CAAC,GAAG,EAAE,GAAG,GAAG,CAAC,CAAC,GAAG,EAAE,GAAG,GAAG,CAAC,CAAC,GAAG;MAClD,GAAG,GAAG,CAAC,CAAC,GAAG,EAAE,GAAG,GAAG,CAAC,CAAC,GAAG,EAAE,GAAG,GAAG,CAAC,CAAC,GAAG,EAAE,GAAG,GAAG,CAAC,CAAC,GAAG,CAAC;;;EAGvDA,IAAI,EAAE,GAAG,CAAC,CAAC,GAAG,EAAE,EAAE,GAAG,CAAC,CAAC,GAAG,EAAE,EAAE,GAAG,CAAC,CAAC,GAAG,EAAE,EAAE,GAAG,CAAC,CAAC,GAAG,CAAC;EACnD,GAAG,CAAC,GAAG,GAAG,EAAE,GAAG,GAAG,GAAG,EAAE,GAAG,GAAG,GAAG,EAAE,GAAG,GAAG,GAAG,EAAE,GAAG,GAAG,CAAC;EACpD,GAAG,CAAC,GAAG,GAAG,EAAE,GAAG,GAAG,GAAG,EAAE,GAAG,GAAG,GAAG,EAAE,GAAG,GAAG,GAAG,EAAE,GAAG,GAAG,CAAC;EACpD,GAAG,CAAC,GAAG,GAAG,EAAE,GAAG,GAAG,GAAG,EAAE,GAAG,GAAG,GAAG,EAAE,GAAG,GAAG,GAAG,EAAE,GAAG,GAAG,CAAC;EACpD,GAAG,CAAC,GAAG,GAAG,EAAE,GAAG,GAAG,GAAG,EAAE,GAAG,GAAG,GAAG,EAAE,GAAG,GAAG,GAAG,EAAE,GAAG,GAAG,CAAC;;EAEpD,EAAE,GAAG,CAAC,CAAC,GAAG,CAAC,CAAC,EAAE,GAAG,CAAC,CAAC,GAAG,CAAC,CAAC,EAAE,GAAG,CAAC,CAAC,GAAG,CAAC,CAAC,EAAE,GAAG,CAAC,CAAC,GAAG,CAAC;EAC/C,GAAG,CAAC,GAAG,GAAG,EAAE,GAAG,GAAG,GAAG,EAAE,GAAG,GAAG,GAAG,EAAE,GAAG,GAAG,GAAG,EAAE,GAAG,GAAG,CAAC;EACpD,GAAG,CAAC,GAAG,GAAG,EAAE,GAAG,GAAG,GAAG,EAAE,GAAG,GAAG,GAAG,EAAE,GAAG,GAAG,GAAG,EAAE,GAAG,GAAG,CAAC;EACpD,GAAG,CAAC,GAAG,GAAG,EAAE,GAAG,GAAG,GAAG,EAAE,GAAG,GAAG,GAAG,EAAE,GAAG,GAAG,GAAG,EAAE,GAAG,GAAG,CAAC;EACpD,GAAG,CAAC,GAAG,GAAG,EAAE,GAAG,GAAG,GAAG,EAAE,GAAG,GAAG,GAAG,EAAE,GAAG,GAAG,GAAG,EAAE,GAAG,GAAG,CAAC;;EAEpD,EAAE,GAAG,CAAC,CAAC,GAAG,CAAC,CAAC,EAAE,GAAG,CAAC,CAAC,GAAG,CAAC,CAAC,EAAE,GAAG,CAAC,CAAC,GAAG,CAAC,CAAC,EAAE,GAAG,CAAC,CAAC,GAAG,CAAC;EAC/C,GAAG,CAAC,GAAG,GAAG,EAAE,GAAG,GAAG,GAAG,EAAE,GAAG,GAAG,GAAG,EAAE,GAAG,GAAG,GAAG,EAAE,GAAG,GAAG,CAAC;EACpD,GAAG,CAAC,GAAG,GAAG,EAAE,GAAG,GAAG,GAAG,EAAE,GAAG,GAAG,GAAG,EAAE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,CAAC,EAAE,CAAC,CAAC;IACxE,IAAI,CAAC,GAAG,CAAC,EAAE,GAAG,EAAE,CAAC,IAAI,OAAO,GAAG,IAAI,CAAC,GAAG,CAAC,GAAG,EAAE,IAAI,CAAC,GAAG,CAAC,EAAE,CAAC,EAAE,IAAI,CAAC,GAAG,CAAC,EAAE,CAAC,CAAC;IACxE,IAAI,CAAC,GAAG,CAAC,EAAE,GAAG,EAAE,CAAC,IAAI,OAAO,GAAG,IAAI,CAAC,GAAG,CAAC,GAAG,EAAE,IAAI,CAAC,GAAG,CAAC,EAAE,CAAC,EAAE,IAAI,CAAC,GAAG,CAAC,EAAE,CAAC,CAAC;IACxE,IAAI,CAAC,GAAG,CAAC,EAAE,GAAG,EAAE,CAAC,IAAI,OAAO,GAAG,IAAI,CAAC,GAAG,CAAC,GAAG,EAAE,IAAI,CAAC,GAAG,CAAC,EAAE,CAAC,EAAE,IAAI,CAAC,GAAG,CAAC,EAAE,CAAC,CAAC;IACxE,IAAI,CAAC,GAAG,CAAC,EAAE,GAAG,EAAE,CAAC,IAAI,OAAO,GAAG,IAAI,CAAC,GAAG,CAAC,GAAG,EAAE,IAAI,CAAC,GAAG,CAAC,EAAE,CAAC,EAAE,IAAI,CAAC,GAAG,CAAC,EAAE,CAAC,CAAC;IACxE,IAAI,CAAC,GAAG,CAAC,EAAE,GAAG,EAAE,CAAC,IAAI,OAAO,GAAG,IAAI,CAAC,GAAG,CAAC,GAAG,EAAE,IAAI,CAAC,GAAG,CAAC,EAAE,CAAC,EAAE,IAAI,CAAC,GAAG,CAAC,EAAE,CAAC,CAAC;IACxE,IAAI,CAAC,GAAG,CAAC,GAAG,GAAG,GAAG,CAAC,IAAI,OAAO,GAAG,IAAI,CAAC,GAAG,CAAC,GAAG,EAAE,IAAI,CAAC,GAAG,CAAC,GAAG,CAAC,EAAE,IAAI,CAAC,GAAG,CAAC,GAAG,CAAC,CAAC;IAC5E,IAAI,CAAC,GAAG,CAAC,GAAG,GAAG,GAAG,CAAC,IAAI,OAAO,GAAG,IAAI,CAAC,GAAG,CAAC,GAAG,EAAE,IAAI,CAAC,GAAG,CAAC,GAAG,CAAC,EAAE,IAAI,CAAC,GAAG,CAAC,GAAG,CAAC,CAAC;IAC5E,IAAI,CAAC,GAAG,CAAC,GAAG,GAAG,GAAG,CAAC,IAAI,O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"}